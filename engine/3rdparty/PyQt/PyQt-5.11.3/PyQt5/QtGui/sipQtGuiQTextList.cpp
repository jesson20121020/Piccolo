/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#include <qtextlist.h>

#include <qtextdocument.h>
#include <qtextformat.h>
#include <qtextobject.h>
#include <qstring.h>
#include <qlist.h>
#include <qmetaobject.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qobject.h>
#include <qvariant.h>
#include <qlist.h>
#include <qbytearray.h>
#include <qlist.h>
#include <qnamespace.h>
#include <qthread.h>
#include <qnamespace.h>
#include <qregexp.h>
#include <qregularexpression.h>
#include <qobjectdefs.h>


class sipQTextList : public  ::QTextList
{
public:
    sipQTextList( ::QTextDocument*);
    virtual ~sipQTextList();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const  ::QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const  ::QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const  ::QMetaMethod&) const;
    void sipProtectVirt_blockInserted(bool,const  ::QTextBlock&);
    void sipProtectVirt_blockRemoved(bool,const  ::QTextBlock&);
    void sipProtectVirt_blockFormatChanged(bool,const  ::QTextBlock&);
    QList< ::QTextBlock> sipProtect_blockList() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);
    void blockInserted(const  ::QTextBlock&);
    void blockRemoved(const  ::QTextBlock&);
    void blockFormatChanged(const  ::QTextBlock&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextList(const sipQTextList &);
    sipQTextList &operator = (const sipQTextList &);

    char sipPyMethods[10];
};

sipQTextList::sipQTextList( ::QTextDocument*a0):  ::QTextList(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextList::~sipQTextList()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQTextList::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QTextList);

    return  ::QTextList::metaObject();
}

int sipQTextList::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QTextList::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QTextList,_c,_id,_a);

    return _id;
}

void *sipQTextList::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QTextList, _clname, &sipCpp) ? sipCpp :  ::QTextList::qt_metacast(_clname));
}

bool sipQTextList::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QTextList::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQTextList::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QTextList::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQTextList::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QTextList::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextList::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QTextList::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextList::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QTextList::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextList::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QTextList::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextList::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QTextList::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextList::blockInserted(const  ::QTextBlock& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_blockInserted);

    if (!sipMeth)
    {
         ::QTextList::blockInserted(a0);
        return;
    }

    extern void sipVH_QtGui_106(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QTextBlock&);

    sipVH_QtGui_106(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextList::blockRemoved(const  ::QTextBlock& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_blockRemoved);

    if (!sipMeth)
    {
         ::QTextList::blockRemoved(a0);
        return;
    }

    extern void sipVH_QtGui_106(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QTextBlock&);

    sipVH_QtGui_106(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQTextList::blockFormatChanged(const  ::QTextBlock& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_blockFormatChanged);

    if (!sipMeth)
    {
         ::QTextList::blockFormatChanged(a0);
        return;
    }

    extern void sipVH_QtGui_106(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QTextBlock&);

    sipVH_QtGui_106(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQTextList::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipQTextList::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipQTextList::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQTextList::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipQTextList::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipQTextList::sipProtectVirt_connectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQTextList::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQTextList::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}

bool sipQTextList::sipProtect_isSignalConnected(const  ::QMetaMethod& a0) const
{
    return  ::QObject::isSignalConnected(a0);
}

void sipQTextList::sipProtectVirt_blockInserted(bool sipSelfWasArg,const  ::QTextBlock& a0)
{
    (sipSelfWasArg ?  ::QTextBlockGroup::blockInserted(a0) : blockInserted(a0));
}

void sipQTextList::sipProtectVirt_blockRemoved(bool sipSelfWasArg,const  ::QTextBlock& a0)
{
    (sipSelfWasArg ?  ::QTextBlockGroup::blockRemoved(a0) : blockRemoved(a0));
}

void sipQTextList::sipProtectVirt_blockFormatChanged(bool sipSelfWasArg,const  ::QTextBlock& a0)
{
    (sipSelfWasArg ?  ::QTextBlockGroup::blockFormatChanged(a0) : blockFormatChanged(a0));
}

QList< ::QTextBlock> sipQTextList::sipProtect_blockList() const
{
    return  ::QTextBlockGroup::blockList();
}


PyDoc_STRVAR(doc_QTextList_sender, "sender(self) -> QObject");

extern "C" {static PyObject *meth_QTextList_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextList_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTextList *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTextList, &sipCpp))
        {
             ::QObject*sipRes = 0;

        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_sender, doc_QTextList_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_receivers, "receivers(self, PYQT_SIGNAL) -> int");

extern "C" {static PyObject *meth_QTextList_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextList_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQTextList *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QTextList, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_receivers, doc_QTextList_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QTextList_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextList_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipQTextList *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextList, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_timerEvent, doc_QTextList_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_childEvent, "childEvent(self, QChildEvent)");

extern "C" {static PyObject *meth_QTextList_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextList_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipQTextList *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextList, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_childEvent, doc_QTextList_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_customEvent, "customEvent(self, QEvent)");

extern "C" {static PyObject *meth_QTextList_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextList_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQTextList *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextList, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_customEvent, doc_QTextList_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_connectNotify, "connectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QTextList_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextList_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQTextList *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTextList, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_connectNotify, doc_QTextList_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_disconnectNotify, "disconnectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QTextList_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextList_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQTextList *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTextList, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_disconnectNotify, doc_QTextList_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_senderSignalIndex, "senderSignalIndex(self) -> int");

extern "C" {static PyObject *meth_QTextList_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextList_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTextList *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTextList, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_senderSignalIndex, doc_QTextList_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_isSignalConnected, "isSignalConnected(self, QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QTextList_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextList_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMetaMethod* a0;
        const sipQTextList *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTextList, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_isSignalConnected, doc_QTextList_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_blockInserted, "blockInserted(self, QTextBlock)");

extern "C" {static PyObject *meth_QTextList_blockInserted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextList_blockInserted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTextBlock* a0;
        sipQTextList *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTextList, &sipCpp, sipType_QTextBlock, &a0))
        {
            sipCpp->sipProtectVirt_blockInserted(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_blockInserted, doc_QTextList_blockInserted);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_blockRemoved, "blockRemoved(self, QTextBlock)");

extern "C" {static PyObject *meth_QTextList_blockRemoved(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextList_blockRemoved(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTextBlock* a0;
        sipQTextList *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTextList, &sipCpp, sipType_QTextBlock, &a0))
        {
            sipCpp->sipProtectVirt_blockRemoved(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_blockRemoved, doc_QTextList_blockRemoved);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_blockFormatChanged, "blockFormatChanged(self, QTextBlock)");

extern "C" {static PyObject *meth_QTextList_blockFormatChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextList_blockFormatChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTextBlock* a0;
        sipQTextList *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTextList, &sipCpp, sipType_QTextBlock, &a0))
        {
            sipCpp->sipProtectVirt_blockFormatChanged(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_blockFormatChanged, doc_QTextList_blockFormatChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_blockList, "blockList(self) -> object");

extern "C" {static PyObject *meth_QTextList_blockList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextList_blockList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTextList *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTextList, &sipCpp))
        {
            QList< ::QTextBlock>*sipRes;

            sipRes = new QList< ::QTextBlock>(sipCpp->sipProtect_blockList());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QTextBlock,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_blockList, doc_QTextList_blockList);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_count, "count(self) -> int");

extern "C" {static PyObject *meth_QTextList_count(PyObject *, PyObject *);}
static PyObject *meth_QTextList_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextList, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_count, doc_QTextList_count);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_item, "item(self, int) -> QTextBlock");

extern "C" {static PyObject *meth_QTextList_item(PyObject *, PyObject *);}
static PyObject *meth_QTextList_item(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextList, &sipCpp, &a0))
        {
             ::QTextBlock*sipRes;

            sipRes = new  ::QTextBlock(sipCpp->item(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_item, doc_QTextList_item);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_itemNumber, "itemNumber(self, QTextBlock) -> int");

extern "C" {static PyObject *meth_QTextList_itemNumber(PyObject *, PyObject *);}
static PyObject *meth_QTextList_itemNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextBlock* a0;
        const  ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextList, &sipCpp, sipType_QTextBlock, &a0))
        {
            int sipRes;

            sipRes = sipCpp->itemNumber(*a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_itemNumber, doc_QTextList_itemNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_itemText, "itemText(self, QTextBlock) -> str");

extern "C" {static PyObject *meth_QTextList_itemText(PyObject *, PyObject *);}
static PyObject *meth_QTextList_itemText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextBlock* a0;
        const  ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextList, &sipCpp, sipType_QTextBlock, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->itemText(*a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_itemText, doc_QTextList_itemText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_removeItem, "removeItem(self, int)");

extern "C" {static PyObject *meth_QTextList_removeItem(PyObject *, PyObject *);}
static PyObject *meth_QTextList_removeItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextList, &sipCpp, &a0))
        {
            sipCpp->removeItem(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_removeItem, doc_QTextList_removeItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_remove, "remove(self, QTextBlock)");

extern "C" {static PyObject *meth_QTextList_remove(PyObject *, PyObject *);}
static PyObject *meth_QTextList_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextBlock* a0;
         ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextList, &sipCpp, sipType_QTextBlock, &a0))
        {
            sipCpp->remove(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_remove, doc_QTextList_remove);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_add, "add(self, QTextBlock)");

extern "C" {static PyObject *meth_QTextList_add(PyObject *, PyObject *);}
static PyObject *meth_QTextList_add(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextBlock* a0;
         ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextList, &sipCpp, sipType_QTextBlock, &a0))
        {
            sipCpp->add(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_add, doc_QTextList_add);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_format, "format(self) -> QTextListFormat");

extern "C" {static PyObject *meth_QTextList_format(PyObject *, PyObject *);}
static PyObject *meth_QTextList_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextList, &sipCpp))
        {
             ::QTextListFormat*sipRes;

            sipRes = new  ::QTextListFormat(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QTextListFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_format, doc_QTextList_format);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_setFormat, "setFormat(self, QTextListFormat)");

extern "C" {static PyObject *meth_QTextList_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextList_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextListFormat* a0;
         ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextList, &sipCpp, sipType_QTextListFormat, &a0))
        {
            sipCpp->setFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_setFormat, doc_QTextList_setFormat);

    return NULL;
}


extern "C" {static SIP_SSIZE_T slot_QTextList___len__(PyObject *);}
static SIP_SSIZE_T slot_QTextList___len__(PyObject *sipSelf)
{
     ::QTextList *sipCpp = reinterpret_cast< ::QTextList *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextList));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

            sipRes = (SIP_SSIZE_T)sipCpp->count();

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTextList(void *, const sipTypeDef *);}
static void *cast_QTextList(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTextList *sipCpp = reinterpret_cast< ::QTextList *>(sipCppV);

    if (targetType == sipType_QTextBlockGroup)
        return static_cast< ::QTextBlockGroup *>(sipCpp);

    if (targetType == sipType_QTextObject)
        return static_cast< ::QTextObject *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextList(void *, int);}
static void release_QTextList(void *sipCppV, int)
{
     ::QTextList *sipCpp = reinterpret_cast< ::QTextList *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QTextList(sipSimpleWrapper *);}
static void dealloc_QTextList(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTextList *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextList(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTextList(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextList(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQTextList *sipCpp = 0;

    {
         ::QTextDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QTextDocument, &a0))
        {
            sipCpp = new sipQTextList(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextList[] = {{287, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextList[] = {
    {(void *)slot_QTextList___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTextList[] = {
    {SIP_MLNAME_CAST(sipName_add), meth_QTextList_add, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_add)},
    {SIP_MLNAME_CAST(sipName_blockFormatChanged), (PyCFunction)meth_QTextList_blockFormatChanged, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_blockInserted), (PyCFunction)meth_QTextList_blockInserted, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_blockList), (PyCFunction)meth_QTextList_blockList, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_blockRemoved), (PyCFunction)meth_QTextList_blockRemoved, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QTextList_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QTextList_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_count), meth_QTextList_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_count)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QTextList_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QTextList_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_format), meth_QTextList_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_format)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QTextList_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_item), meth_QTextList_item, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_item)},
    {SIP_MLNAME_CAST(sipName_itemNumber), meth_QTextList_itemNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_itemNumber)},
    {SIP_MLNAME_CAST(sipName_itemText), meth_QTextList_itemText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_itemText)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QTextList_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_remove), meth_QTextList_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_remove)},
    {SIP_MLNAME_CAST(sipName_removeItem), meth_QTextList_removeItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_removeItem)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QTextList_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QTextList_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QTextList_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_setFormat)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QTextList_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};

PyDoc_STRVAR(doc_QTextList, "\1QTextList(QTextDocument)");


static pyqt5ClassPluginDef plugin_QTextList = {
    & ::QTextList::staticMetaObject,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtGui_QTextList = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextList,
        {0},
        &plugin_QTextList
    },
    {
        sipNameNr_QTextList,
        {0, 0, 1},
        22, methods_QTextList,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTextList,
    -1,
    -1,
    supers_QTextList,
    slots_QTextList,
    init_type_QTextList,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextList,
    0,
    0,
    0,
    release_QTextList,
    cast_QTextList,
    0,
    0,
    0,
    0,
    0,
    0
};
