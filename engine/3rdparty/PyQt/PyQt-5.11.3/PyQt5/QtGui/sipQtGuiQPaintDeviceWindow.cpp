/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#include <qpaintdevicewindow.h>

#include <qcoreevent.h>
#include <qevent.h>
#include <qpaintdevice.h>
#include <qevent.h>
#include <qrect.h>
#include <qregion.h>
#include <qnamespace.h>
#include <qnamespace.h>
#include <qwindow.h>
#include <QtGlobal>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qstring.h>
#include <qobject.h>
#include <qscreen.h>
#include <qcursor.h>
#include <qpoint.h>
#include <qicon.h>
#include <qsize.h>
#include <qmargins.h>
#include <qnamespace.h>
#include <qsurfaceformat.h>
#include <qsurface.h>
#include <qmetaobject.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qvariant.h>
#include <qlist.h>
#include <qbytearray.h>
#include <qlist.h>
#include <qthread.h>
#include <qnamespace.h>
#include <qregexp.h>
#include <qregularexpression.h>
#include <qobjectdefs.h>
#include <qpaintengine.h>


PyDoc_STRVAR(doc_QPaintDeviceWindow_update, "update(self, QRect)\n"
"update(self, QRegion)\n"
"update(self)");

extern "C" {static PyObject *meth_QPaintDeviceWindow_update(PyObject *, PyObject *);}
static PyObject *meth_QPaintDeviceWindow_update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QRect* a0;
         ::QPaintDeviceWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPaintDeviceWindow, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->update(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRegion* a0;
         ::QPaintDeviceWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPaintDeviceWindow, &sipCpp, sipType_QRegion, &a0))
        {
            sipCpp->update(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QPaintDeviceWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintDeviceWindow, &sipCpp))
        {
            sipCpp->update();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintDeviceWindow, sipName_update, doc_QPaintDeviceWindow_update);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QPaintDeviceWindow(void *, const sipTypeDef *);}
static void *cast_QPaintDeviceWindow(void *sipCppV, const sipTypeDef *targetType)
{
     ::QPaintDeviceWindow *sipCpp = reinterpret_cast< ::QPaintDeviceWindow *>(sipCppV);

    if (targetType == sipType_QWindow)
        return static_cast< ::QWindow *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QSurface)
        return static_cast< ::QSurface *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPaintDeviceWindow(void *, int);}
static void release_QPaintDeviceWindow(void *sipCppV, int)
{
     ::QPaintDeviceWindow *sipCpp = reinterpret_cast< ::QPaintDeviceWindow *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QPaintDeviceWindow(sipSimpleWrapper *);}
static void dealloc_QPaintDeviceWindow(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPaintDeviceWindow(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPaintDeviceWindow[] = {{377, 255, 0}, {192, 255, 1}};


static PyMethodDef methods_QPaintDeviceWindow[] = {
    {SIP_MLNAME_CAST(sipName_update), meth_QPaintDeviceWindow_update, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintDeviceWindow_update)}
};


static pyqt5ClassPluginDef plugin_QPaintDeviceWindow = {
    & ::QPaintDeviceWindow::staticMetaObject,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtGui_QPaintDeviceWindow = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPaintDeviceWindow,
        {0},
        &plugin_QPaintDeviceWindow
    },
    {
        sipNameNr_QPaintDeviceWindow,
        {0, 0, 1},
        1, methods_QPaintDeviceWindow,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QPaintDeviceWindow,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPaintDeviceWindow,
    0,
    0,
    0,
    release_QPaintDeviceWindow,
    cast_QPaintDeviceWindow,
    0,
    0,
    0,
    0,
    0,
    0
};
