/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#include <qopenglcontext.h>

#include <qlist.h>
#include <qopenglcontext.h>
#include <qmetaobject.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qobject.h>
#include <qstring.h>
#include <qvariant.h>
#include <qlist.h>
#include <qbytearray.h>
#include <qlist.h>
#include <qnamespace.h>
#include <qthread.h>
#include <qnamespace.h>
#include <qregexp.h>
#include <qregularexpression.h>
#include <qobjectdefs.h>


PyDoc_STRVAR(doc_QOpenGLContextGroup_shares, "shares(self) -> object");

extern "C" {static PyObject *meth_QOpenGLContextGroup_shares(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContextGroup_shares(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QOpenGLContextGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContextGroup, &sipCpp))
        {
            QList< ::QOpenGLContext*>*sipRes;

            sipRes = new QList< ::QOpenGLContext*>(sipCpp->shares());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QOpenGLContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContextGroup, sipName_shares, doc_QOpenGLContextGroup_shares);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContextGroup_currentContextGroup, "currentContextGroup() -> QOpenGLContextGroup");

extern "C" {static PyObject *meth_QOpenGLContextGroup_currentContextGroup(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContextGroup_currentContextGroup(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QOpenGLContextGroup*sipRes;

            sipRes =  ::QOpenGLContextGroup::currentContextGroup();

            return sipConvertFromType(sipRes,sipType_QOpenGLContextGroup,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContextGroup, sipName_currentContextGroup, doc_QOpenGLContextGroup_currentContextGroup);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QOpenGLContextGroup(void *, const sipTypeDef *);}
static void *cast_QOpenGLContextGroup(void *sipCppV, const sipTypeDef *targetType)
{
     ::QOpenGLContextGroup *sipCpp = reinterpret_cast< ::QOpenGLContextGroup *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLContextGroup(void *, int);}
static void release_QOpenGLContextGroup(void *sipCppV, int)
{
     ::QOpenGLContextGroup *sipCpp = reinterpret_cast< ::QOpenGLContextGroup *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QOpenGLContextGroup(sipSimpleWrapper *);}
static void dealloc_QOpenGLContextGroup(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOpenGLContextGroup(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOpenGLContextGroup[] = {{25, 0, 1}};


static PyMethodDef methods_QOpenGLContextGroup[] = {
    {SIP_MLNAME_CAST(sipName_currentContextGroup), meth_QOpenGLContextGroup_currentContextGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContextGroup_currentContextGroup)},
    {SIP_MLNAME_CAST(sipName_shares), meth_QOpenGLContextGroup_shares, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContextGroup_shares)}
};


static pyqt5ClassPluginDef plugin_QOpenGLContextGroup = {
    & ::QOpenGLContextGroup::staticMetaObject,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtGui_QOpenGLContextGroup = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLContextGroup,
        {0},
        &plugin_QOpenGLContextGroup
    },
    {
        sipNameNr_QOpenGLContextGroup,
        {0, 0, 1},
        2, methods_QOpenGLContextGroup,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QOpenGLContextGroup,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QOpenGLContextGroup,
    0,
    0,
    0,
    release_QOpenGLContextGroup,
    cast_QOpenGLContextGroup,
    0,
    0,
    0,
    0,
    0,
    0
};
