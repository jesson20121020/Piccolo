/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#include <qsyntaxhighlighter.h>

#include <qtextdocument.h>
#include <qobject.h>
#include <qtextobject.h>
#include <qtextobject.h>
#include <qtextformat.h>
#include <qcolor.h>
#include <qfont.h>
#include <qstring.h>
#include <qmetaobject.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qvariant.h>
#include <qlist.h>
#include <qbytearray.h>
#include <qlist.h>
#include <qnamespace.h>
#include <qthread.h>
#include <qnamespace.h>
#include <qregexp.h>
#include <qregularexpression.h>
#include <qobjectdefs.h>


class sipQSyntaxHighlighter : public  ::QSyntaxHighlighter
{
public:
    sipQSyntaxHighlighter( ::QTextDocument*);
    sipQSyntaxHighlighter( ::QObject*);
    virtual ~sipQSyntaxHighlighter();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const  ::QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const  ::QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const  ::QMetaMethod&) const;
    void sipProtect_highlightBlock(const  ::QString&);
    void sipProtect_setFormat(int,int,const  ::QTextCharFormat&);
    void sipProtect_setFormat(int,int,const  ::QColor&);
    void sipProtect_setFormat(int,int,const  ::QFont&);
     ::QTextCharFormat sipProtect_format(int) const;
    int sipProtect_previousBlockState() const;
    int sipProtect_currentBlockState() const;
    void sipProtect_setCurrentBlockState(int);
    void sipProtect_setCurrentBlockUserData( ::QTextBlockUserData*);
     ::QTextBlockUserData* sipProtect_currentBlockUserData() const;
     ::QTextBlock sipProtect_currentBlock() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void highlightBlock(const  ::QString&);
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSyntaxHighlighter(const sipQSyntaxHighlighter &);
    sipQSyntaxHighlighter &operator = (const sipQSyntaxHighlighter &);

    char sipPyMethods[8];
};

sipQSyntaxHighlighter::sipQSyntaxHighlighter( ::QTextDocument*a0):  ::QSyntaxHighlighter(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSyntaxHighlighter::sipQSyntaxHighlighter( ::QObject*a0):  ::QSyntaxHighlighter(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSyntaxHighlighter::~sipQSyntaxHighlighter()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSyntaxHighlighter::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QSyntaxHighlighter);

    return  ::QSyntaxHighlighter::metaObject();
}

int sipQSyntaxHighlighter::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSyntaxHighlighter::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QSyntaxHighlighter,_c,_id,_a);

    return _id;
}

void *sipQSyntaxHighlighter::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QSyntaxHighlighter, _clname, &sipCpp) ? sipCpp :  ::QSyntaxHighlighter::qt_metacast(_clname));
}

void sipQSyntaxHighlighter::highlightBlock(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QSyntaxHighlighter,sipName_highlightBlock);

    if (!sipMeth)
        return;

    extern void sipVH_QtGui_103(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    sipVH_QtGui_103(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSyntaxHighlighter::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QSyntaxHighlighter::event(a0);

    extern bool sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_5(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSyntaxHighlighter::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSyntaxHighlighter::eventFilter(a0,a1);

    extern bool sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_4(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQSyntaxHighlighter::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSyntaxHighlighter::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_3(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSyntaxHighlighter::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSyntaxHighlighter::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_2(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSyntaxHighlighter::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSyntaxHighlighter::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_1(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSyntaxHighlighter::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSyntaxHighlighter::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSyntaxHighlighter::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSyntaxHighlighter::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtGui_0(sipGILState, sipImportedVirtErrorHandlers_QtGui_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQSyntaxHighlighter::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipQSyntaxHighlighter::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipQSyntaxHighlighter::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQSyntaxHighlighter::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipQSyntaxHighlighter::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipQSyntaxHighlighter::sipProtectVirt_connectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQSyntaxHighlighter::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQSyntaxHighlighter::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}

bool sipQSyntaxHighlighter::sipProtect_isSignalConnected(const  ::QMetaMethod& a0) const
{
    return  ::QObject::isSignalConnected(a0);
}

void sipQSyntaxHighlighter::sipProtect_highlightBlock(const  ::QString& a0)
{
    highlightBlock(a0);
}

void sipQSyntaxHighlighter::sipProtect_setFormat(int a0,int a1,const  ::QTextCharFormat& a2)
{
     ::QSyntaxHighlighter::setFormat(a0,a1,a2);
}

void sipQSyntaxHighlighter::sipProtect_setFormat(int a0,int a1,const  ::QColor& a2)
{
     ::QSyntaxHighlighter::setFormat(a0,a1,a2);
}

void sipQSyntaxHighlighter::sipProtect_setFormat(int a0,int a1,const  ::QFont& a2)
{
     ::QSyntaxHighlighter::setFormat(a0,a1,a2);
}

 ::QTextCharFormat sipQSyntaxHighlighter::sipProtect_format(int a0) const
{
    return  ::QSyntaxHighlighter::format(a0);
}

int sipQSyntaxHighlighter::sipProtect_previousBlockState() const
{
    return  ::QSyntaxHighlighter::previousBlockState();
}

int sipQSyntaxHighlighter::sipProtect_currentBlockState() const
{
    return  ::QSyntaxHighlighter::currentBlockState();
}

void sipQSyntaxHighlighter::sipProtect_setCurrentBlockState(int a0)
{
     ::QSyntaxHighlighter::setCurrentBlockState(a0);
}

void sipQSyntaxHighlighter::sipProtect_setCurrentBlockUserData( ::QTextBlockUserData*a0)
{
     ::QSyntaxHighlighter::setCurrentBlockUserData(a0);
}

 ::QTextBlockUserData* sipQSyntaxHighlighter::sipProtect_currentBlockUserData() const
{
    return  ::QSyntaxHighlighter::currentBlockUserData();
}

 ::QTextBlock sipQSyntaxHighlighter::sipProtect_currentBlock() const
{
    return  ::QSyntaxHighlighter::currentBlock();
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_sender, "sender(self) -> QObject");

extern "C" {static PyObject *meth_QSyntaxHighlighter_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSyntaxHighlighter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
             ::QObject*sipRes = 0;

        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_sender, doc_QSyntaxHighlighter_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_receivers, "receivers(self, PYQT_SIGNAL) -> int");

extern "C" {static PyObject *meth_QSyntaxHighlighter_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQSyntaxHighlighter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_receivers, doc_QSyntaxHighlighter_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_timerEvent, doc_QSyntaxHighlighter_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_childEvent, "childEvent(self, QChildEvent)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_childEvent, doc_QSyntaxHighlighter_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_customEvent, "customEvent(self, QEvent)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_customEvent, doc_QSyntaxHighlighter_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_connectNotify, "connectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_connectNotify, doc_QSyntaxHighlighter_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_disconnectNotify, "disconnectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_disconnectNotify, doc_QSyntaxHighlighter_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_senderSignalIndex, "senderSignalIndex(self) -> int");

extern "C" {static PyObject *meth_QSyntaxHighlighter_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSyntaxHighlighter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_senderSignalIndex, doc_QSyntaxHighlighter_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_isSignalConnected, "isSignalConnected(self, QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QSyntaxHighlighter_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMetaMethod* a0;
        const sipQSyntaxHighlighter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_isSignalConnected, doc_QSyntaxHighlighter_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_setDocument, "setDocument(self, QTextDocument)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_setDocument(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_setDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QTextDocument* a0;
        PyObject *a0Keep;
         ::QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0Keep, sipType_QTextDocument, &a0))
        {
            sipCpp->setDocument(a0);

            sipKeepReference(sipSelf, -3, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_setDocument, doc_QSyntaxHighlighter_setDocument);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_document, "document(self) -> QTextDocument");

extern "C" {static PyObject *meth_QSyntaxHighlighter_document(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_document(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
             ::QTextDocument*sipRes;

            sipRes = sipCpp->document();

            return sipConvertFromType(sipRes,sipType_QTextDocument,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_document, doc_QSyntaxHighlighter_document);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_rehighlight, "rehighlight(self)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_rehighlight(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_rehighlight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
            sipCpp->rehighlight();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_rehighlight, doc_QSyntaxHighlighter_rehighlight);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_rehighlightBlock, "rehighlightBlock(self, QTextBlock)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_rehighlightBlock(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_rehighlightBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextBlock* a0;
         ::QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, sipType_QTextBlock, &a0))
        {
            sipCpp->rehighlightBlock(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_rehighlightBlock, doc_QSyntaxHighlighter_rehighlightBlock);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_highlightBlock, "highlightBlock(self, str)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_highlightBlock(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_highlightBlock(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QString* a0;
        int a0State = 0;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSyntaxHighlighter, sipName_highlightBlock);
                return NULL;
            }

            sipCpp->sipProtect_highlightBlock(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_highlightBlock, doc_QSyntaxHighlighter_highlightBlock);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_setFormat, "setFormat(self, int, int, QTextCharFormat)\n"
"setFormat(self, int, int, Union[QColor, Qt.GlobalColor, QGradient])\n"
"setFormat(self, int, int, QFont)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_setFormat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_setFormat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const  ::QTextCharFormat* a2;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BiiJ9", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0, &a1, sipType_QTextCharFormat, &a2))
        {
            sipCpp->sipProtect_setFormat(a0,a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const  ::QColor* a2;
        int a2State = 0;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BiiJ1", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0, &a1, sipType_QColor, &a2, &a2State))
        {
            sipCpp->sipProtect_setFormat(a0,a1,*a2);
            sipReleaseType(const_cast< ::QColor *>(a2),sipType_QColor,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const  ::QFont* a2;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BiiJ9", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0, &a1, sipType_QFont, &a2))
        {
            sipCpp->sipProtect_setFormat(a0,a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_setFormat, doc_QSyntaxHighlighter_setFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_format, "format(self, int) -> QTextCharFormat");

extern "C" {static PyObject *meth_QSyntaxHighlighter_format(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_format(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const sipQSyntaxHighlighter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0))
        {
             ::QTextCharFormat*sipRes;

            sipRes = new  ::QTextCharFormat(sipCpp->sipProtect_format(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_format, doc_QSyntaxHighlighter_format);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_previousBlockState, "previousBlockState(self) -> int");

extern "C" {static PyObject *meth_QSyntaxHighlighter_previousBlockState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_previousBlockState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSyntaxHighlighter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_previousBlockState();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_previousBlockState, doc_QSyntaxHighlighter_previousBlockState);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_currentBlockState, "currentBlockState(self) -> int");

extern "C" {static PyObject *meth_QSyntaxHighlighter_currentBlockState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_currentBlockState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSyntaxHighlighter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_currentBlockState();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_currentBlockState, doc_QSyntaxHighlighter_currentBlockState);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_setCurrentBlockState, "setCurrentBlockState(self, int)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_setCurrentBlockState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_setCurrentBlockState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0))
        {
            sipCpp->sipProtect_setCurrentBlockState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_setCurrentBlockState, doc_QSyntaxHighlighter_setCurrentBlockState);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_setCurrentBlockUserData, "setCurrentBlockUserData(self, QTextBlockUserData)");

extern "C" {static PyObject *meth_QSyntaxHighlighter_setCurrentBlockUserData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_setCurrentBlockUserData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QTextBlockUserData* a0;
        PyObject *a0Wrapper;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B@J8", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0Wrapper, sipType_QTextBlockUserData, &a0))
        {
            int sipIsErr = 0;

        // Ownership of the user data is with the document not the syntax highlighter.
        
        typedef PyObject *(*helper_func)(QObject *, const sipTypeDef *);
        
        static helper_func helper = 0;
        
        if (!helper)
        {
            helper = (helper_func)sipImportSymbol("qtgui_wrap_ancestors");
            Q_ASSERT(helper);
        }
        
        QTextDocument *td = sipCpp->document();
        
        if (td)
        {
            PyObject *py_td = helper(td, sipType_QTextDocument);
        
            if (!py_td)
            {
                sipIsErr = 1;
            }
            else
            {
                sipTransferTo(a0Wrapper, py_td);
                Py_DECREF(py_td);
            }
        }
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipCpp->setCurrentBlockUserData(a0);
        #else
        sipCpp->sipProtect_setCurrentBlockUserData(a0);
        #endif

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_setCurrentBlockUserData, doc_QSyntaxHighlighter_setCurrentBlockUserData);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_currentBlockUserData, "currentBlockUserData(self) -> QTextBlockUserData");

extern "C" {static PyObject *meth_QSyntaxHighlighter_currentBlockUserData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_currentBlockUserData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSyntaxHighlighter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
             ::QTextBlockUserData*sipRes;

            sipRes = sipCpp->sipProtect_currentBlockUserData();

            return sipConvertFromType(sipRes,sipType_QTextBlockUserData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_currentBlockUserData, doc_QSyntaxHighlighter_currentBlockUserData);

    return NULL;
}


PyDoc_STRVAR(doc_QSyntaxHighlighter_currentBlock, "currentBlock(self) -> QTextBlock");

extern "C" {static PyObject *meth_QSyntaxHighlighter_currentBlock(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_currentBlock(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSyntaxHighlighter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
             ::QTextBlock*sipRes;

            sipRes = new  ::QTextBlock(sipCpp->sipProtect_currentBlock());

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_currentBlock, doc_QSyntaxHighlighter_currentBlock);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSyntaxHighlighter(void *, const sipTypeDef *);}
static void *cast_QSyntaxHighlighter(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSyntaxHighlighter *sipCpp = reinterpret_cast< ::QSyntaxHighlighter *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSyntaxHighlighter(void *, int);}
static void release_QSyntaxHighlighter(void *sipCppV, int)
{
     ::QSyntaxHighlighter *sipCpp = reinterpret_cast< ::QSyntaxHighlighter *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSyntaxHighlighter(sipSimpleWrapper *);}
static void dealloc_QSyntaxHighlighter(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSyntaxHighlighter *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSyntaxHighlighter(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSyntaxHighlighter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSyntaxHighlighter(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSyntaxHighlighter *sipCpp = 0;

    {
         ::QTextDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QTextDocument, &a0, sipOwner))
        {
            sipCpp = new sipQSyntaxHighlighter(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQSyntaxHighlighter(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSyntaxHighlighter[] = {{25, 0, 1}};


static PyMethodDef methods_QSyntaxHighlighter[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QSyntaxHighlighter_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QSyntaxHighlighter_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_currentBlock), (PyCFunction)meth_QSyntaxHighlighter_currentBlock, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_currentBlock)},
    {SIP_MLNAME_CAST(sipName_currentBlockState), (PyCFunction)meth_QSyntaxHighlighter_currentBlockState, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_currentBlockState)},
    {SIP_MLNAME_CAST(sipName_currentBlockUserData), (PyCFunction)meth_QSyntaxHighlighter_currentBlockUserData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_currentBlockUserData)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QSyntaxHighlighter_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QSyntaxHighlighter_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_document), meth_QSyntaxHighlighter_document, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_document)},
    {SIP_MLNAME_CAST(sipName_format), (PyCFunction)meth_QSyntaxHighlighter_format, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_format)},
    {SIP_MLNAME_CAST(sipName_highlightBlock), (PyCFunction)meth_QSyntaxHighlighter_highlightBlock, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_highlightBlock)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QSyntaxHighlighter_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_previousBlockState), (PyCFunction)meth_QSyntaxHighlighter_previousBlockState, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_previousBlockState)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QSyntaxHighlighter_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_rehighlight), meth_QSyntaxHighlighter_rehighlight, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_rehighlight)},
    {SIP_MLNAME_CAST(sipName_rehighlightBlock), meth_QSyntaxHighlighter_rehighlightBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_rehighlightBlock)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QSyntaxHighlighter_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QSyntaxHighlighter_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrentBlockState), (PyCFunction)meth_QSyntaxHighlighter_setCurrentBlockState, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_setCurrentBlockState)},
    {SIP_MLNAME_CAST(sipName_setCurrentBlockUserData), (PyCFunction)meth_QSyntaxHighlighter_setCurrentBlockUserData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_setCurrentBlockUserData)},
    {SIP_MLNAME_CAST(sipName_setDocument), meth_QSyntaxHighlighter_setDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_setDocument)},
    {SIP_MLNAME_CAST(sipName_setFormat), (PyCFunction)meth_QSyntaxHighlighter_setFormat, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSyntaxHighlighter_setFormat)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QSyntaxHighlighter_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};

PyDoc_STRVAR(doc_QSyntaxHighlighter, "\1QSyntaxHighlighter(QTextDocument)\n"
"QSyntaxHighlighter(QObject)");


static pyqt5ClassPluginDef plugin_QSyntaxHighlighter = {
    & ::QSyntaxHighlighter::staticMetaObject,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtGui_QSyntaxHighlighter = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSyntaxHighlighter,
        {0},
        &plugin_QSyntaxHighlighter
    },
    {
        sipNameNr_QSyntaxHighlighter,
        {0, 0, 1},
        22, methods_QSyntaxHighlighter,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSyntaxHighlighter,
    -1,
    -1,
    supers_QSyntaxHighlighter,
    0,
    init_type_QSyntaxHighlighter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSyntaxHighlighter,
    0,
    0,
    0,
    release_QSyntaxHighlighter,
    cast_QSyntaxHighlighter,
    0,
    0,
    0,
    0,
    0,
    0
};
