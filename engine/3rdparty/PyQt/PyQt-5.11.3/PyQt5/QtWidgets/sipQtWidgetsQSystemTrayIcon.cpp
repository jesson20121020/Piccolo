/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#include <qsystemtrayicon.h>

#include <qobject.h>
#include <qicon.h>
#include <qcoreevent.h>
#include <qstring.h>
#include <qrect.h>
#include <qmenu.h>
#include <qmetaobject.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qvariant.h>
#include <qlist.h>
#include <qbytearray.h>
#include <qlist.h>
#include <qnamespace.h>
#include <qthread.h>
#include <qnamespace.h>
#include <qregexp.h>
#include <qregularexpression.h>
#include <qobjectdefs.h>


class sipQSystemTrayIcon : public  ::QSystemTrayIcon
{
public:
    sipQSystemTrayIcon( ::QObject*);
    sipQSystemTrayIcon(const  ::QIcon&, ::QObject*);
    virtual ~sipQSystemTrayIcon();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const  ::QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const  ::QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const  ::QMetaMethod&) const;
    bool sipProtectVirt_event(bool, ::QEvent*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSystemTrayIcon(const sipQSystemTrayIcon &);
    sipQSystemTrayIcon &operator = (const sipQSystemTrayIcon &);

    char sipPyMethods[7];
};

sipQSystemTrayIcon::sipQSystemTrayIcon( ::QObject*a0):  ::QSystemTrayIcon(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSystemTrayIcon::sipQSystemTrayIcon(const  ::QIcon& a0, ::QObject*a1):  ::QSystemTrayIcon(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSystemTrayIcon::~sipQSystemTrayIcon()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSystemTrayIcon::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QSystemTrayIcon);

    return  ::QSystemTrayIcon::metaObject();
}

int sipQSystemTrayIcon::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSystemTrayIcon::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QSystemTrayIcon,_c,_id,_a);

    return _id;
}

void *sipQSystemTrayIcon::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QSystemTrayIcon, _clname, &sipCpp) ? sipCpp :  ::QSystemTrayIcon::qt_metacast(_clname));
}

bool sipQSystemTrayIcon::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QSystemTrayIcon::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSystemTrayIcon::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSystemTrayIcon::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQSystemTrayIcon::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSystemTrayIcon::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSystemTrayIcon::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSystemTrayIcon::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSystemTrayIcon::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSystemTrayIcon::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSystemTrayIcon::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSystemTrayIcon::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSystemTrayIcon::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSystemTrayIcon::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQSystemTrayIcon::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipQSystemTrayIcon::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipQSystemTrayIcon::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQSystemTrayIcon::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipQSystemTrayIcon::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipQSystemTrayIcon::sipProtectVirt_connectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQSystemTrayIcon::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQSystemTrayIcon::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}

bool sipQSystemTrayIcon::sipProtect_isSignalConnected(const  ::QMetaMethod& a0) const
{
    return  ::QObject::isSignalConnected(a0);
}

bool sipQSystemTrayIcon::sipProtectVirt_event(bool sipSelfWasArg, ::QEvent*a0)
{
    return (sipSelfWasArg ?  ::QSystemTrayIcon::event(a0) : event(a0));
}


PyDoc_STRVAR(doc_QSystemTrayIcon_sender, "sender(self) -> QObject");

extern "C" {static PyObject *meth_QSystemTrayIcon_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSystemTrayIcon *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSystemTrayIcon, &sipCpp))
        {
             ::QObject*sipRes = 0;

        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_sender, doc_QSystemTrayIcon_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_receivers, "receivers(self, PYQT_SIGNAL) -> int");

extern "C" {static PyObject *meth_QSystemTrayIcon_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQSystemTrayIcon *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QSystemTrayIcon, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_receivers, doc_QSystemTrayIcon_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QSystemTrayIcon_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipQSystemTrayIcon *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSystemTrayIcon, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_timerEvent, doc_QSystemTrayIcon_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_childEvent, "childEvent(self, QChildEvent)");

extern "C" {static PyObject *meth_QSystemTrayIcon_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipQSystemTrayIcon *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSystemTrayIcon, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_childEvent, doc_QSystemTrayIcon_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_customEvent, "customEvent(self, QEvent)");

extern "C" {static PyObject *meth_QSystemTrayIcon_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQSystemTrayIcon *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSystemTrayIcon, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_customEvent, doc_QSystemTrayIcon_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_connectNotify, "connectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QSystemTrayIcon_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQSystemTrayIcon *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSystemTrayIcon, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_connectNotify, doc_QSystemTrayIcon_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_disconnectNotify, "disconnectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QSystemTrayIcon_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQSystemTrayIcon *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSystemTrayIcon, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_disconnectNotify, doc_QSystemTrayIcon_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_senderSignalIndex, "senderSignalIndex(self) -> int");

extern "C" {static PyObject *meth_QSystemTrayIcon_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSystemTrayIcon *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSystemTrayIcon, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_senderSignalIndex, doc_QSystemTrayIcon_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_isSignalConnected, "isSignalConnected(self, QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QSystemTrayIcon_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMetaMethod* a0;
        const sipQSystemTrayIcon *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSystemTrayIcon, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_isSignalConnected, doc_QSystemTrayIcon_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_setContextMenu, "setContextMenu(self, QMenu)");

extern "C" {static PyObject *meth_QSystemTrayIcon_setContextMenu(PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_setContextMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QMenu* a0;
        PyObject *a0Keep;
         ::QSystemTrayIcon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QSystemTrayIcon, &sipCpp, &a0Keep, sipType_QMenu, &a0))
        {
            sipCpp->setContextMenu(a0);

            sipKeepReference(sipSelf, -44, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_setContextMenu, doc_QSystemTrayIcon_setContextMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_contextMenu, "contextMenu(self) -> QMenu");

extern "C" {static PyObject *meth_QSystemTrayIcon_contextMenu(PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_contextMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSystemTrayIcon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSystemTrayIcon, &sipCpp))
        {
             ::QMenu*sipRes;

            sipRes = sipCpp->contextMenu();

            return sipConvertFromType(sipRes,sipType_QMenu,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_contextMenu, doc_QSystemTrayIcon_contextMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_geometry, "geometry(self) -> QRect");

extern "C" {static PyObject *meth_QSystemTrayIcon_geometry(PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_geometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSystemTrayIcon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSystemTrayIcon, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->geometry());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_geometry, doc_QSystemTrayIcon_geometry);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_icon, "icon(self) -> QIcon");

extern "C" {static PyObject *meth_QSystemTrayIcon_icon(PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSystemTrayIcon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSystemTrayIcon, &sipCpp))
        {
             ::QIcon*sipRes;

            sipRes = new  ::QIcon(sipCpp->icon());

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_icon, doc_QSystemTrayIcon_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_setIcon, "setIcon(self, QIcon)");

extern "C" {static PyObject *meth_QSystemTrayIcon_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QIcon* a0;
         ::QSystemTrayIcon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSystemTrayIcon, &sipCpp, sipType_QIcon, &a0))
        {
            sipCpp->setIcon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_setIcon, doc_QSystemTrayIcon_setIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_toolTip, "toolTip(self) -> str");

extern "C" {static PyObject *meth_QSystemTrayIcon_toolTip(PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_toolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSystemTrayIcon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSystemTrayIcon, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toolTip());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_toolTip, doc_QSystemTrayIcon_toolTip);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_setToolTip, "setToolTip(self, str)");

extern "C" {static PyObject *meth_QSystemTrayIcon_setToolTip(PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_setToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSystemTrayIcon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSystemTrayIcon, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setToolTip(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_setToolTip, doc_QSystemTrayIcon_setToolTip);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_isSystemTrayAvailable, "isSystemTrayAvailable() -> bool");

extern "C" {static PyObject *meth_QSystemTrayIcon_isSystemTrayAvailable(PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_isSystemTrayAvailable(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QSystemTrayIcon::isSystemTrayAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_isSystemTrayAvailable, doc_QSystemTrayIcon_isSystemTrayAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_supportsMessages, "supportsMessages() -> bool");

extern "C" {static PyObject *meth_QSystemTrayIcon_supportsMessages(PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_supportsMessages(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QSystemTrayIcon::supportsMessages();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_supportsMessages, doc_QSystemTrayIcon_supportsMessages);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_showMessage, "showMessage(self, str, str, icon: QSystemTrayIcon.MessageIcon = QSystemTrayIcon.Information, msecs: int = 10000)\n"
"showMessage(self, str, str, QIcon, msecs: int = 10000)");

extern "C" {static PyObject *meth_QSystemTrayIcon_showMessage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_showMessage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QSystemTrayIcon::MessageIcon a2 = QSystemTrayIcon::Information;
        int a3 = 10000;
         ::QSystemTrayIcon *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_icon,
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1|Ei", &sipSelf, sipType_QSystemTrayIcon, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QSystemTrayIcon_MessageIcon, &a2, &a3))
        {
            sipCpp->showMessage(*a0,*a1,a2,a3);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QIcon* a2;
        int a3 = 10000;
         ::QSystemTrayIcon *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1J9|i", &sipSelf, sipType_QSystemTrayIcon, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QIcon, &a2, &a3))
        {
            sipCpp->showMessage(*a0,*a1,*a2,a3);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_showMessage, doc_QSystemTrayIcon_showMessage);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_isVisible, "isVisible(self) -> bool");

extern "C" {static PyObject *meth_QSystemTrayIcon_isVisible(PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_isVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSystemTrayIcon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSystemTrayIcon, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_isVisible, doc_QSystemTrayIcon_isVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_hide, "hide(self)");

extern "C" {static PyObject *meth_QSystemTrayIcon_hide(PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_hide(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QSystemTrayIcon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSystemTrayIcon, &sipCpp))
        {
            sipCpp->hide();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_hide, doc_QSystemTrayIcon_hide);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_setVisible, "setVisible(self, bool)");

extern "C" {static PyObject *meth_QSystemTrayIcon_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QSystemTrayIcon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSystemTrayIcon, &sipCpp, &a0))
        {
            sipCpp->setVisible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_setVisible, doc_QSystemTrayIcon_setVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_show, "show(self)");

extern "C" {static PyObject *meth_QSystemTrayIcon_show(PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_show(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QSystemTrayIcon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSystemTrayIcon, &sipCpp))
        {
            sipCpp->show();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_show, doc_QSystemTrayIcon_show);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemTrayIcon_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QSystemTrayIcon_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSystemTrayIcon_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQSystemTrayIcon *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSystemTrayIcon, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemTrayIcon, sipName_event, doc_QSystemTrayIcon_event);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSystemTrayIcon(void *, const sipTypeDef *);}
static void *cast_QSystemTrayIcon(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSystemTrayIcon *sipCpp = reinterpret_cast< ::QSystemTrayIcon *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSystemTrayIcon(void *, int);}
static void release_QSystemTrayIcon(void *sipCppV, int)
{
     ::QSystemTrayIcon *sipCpp = reinterpret_cast< ::QSystemTrayIcon *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSystemTrayIcon(sipSimpleWrapper *);}
static void dealloc_QSystemTrayIcon(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSystemTrayIcon *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSystemTrayIcon(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSystemTrayIcon(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSystemTrayIcon(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSystemTrayIcon *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQSystemTrayIcon(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QIcon* a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QIcon, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQSystemTrayIcon(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSystemTrayIcon[] = {{32, 0, 1}};


static PyMethodDef methods_QSystemTrayIcon[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QSystemTrayIcon_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QSystemTrayIcon_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenu), meth_QSystemTrayIcon_contextMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemTrayIcon_contextMenu)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QSystemTrayIcon_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QSystemTrayIcon_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QSystemTrayIcon_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSystemTrayIcon_event)},
    {SIP_MLNAME_CAST(sipName_geometry), meth_QSystemTrayIcon_geometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemTrayIcon_geometry)},
    {SIP_MLNAME_CAST(sipName_hide), meth_QSystemTrayIcon_hide, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemTrayIcon_hide)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QSystemTrayIcon_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemTrayIcon_icon)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QSystemTrayIcon_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isSystemTrayAvailable), meth_QSystemTrayIcon_isSystemTrayAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemTrayIcon_isSystemTrayAvailable)},
    {SIP_MLNAME_CAST(sipName_isVisible), meth_QSystemTrayIcon_isVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemTrayIcon_isVisible)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QSystemTrayIcon_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QSystemTrayIcon_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QSystemTrayIcon_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setContextMenu), meth_QSystemTrayIcon_setContextMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemTrayIcon_setContextMenu)},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QSystemTrayIcon_setIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemTrayIcon_setIcon)},
    {SIP_MLNAME_CAST(sipName_setToolTip), meth_QSystemTrayIcon_setToolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemTrayIcon_setToolTip)},
    {SIP_MLNAME_CAST(sipName_setVisible), meth_QSystemTrayIcon_setVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemTrayIcon_setVisible)},
    {SIP_MLNAME_CAST(sipName_show), meth_QSystemTrayIcon_show, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemTrayIcon_show)},
    {SIP_MLNAME_CAST(sipName_showMessage), (PyCFunction)meth_QSystemTrayIcon_showMessage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSystemTrayIcon_showMessage)},
    {SIP_MLNAME_CAST(sipName_supportsMessages), meth_QSystemTrayIcon_supportsMessages, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemTrayIcon_supportsMessages)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QSystemTrayIcon_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toolTip), meth_QSystemTrayIcon_toolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemTrayIcon_toolTip)}
};

static sipEnumMemberDef enummembers_QSystemTrayIcon[] = {
    {sipName_Context, static_cast<int>( ::QSystemTrayIcon::Context), 415},
    {sipName_Critical, static_cast<int>( ::QSystemTrayIcon::Critical), 416},
    {sipName_DoubleClick, static_cast<int>( ::QSystemTrayIcon::DoubleClick), 415},
    {sipName_Information, static_cast<int>( ::QSystemTrayIcon::Information), 416},
    {sipName_MiddleClick, static_cast<int>( ::QSystemTrayIcon::MiddleClick), 415},
    {sipName_NoIcon, static_cast<int>( ::QSystemTrayIcon::NoIcon), 416},
    {sipName_Trigger, static_cast<int>( ::QSystemTrayIcon::Trigger), 415},
    {sipName_Unknown, static_cast<int>( ::QSystemTrayIcon::Unknown), 415},
    {sipName_Warning, static_cast<int>( ::QSystemTrayIcon::Warning), 416},
};

PyDoc_STRVAR(doc_QSystemTrayIcon, "\1QSystemTrayIcon(parent: QObject = None)\n"
"QSystemTrayIcon(QIcon, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QSystemTrayIcon[] = {
    {"messageClicked()", "\1messageClicked(self)", 0, 0},
    {"activated(QSystemTrayIcon::ActivationReason)", "\1activated(self, QSystemTrayIcon.ActivationReason)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QSystemTrayIcon = {
    & ::QSystemTrayIcon::staticMetaObject,
    0,
    signals_QSystemTrayIcon,
    0
};


sipClassTypeDef sipTypeDef_QtWidgets_QSystemTrayIcon = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSystemTrayIcon,
        {0},
        &plugin_QSystemTrayIcon
    },
    {
        sipNameNr_QSystemTrayIcon,
        {0, 0, 1},
        24, methods_QSystemTrayIcon,
        9, enummembers_QSystemTrayIcon,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSystemTrayIcon,
    -1,
    -1,
    supers_QSystemTrayIcon,
    0,
    init_type_QSystemTrayIcon,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSystemTrayIcon,
    0,
    0,
    0,
    release_QSystemTrayIcon,
    cast_QSystemTrayIcon,
    0,
    0,
    0,
    0,
    0,
    0
};
