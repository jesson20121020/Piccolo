/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#include <qlineedit.h>

#include <qwidget.h>
#include <qstring.h>
#include <qaction.h>
#include <qicon.h>
#include <qnamespace.h>
#include <qmargins.h>
#include <qcompleter.h>
#include <qcoreevent.h>
#include <qvariant.h>
#include <qrect.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qstyleoption.h>
#include <qmenu.h>
#include <qnamespace.h>
#include <qpoint.h>
#include <qsize.h>
#include <qvalidator.h>
#include <qpainter.h>
#include <qbytearray.h>
#include <qwindow.h>
#include <qnamespace.h>
#include <qpixmap.h>
#include <qnamespace.h>
#include <qnamespace.h>
#include <qgraphicseffect.h>
#include <qgraphicsproxywidget.h>
#include <QtGlobal>
#include <qlocale.h>
#include <qpaintdevice.h>
#include <qregion.h>
#include <qwidget.h>
#include <qfontinfo.h>
#include <qfontmetrics.h>
#include <qfont.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qpaintengine.h>
#include <qlist.h>
#include <qlayout.h>
#include <qsizepolicy.h>
#include <qnamespace.h>
#include <qkeysequence.h>
#include <qcursor.h>
#include <qbitmap.h>
#include <qpalette.h>
#include <qstyle.h>
#include <qmetaobject.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qobject.h>
#include <qlist.h>
#include <qlist.h>
#include <qthread.h>
#include <qnamespace.h>
#include <qregexp.h>
#include <qregularexpression.h>
#include <qobjectdefs.h>


class sipQLineEdit : public  ::QLineEdit
{
public:
    sipQLineEdit( ::QWidget*);
    sipQLineEdit(const  ::QString&, ::QWidget*);
    virtual ~sipQLineEdit();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const  ::QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const  ::QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const  ::QMetaMethod&) const;
    void sipProtectVirt_wheelEvent(bool, ::QWheelEvent*);
    void sipProtectVirt_keyReleaseEvent(bool, ::QKeyEvent*);
    void sipProtectVirt_enterEvent(bool, ::QEvent*);
    void sipProtectVirt_leaveEvent(bool, ::QEvent*);
    void sipProtectVirt_moveEvent(bool, ::QMoveEvent*);
    void sipProtectVirt_resizeEvent(bool, ::QResizeEvent*);
    void sipProtectVirt_closeEvent(bool, ::QCloseEvent*);
    void sipProtectVirt_tabletEvent(bool, ::QTabletEvent*);
    void sipProtectVirt_actionEvent(bool, ::QActionEvent*);
    void sipProtectVirt_showEvent(bool, ::QShowEvent*);
    void sipProtectVirt_hideEvent(bool, ::QHideEvent*);
    int sipProtectVirt_metric(bool, ::QPaintDevice::PaintDeviceMetric) const;
    void sipProtect_updateMicroFocus();
    void sipProtect_create( ::WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    bool sipProtectVirt_nativeEvent(bool,const  ::QByteArray&,void*,long*);
     ::QPainter* sipProtectVirt_sharedPainter(bool) const;
    void sipProtectVirt_initPainter(bool, ::QPainter*) const;
    void sipProtect_initStyleOption( ::QStyleOptionFrame*) const;
    void sipProtectVirt_mousePressEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_mouseMoveEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_mouseDoubleClickEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_keyPressEvent(bool, ::QKeyEvent*);
    void sipProtectVirt_focusInEvent(bool, ::QFocusEvent*);
    void sipProtectVirt_focusOutEvent(bool, ::QFocusEvent*);
    void sipProtectVirt_paintEvent(bool, ::QPaintEvent*);
    void sipProtectVirt_dragEnterEvent(bool, ::QDragEnterEvent*);
    void sipProtectVirt_dragMoveEvent(bool, ::QDragMoveEvent*);
    void sipProtectVirt_dragLeaveEvent(bool, ::QDragLeaveEvent*);
    void sipProtectVirt_dropEvent(bool, ::QDropEvent*);
    void sipProtectVirt_changeEvent(bool, ::QEvent*);
    void sipProtectVirt_contextMenuEvent(bool, ::QContextMenuEvent*);
    void sipProtectVirt_inputMethodEvent(bool, ::QInputMethodEvent*);
     ::QRect sipProtect_cursorRect() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&);
    void connectNotify(const  ::QMetaMethod&);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
    int metric( ::QPaintDevice::PaintDeviceMetric) const;
     ::QPaintEngine* paintEngine() const;
    int devType() const;
    void setVisible(bool);
     ::QSize sizeHint() const;
     ::QSize minimumSizeHint() const;
    int heightForWidth(int) const;
    void mousePressEvent( ::QMouseEvent*);
    void mouseReleaseEvent( ::QMouseEvent*);
    void mouseDoubleClickEvent( ::QMouseEvent*);
    void mouseMoveEvent( ::QMouseEvent*);
    void wheelEvent( ::QWheelEvent*);
    void keyPressEvent( ::QKeyEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void focusInEvent( ::QFocusEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void enterEvent( ::QEvent*);
    void leaveEvent( ::QEvent*);
    void paintEvent( ::QPaintEvent*);
    void moveEvent( ::QMoveEvent*);
    void resizeEvent( ::QResizeEvent*);
    void closeEvent( ::QCloseEvent*);
    void contextMenuEvent( ::QContextMenuEvent*);
    void tabletEvent( ::QTabletEvent*);
    void actionEvent( ::QActionEvent*);
    void dragEnterEvent( ::QDragEnterEvent*);
    void dragMoveEvent( ::QDragMoveEvent*);
    void dragLeaveEvent( ::QDragLeaveEvent*);
    void dropEvent( ::QDropEvent*);
    void showEvent( ::QShowEvent*);
    void hideEvent( ::QHideEvent*);
    void changeEvent( ::QEvent*);
    void inputMethodEvent( ::QInputMethodEvent*);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    bool hasHeightForWidth() const;
    bool nativeEvent(const  ::QByteArray&,void*,long*);
     ::QPainter* sharedPainter() const;
    void initPainter( ::QPainter*) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQLineEdit(const sipQLineEdit &);
    sipQLineEdit &operator = (const sipQLineEdit &);

    char sipPyMethods[46];
};

sipQLineEdit::sipQLineEdit( ::QWidget*a0):  ::QLineEdit(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLineEdit::sipQLineEdit(const  ::QString& a0, ::QWidget*a1):  ::QLineEdit(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLineEdit::~sipQLineEdit()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQLineEdit::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QLineEdit);

    return  ::QLineEdit::metaObject();
}

int sipQLineEdit::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QLineEdit::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QLineEdit,_c,_id,_a);

    return _id;
}

void *sipQLineEdit::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QLineEdit, _clname, &sipCpp) ? sipCpp :  ::QLineEdit::qt_metacast(_clname));
}

void sipQLineEdit::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QLineEdit::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QLineEdit::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QLineEdit::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QLineEdit::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QLineEdit::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQLineEdit::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QLineEdit::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQLineEdit::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QLineEdit::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQLineEdit::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return  ::QLineEdit::metric(a0);

    extern int sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQLineEdit::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return  ::QLineEdit::paintEngine();

    extern  ::QPaintEngine* sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQLineEdit::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return  ::QLineEdit::devType();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQLineEdit::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
         ::QLineEdit::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQLineEdit::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::QLineEdit::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQLineEdit::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::QLineEdit::minimumSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQLineEdit::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QLineEdit::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QLineEdit::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QLineEdit::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QLineEdit::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QLineEdit::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QLineEdit::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QLineEdit::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QLineEdit::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QLineEdit::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QLineEdit::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
         ::QLineEdit::enterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::QLineEdit::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QLineEdit::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtWidgets_16(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QLineEdit::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtWidgets_17(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QLineEdit::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtWidgets_18(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QLineEdit::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWidgets_19(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QLineEdit::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtWidgets_20(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QLineEdit::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
         ::QLineEdit::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QLineEdit::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtWidgets_23(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QLineEdit::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QLineEdit::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtWidgets_25(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QLineEdit::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::QLineEdit::showEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWidgets_27(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QLineEdit::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWidgets_28(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QLineEdit::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QLineEdit::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWidgets_29(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQLineEdit::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QLineEdit::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWidgets_30(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQLineEdit::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QLineEdit::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_31(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQLineEdit::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return  ::QLineEdit::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQLineEdit::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return  ::QLineEdit::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtWidgets_33(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QPainter* sipQLineEdit::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return  ::QLineEdit::sharedPainter();

    extern  ::QPainter* sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_34(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQLineEdit::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
         ::QLineEdit::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQLineEdit::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipQLineEdit::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipQLineEdit::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQLineEdit::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipQLineEdit::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipQLineEdit::sipProtectVirt_connectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQLineEdit::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQLineEdit::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}

bool sipQLineEdit::sipProtect_isSignalConnected(const  ::QMetaMethod& a0) const
{
    return  ::QObject::isSignalConnected(a0);
}

void sipQLineEdit::sipProtectVirt_wheelEvent(bool sipSelfWasArg, ::QWheelEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::wheelEvent(a0) : wheelEvent(a0));
}

void sipQLineEdit::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg, ::QKeyEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQLineEdit::sipProtectVirt_enterEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQLineEdit::sipProtectVirt_leaveEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQLineEdit::sipProtectVirt_moveEvent(bool sipSelfWasArg, ::QMoveEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQLineEdit::sipProtectVirt_resizeEvent(bool sipSelfWasArg, ::QResizeEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::resizeEvent(a0) : resizeEvent(a0));
}

void sipQLineEdit::sipProtectVirt_closeEvent(bool sipSelfWasArg, ::QCloseEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQLineEdit::sipProtectVirt_tabletEvent(bool sipSelfWasArg, ::QTabletEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQLineEdit::sipProtectVirt_actionEvent(bool sipSelfWasArg, ::QActionEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQLineEdit::sipProtectVirt_showEvent(bool sipSelfWasArg, ::QShowEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::showEvent(a0) : showEvent(a0));
}

void sipQLineEdit::sipProtectVirt_hideEvent(bool sipSelfWasArg, ::QHideEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::hideEvent(a0) : hideEvent(a0));
}

int sipQLineEdit::sipProtectVirt_metric(bool sipSelfWasArg, ::QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ?  ::QWidget::metric(a0) : metric(a0));
}

void sipQLineEdit::sipProtect_updateMicroFocus()
{
     ::QWidget::updateMicroFocus();
}

void sipQLineEdit::sipProtect_create( ::WId a0,bool a1,bool a2)
{
     ::QWidget::create(a0,a1,a2);
}

void sipQLineEdit::sipProtect_destroy(bool a0,bool a1)
{
     ::QWidget::destroy(a0,a1);
}

bool sipQLineEdit::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ?  ::QWidget::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

bool sipQLineEdit::sipProtect_focusNextChild()
{
    return  ::QWidget::focusNextChild();
}

bool sipQLineEdit::sipProtect_focusPreviousChild()
{
    return  ::QWidget::focusPreviousChild();
}

bool sipQLineEdit::sipProtectVirt_nativeEvent(bool sipSelfWasArg,const  ::QByteArray& a0,void*a1,long*a2)
{
    return (sipSelfWasArg ?  ::QWidget::nativeEvent(a0,a1,a2) : nativeEvent(a0,a1,a2));
}

 ::QPainter* sipQLineEdit::sipProtectVirt_sharedPainter(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::QWidget::sharedPainter() : sharedPainter());
}

void sipQLineEdit::sipProtectVirt_initPainter(bool sipSelfWasArg, ::QPainter*a0) const
{
    (sipSelfWasArg ?  ::QWidget::initPainter(a0) : initPainter(a0));
}

void sipQLineEdit::sipProtect_initStyleOption( ::QStyleOptionFrame*a0) const
{
     ::QLineEdit::initStyleOption(a0);
}

void sipQLineEdit::sipProtectVirt_mousePressEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQLineEdit::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQLineEdit::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQLineEdit::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQLineEdit::sipProtectVirt_keyPressEvent(bool sipSelfWasArg, ::QKeyEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQLineEdit::sipProtectVirt_focusInEvent(bool sipSelfWasArg, ::QFocusEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::focusInEvent(a0) : focusInEvent(a0));
}

void sipQLineEdit::sipProtectVirt_focusOutEvent(bool sipSelfWasArg, ::QFocusEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQLineEdit::sipProtectVirt_paintEvent(bool sipSelfWasArg, ::QPaintEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::paintEvent(a0) : paintEvent(a0));
}

void sipQLineEdit::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg, ::QDragEnterEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQLineEdit::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg, ::QDragMoveEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQLineEdit::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg, ::QDragLeaveEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQLineEdit::sipProtectVirt_dropEvent(bool sipSelfWasArg, ::QDropEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::dropEvent(a0) : dropEvent(a0));
}

void sipQLineEdit::sipProtectVirt_changeEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::changeEvent(a0) : changeEvent(a0));
}

void sipQLineEdit::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg, ::QContextMenuEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipQLineEdit::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg, ::QInputMethodEvent*a0)
{
    (sipSelfWasArg ?  ::QLineEdit::inputMethodEvent(a0) : inputMethodEvent(a0));
}

 ::QRect sipQLineEdit::sipProtect_cursorRect() const
{
    return  ::QLineEdit::cursorRect();
}


PyDoc_STRVAR(doc_QLineEdit_sender, "sender(self) -> QObject");

extern "C" {static PyObject *meth_QLineEdit_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QObject*sipRes = 0;

        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_sender, doc_QLineEdit_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_receivers, "receivers(self, PYQT_SIGNAL) -> int");

extern "C" {static PyObject *meth_QLineEdit_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_receivers, doc_QLineEdit_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QLineEdit_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_timerEvent, doc_QLineEdit_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_childEvent, "childEvent(self, QChildEvent)");

extern "C" {static PyObject *meth_QLineEdit_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_childEvent, doc_QLineEdit_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_customEvent, "customEvent(self, QEvent)");

extern "C" {static PyObject *meth_QLineEdit_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_customEvent, doc_QLineEdit_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_connectNotify, "connectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QLineEdit_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_connectNotify, doc_QLineEdit_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_disconnectNotify, "disconnectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QLineEdit_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_disconnectNotify, doc_QLineEdit_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_senderSignalIndex, "senderSignalIndex(self) -> int");

extern "C" {static PyObject *meth_QLineEdit_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_senderSignalIndex, doc_QLineEdit_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_isSignalConnected, "isSignalConnected(self, QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QLineEdit_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMetaMethod* a0;
        const sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_isSignalConnected, doc_QLineEdit_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_wheelEvent, "wheelEvent(self, QWheelEvent)");

extern "C" {static PyObject *meth_QLineEdit_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWheelEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_wheelEvent, doc_QLineEdit_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_keyReleaseEvent, "keyReleaseEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QLineEdit_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_keyReleaseEvent, doc_QLineEdit_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_enterEvent, "enterEvent(self, QEvent)");

extern "C" {static PyObject *meth_QLineEdit_enterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_enterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_enterEvent, doc_QLineEdit_enterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_leaveEvent, "leaveEvent(self, QEvent)");

extern "C" {static PyObject *meth_QLineEdit_leaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_leaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_leaveEvent, doc_QLineEdit_leaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_moveEvent, "moveEvent(self, QMoveEvent)");

extern "C" {static PyObject *meth_QLineEdit_moveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_moveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMoveEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_moveEvent, doc_QLineEdit_moveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QLineEdit_resizeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_resizeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QResizeEvent, &a0))
        {
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_resizeEvent, doc_QLineEdit_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_closeEvent, "closeEvent(self, QCloseEvent)");

extern "C" {static PyObject *meth_QLineEdit_closeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_closeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QCloseEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QCloseEvent, &a0))
        {
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_closeEvent, doc_QLineEdit_closeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_tabletEvent, "tabletEvent(self, QTabletEvent)");

extern "C" {static PyObject *meth_QLineEdit_tabletEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_tabletEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTabletEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QTabletEvent, &a0))
        {
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_tabletEvent, doc_QLineEdit_tabletEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_actionEvent, "actionEvent(self, QActionEvent)");

extern "C" {static PyObject *meth_QLineEdit_actionEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_actionEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QActionEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QActionEvent, &a0))
        {
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_actionEvent, doc_QLineEdit_actionEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QLineEdit_showEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_showEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QShowEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QShowEvent, &a0))
        {
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_showEvent, doc_QLineEdit_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_hideEvent, "hideEvent(self, QHideEvent)");

extern "C" {static PyObject *meth_QLineEdit_hideEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_hideEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QHideEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QHideEvent, &a0))
        {
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_hideEvent, doc_QLineEdit_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_metric, "metric(self, QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QLineEdit_metric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_metric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintDevice::PaintDeviceMetric a0;
        const sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_metric, doc_QLineEdit_metric);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_updateMicroFocus, "updateMicroFocus(self)");

extern "C" {static PyObject *meth_QLineEdit_updateMicroFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->sipProtect_updateMicroFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_updateMicroFocus, doc_QLineEdit_updateMicroFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_create, "create(self, window: sip.voidptr = 0, initializeWindow: bool = True, destroyOldWindow: bool = True)");

extern "C" {static PyObject *meth_QLineEdit_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::WId a0def = 0;
         ::WId* a0 = &a0def;
        int a0State = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQLineEdit *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_initializeWindow,
            sipName_destroyOldWindow,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1bb", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_quintptr,&a0, &a0State, &a1, &a2))
        {
            sipCpp->sipProtect_create(*a0,a1,a2);
            sipReleaseType(a0,sipType_quintptr,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_create, doc_QLineEdit_create);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_destroy, "destroy(self, destroyWindow: bool = True, destroySubWindows: bool = True)");

extern "C" {static PyObject *meth_QLineEdit_destroy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_destroy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQLineEdit *sipCpp;

        static const char *sipKwdList[] = {
            sipName_destroyWindow,
            sipName_destroySubWindows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_destroy(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_destroy, doc_QLineEdit_destroy);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_focusNextPrevChild, "focusNextPrevChild(self, bool) -> bool");

extern "C" {static PyObject *meth_QLineEdit_focusNextPrevChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_focusNextPrevChild, doc_QLineEdit_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_focusNextChild, "focusNextChild(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_focusNextChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_focusNextChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusNextChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_focusNextChild, doc_QLineEdit_focusNextChild);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_focusPreviousChild, "focusPreviousChild(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_focusPreviousChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusPreviousChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_focusPreviousChild, doc_QLineEdit_focusPreviousChild);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_nativeEvent, "nativeEvent(self, Union[QByteArray, bytes, bytearray], sip.voidptr) -> Tuple[bool, int]");

extern "C" {static PyObject *meth_QLineEdit_nativeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_nativeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        void* a1;
        long a2;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1v", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_nativeEvent(sipSelfWasArg,*a0,a1,&a2);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bl)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_nativeEvent, doc_QLineEdit_nativeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_sharedPainter, "sharedPainter(self) -> QPainter");

extern "C" {static PyObject *meth_QLineEdit_sharedPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_sharedPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QPainter*sipRes;

            sipRes = sipCpp->sipProtectVirt_sharedPainter(sipSelfWasArg);

            return sipConvertFromType(sipRes,sipType_QPainter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_sharedPainter, doc_QLineEdit_sharedPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_initPainter, "initPainter(self, QPainter)");

extern "C" {static PyObject *meth_QLineEdit_initPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_initPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPainter* a0;
        const sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtectVirt_initPainter(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_initPainter, doc_QLineEdit_initPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_text, "text(self) -> str");

extern "C" {static PyObject *meth_QLineEdit_text(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_text, doc_QLineEdit_text);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_displayText, "displayText(self) -> str");

extern "C" {static PyObject *meth_QLineEdit_displayText(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_displayText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->displayText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_displayText, doc_QLineEdit_displayText);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_maxLength, "maxLength(self) -> int");

extern "C" {static PyObject *meth_QLineEdit_maxLength(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_maxLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maxLength();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_maxLength, doc_QLineEdit_maxLength);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setMaxLength, "setMaxLength(self, int)");

extern "C" {static PyObject *meth_QLineEdit_setMaxLength(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setMaxLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->setMaxLength(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setMaxLength, doc_QLineEdit_setMaxLength);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setFrame, "setFrame(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_setFrame(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->setFrame(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setFrame, doc_QLineEdit_setFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_hasFrame, "hasFrame(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_hasFrame(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_hasFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasFrame();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_hasFrame, doc_QLineEdit_hasFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_echoMode, "echoMode(self) -> QLineEdit.EchoMode");

extern "C" {static PyObject *meth_QLineEdit_echoMode(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_echoMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QLineEdit::EchoMode sipRes;

            sipRes = sipCpp->echoMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QLineEdit_EchoMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_echoMode, doc_QLineEdit_echoMode);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setEchoMode, "setEchoMode(self, QLineEdit.EchoMode)");

extern "C" {static PyObject *meth_QLineEdit_setEchoMode(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setEchoMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLineEdit::EchoMode a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QLineEdit_EchoMode, &a0))
        {
            sipCpp->setEchoMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setEchoMode, doc_QLineEdit_setEchoMode);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_isReadOnly, "isReadOnly(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_isReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_isReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadOnly();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_isReadOnly, doc_QLineEdit_isReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setReadOnly, "setReadOnly(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_setReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->setReadOnly(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setReadOnly, doc_QLineEdit_setReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setValidator, "setValidator(self, QValidator)");

extern "C" {static PyObject *meth_QLineEdit_setValidator(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QValidator* a0;
        PyObject *a0Keep;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QLineEdit, &sipCpp, &a0Keep, sipType_QValidator, &a0))
        {
            sipCpp->setValidator(a0);

            sipKeepReference(sipSelf, -34, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setValidator, doc_QLineEdit_setValidator);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_validator, "validator(self) -> QValidator");

extern "C" {static PyObject *meth_QLineEdit_validator(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_validator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            const  ::QValidator*sipRes;

            sipRes = sipCpp->validator();

            return sipConvertFromType(const_cast< ::QValidator *>(sipRes),sipType_QValidator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_validator, doc_QLineEdit_validator);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QLineEdit_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QLineEdit::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_sizeHint, doc_QLineEdit_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_minimumSizeHint, "minimumSizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QLineEdit_minimumSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_minimumSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QLineEdit::minimumSizeHint() : sipCpp->minimumSizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_minimumSizeHint, doc_QLineEdit_minimumSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_cursorPosition, "cursorPosition(self) -> int");

extern "C" {static PyObject *meth_QLineEdit_cursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->cursorPosition();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorPosition, doc_QLineEdit_cursorPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setCursorPosition, "setCursorPosition(self, int)");

extern "C" {static PyObject *meth_QLineEdit_setCursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setCursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->setCursorPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setCursorPosition, doc_QLineEdit_setCursorPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_cursorPositionAt, "cursorPositionAt(self, QPoint) -> int");

extern "C" {static PyObject *meth_QLineEdit_cursorPositionAt(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorPositionAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QPoint, &a0))
        {
            int sipRes;

            sipRes = sipCpp->cursorPositionAt(*a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorPositionAt, doc_QLineEdit_cursorPositionAt);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setAlignment, "setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag])");

extern "C" {static PyObject *meth_QLineEdit_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::Alignment* a0;
        int a0State = 0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setAlignment, doc_QLineEdit_setAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_alignment, "alignment(self) -> Qt.Alignment");

extern "C" {static PyObject *meth_QLineEdit_alignment(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::Qt::Alignment*sipRes;

            sipRes = new  ::Qt::Alignment(sipCpp->alignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_alignment, doc_QLineEdit_alignment);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_cursorForward, "cursorForward(self, bool, steps: int = 1)");

extern "C" {static PyObject *meth_QLineEdit_cursorForward(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorForward(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        int a1 = 1;
         ::QLineEdit *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_steps,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb|i", &sipSelf, sipType_QLineEdit, &sipCpp, &a0, &a1))
        {
            sipCpp->cursorForward(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorForward, doc_QLineEdit_cursorForward);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_cursorBackward, "cursorBackward(self, bool, steps: int = 1)");

extern "C" {static PyObject *meth_QLineEdit_cursorBackward(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorBackward(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        int a1 = 1;
         ::QLineEdit *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_steps,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb|i", &sipSelf, sipType_QLineEdit, &sipCpp, &a0, &a1))
        {
            sipCpp->cursorBackward(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorBackward, doc_QLineEdit_cursorBackward);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_cursorWordForward, "cursorWordForward(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_cursorWordForward(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorWordForward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->cursorWordForward(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorWordForward, doc_QLineEdit_cursorWordForward);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_cursorWordBackward, "cursorWordBackward(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_cursorWordBackward(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorWordBackward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->cursorWordBackward(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorWordBackward, doc_QLineEdit_cursorWordBackward);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_backspace, "backspace(self)");

extern "C" {static PyObject *meth_QLineEdit_backspace(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_backspace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->backspace();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_backspace, doc_QLineEdit_backspace);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_del_, "del_(self)");

extern "C" {static PyObject *meth_QLineEdit_del_(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_del_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->del();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_del_, doc_QLineEdit_del_);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_home, "home(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_home(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_home(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->home(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_home, doc_QLineEdit_home);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_end, "end(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_end(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_end(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->end(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_end, doc_QLineEdit_end);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_isModified, "isModified(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_isModified(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_isModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isModified();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_isModified, doc_QLineEdit_isModified);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setModified, "setModified(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_setModified(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->setModified(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setModified, doc_QLineEdit_setModified);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setSelection, "setSelection(self, int, int)");

extern "C" {static PyObject *meth_QLineEdit_setSelection(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QLineEdit, &sipCpp, &a0, &a1))
        {
            sipCpp->setSelection(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setSelection, doc_QLineEdit_setSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_hasSelectedText, "hasSelectedText(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_hasSelectedText(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_hasSelectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasSelectedText();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_hasSelectedText, doc_QLineEdit_hasSelectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_selectedText, "selectedText(self) -> str");

extern "C" {static PyObject *meth_QLineEdit_selectedText(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_selectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->selectedText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_selectedText, doc_QLineEdit_selectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_selectionStart, "selectionStart(self) -> int");

extern "C" {static PyObject *meth_QLineEdit_selectionStart(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_selectionStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->selectionStart();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_selectionStart, doc_QLineEdit_selectionStart);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_isUndoAvailable, "isUndoAvailable(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_isUndoAvailable(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_isUndoAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isUndoAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_isUndoAvailable, doc_QLineEdit_isUndoAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_isRedoAvailable, "isRedoAvailable(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_isRedoAvailable(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_isRedoAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRedoAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_isRedoAvailable, doc_QLineEdit_isRedoAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setDragEnabled, "setDragEnabled(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_setDragEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setDragEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->setDragEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setDragEnabled, doc_QLineEdit_setDragEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_dragEnabled, "dragEnabled(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_dragEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_dragEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->dragEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_dragEnabled, doc_QLineEdit_dragEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_inputMask, "inputMask(self) -> str");

extern "C" {static PyObject *meth_QLineEdit_inputMask(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_inputMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->inputMask());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_inputMask, doc_QLineEdit_inputMask);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setInputMask, "setInputMask(self, str)");

extern "C" {static PyObject *meth_QLineEdit_setInputMask(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setInputMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setInputMask(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setInputMask, doc_QLineEdit_setInputMask);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_hasAcceptableInput, "hasAcceptableInput(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_hasAcceptableInput(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_hasAcceptableInput(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasAcceptableInput();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_hasAcceptableInput, doc_QLineEdit_hasAcceptableInput);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setText, "setText(self, str)");

extern "C" {static PyObject *meth_QLineEdit_setText(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setText, doc_QLineEdit_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_clear, "clear(self)");

extern "C" {static PyObject *meth_QLineEdit_clear(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_clear, doc_QLineEdit_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_selectAll, "selectAll(self)");

extern "C" {static PyObject *meth_QLineEdit_selectAll(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_selectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->selectAll();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_selectAll, doc_QLineEdit_selectAll);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_undo, "undo(self)");

extern "C" {static PyObject *meth_QLineEdit_undo(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_undo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->undo();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_undo, doc_QLineEdit_undo);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_redo, "redo(self)");

extern "C" {static PyObject *meth_QLineEdit_redo(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_redo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->redo();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_redo, doc_QLineEdit_redo);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_cut, "cut(self)");

extern "C" {static PyObject *meth_QLineEdit_cut(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->cut();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cut, doc_QLineEdit_cut);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_copy, "copy(self)");

extern "C" {static PyObject *meth_QLineEdit_copy(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_copy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->copy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_copy, doc_QLineEdit_copy);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_paste, "paste(self)");

extern "C" {static PyObject *meth_QLineEdit_paste(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_paste(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->paste();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_paste, doc_QLineEdit_paste);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_deselect, "deselect(self)");

extern "C" {static PyObject *meth_QLineEdit_deselect(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_deselect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->deselect();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_deselect, doc_QLineEdit_deselect);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_insert, "insert(self, str)");

extern "C" {static PyObject *meth_QLineEdit_insert(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->insert(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_insert, doc_QLineEdit_insert);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_createStandardContextMenu, "createStandardContextMenu(self) -> QMenu");

extern "C" {static PyObject *meth_QLineEdit_createStandardContextMenu(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_createStandardContextMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QMenu*sipRes;

            sipRes = sipCpp->createStandardContextMenu();

            return sipConvertFromNewType(sipRes,sipType_QMenu,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_createStandardContextMenu, doc_QLineEdit_createStandardContextMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_initStyleOption, "initStyleOption(self, QStyleOptionFrame)");

extern "C" {static PyObject *meth_QLineEdit_initStyleOption(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_initStyleOption(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QStyleOptionFrame* a0;
        const sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QStyleOptionFrame, &a0))
        {
            sipCpp->sipProtect_initStyleOption(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_initStyleOption, doc_QLineEdit_initStyleOption);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QLineEdit_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_mousePressEvent, doc_QLineEdit_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QLineEdit_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_mouseMoveEvent, doc_QLineEdit_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QLineEdit_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_mouseReleaseEvent, doc_QLineEdit_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QLineEdit_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_mouseDoubleClickEvent, doc_QLineEdit_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QLineEdit_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_keyPressEvent, doc_QLineEdit_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QLineEdit_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_focusInEvent, doc_QLineEdit_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_focusOutEvent, "focusOutEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QLineEdit_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_focusOutEvent, doc_QLineEdit_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QLineEdit_paintEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_paintEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QPaintEvent, &a0))
        {
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_paintEvent, doc_QLineEdit_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_dragEnterEvent, "dragEnterEvent(self, QDragEnterEvent)");

extern "C" {static PyObject *meth_QLineEdit_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragEnterEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_dragEnterEvent, doc_QLineEdit_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_dragMoveEvent, "dragMoveEvent(self, QDragMoveEvent)");

extern "C" {static PyObject *meth_QLineEdit_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragMoveEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_dragMoveEvent, doc_QLineEdit_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_dragLeaveEvent, "dragLeaveEvent(self, QDragLeaveEvent)");

extern "C" {static PyObject *meth_QLineEdit_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragLeaveEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_dragLeaveEvent, doc_QLineEdit_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_dropEvent, "dropEvent(self, QDropEvent)");

extern "C" {static PyObject *meth_QLineEdit_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDropEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_dropEvent, doc_QLineEdit_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QLineEdit_changeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_changeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_changeEvent, doc_QLineEdit_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_contextMenuEvent, "contextMenuEvent(self, QContextMenuEvent)");

extern "C" {static PyObject *meth_QLineEdit_contextMenuEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QContextMenuEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_contextMenuEvent, doc_QLineEdit_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_inputMethodEvent, "inputMethodEvent(self, QInputMethodEvent)");

extern "C" {static PyObject *meth_QLineEdit_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QInputMethodEvent* a0;
        sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_inputMethodEvent, doc_QLineEdit_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_cursorRect, "cursorRect(self) -> QRect");

extern "C" {static PyObject *meth_QLineEdit_cursorRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQLineEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->sipProtect_cursorRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorRect, doc_QLineEdit_cursorRect);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_inputMethodQuery, "inputMethodQuery(self, Qt.InputMethodQuery) -> Any\n"
"inputMethodQuery(self, Qt.InputMethodQuery, Any) -> Any");

extern "C" {static PyObject *meth_QLineEdit_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::Qt::InputMethodQuery a0;
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QLineEdit::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    {
         ::Qt::InputMethodQuery a0;
         ::QVariant* a1;
        int a1State = 0;
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_Qt_InputMethodQuery, &a0, sipType_QVariant, &a1, &a1State))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->inputMethodQuery(a0,*a1));
            sipReleaseType(a1,sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_inputMethodQuery, doc_QLineEdit_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QLineEdit_event(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QLineEdit::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_event, doc_QLineEdit_event);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setCompleter, "setCompleter(self, QCompleter)");

extern "C" {static PyObject *meth_QLineEdit_setCompleter(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setCompleter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCompleter* a0;
        PyObject *a0Keep;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QLineEdit, &sipCpp, &a0Keep, sipType_QCompleter, &a0))
        {
            sipCpp->setCompleter(a0);

            sipKeepReference(sipSelf, -35, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setCompleter, doc_QLineEdit_setCompleter);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_completer, "completer(self) -> QCompleter");

extern "C" {static PyObject *meth_QLineEdit_completer(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_completer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QCompleter*sipRes;

            sipRes = sipCpp->completer();

            return sipConvertFromType(sipRes,sipType_QCompleter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_completer, doc_QLineEdit_completer);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setTextMargins, "setTextMargins(self, int, int, int, int)\n"
"setTextMargins(self, QMargins)");

extern "C" {static PyObject *meth_QLineEdit_setTextMargins(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setTextMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QLineEdit, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setTextMargins(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QMargins* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QMargins, &a0))
        {
            sipCpp->setTextMargins(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setTextMargins, doc_QLineEdit_setTextMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_getTextMargins, "getTextMargins(self) -> Tuple[int, int, int, int]");

extern "C" {static PyObject *meth_QLineEdit_getTextMargins(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_getTextMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->getTextMargins(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_getTextMargins, doc_QLineEdit_getTextMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_textMargins, "textMargins(self) -> QMargins");

extern "C" {static PyObject *meth_QLineEdit_textMargins(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_textMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins(sipCpp->textMargins());

            return sipConvertFromNewType(sipRes,sipType_QMargins,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_textMargins, doc_QLineEdit_textMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_placeholderText, "placeholderText(self) -> str");

extern "C" {static PyObject *meth_QLineEdit_placeholderText(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_placeholderText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->placeholderText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_placeholderText, doc_QLineEdit_placeholderText);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setPlaceholderText, "setPlaceholderText(self, str)");

extern "C" {static PyObject *meth_QLineEdit_setPlaceholderText(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setPlaceholderText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPlaceholderText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setPlaceholderText, doc_QLineEdit_setPlaceholderText);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setCursorMoveStyle, "setCursorMoveStyle(self, Qt.CursorMoveStyle)");

extern "C" {static PyObject *meth_QLineEdit_setCursorMoveStyle(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setCursorMoveStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::CursorMoveStyle a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_Qt_CursorMoveStyle, &a0))
        {
            sipCpp->setCursorMoveStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setCursorMoveStyle, doc_QLineEdit_setCursorMoveStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_cursorMoveStyle, "cursorMoveStyle(self) -> Qt.CursorMoveStyle");

extern "C" {static PyObject *meth_QLineEdit_cursorMoveStyle(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorMoveStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
             ::Qt::CursorMoveStyle sipRes;

            sipRes = sipCpp->cursorMoveStyle();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_CursorMoveStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorMoveStyle, doc_QLineEdit_cursorMoveStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setClearButtonEnabled, "setClearButtonEnabled(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_setClearButtonEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setClearButtonEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->setClearButtonEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setClearButtonEnabled, doc_QLineEdit_setClearButtonEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_isClearButtonEnabled, "isClearButtonEnabled(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_isClearButtonEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_isClearButtonEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isClearButtonEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_isClearButtonEnabled, doc_QLineEdit_isClearButtonEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_addAction, "addAction(self, QAction)\n"
"addAction(self, QAction, QLineEdit.ActionPosition)\n"
"addAction(self, QIcon, QLineEdit.ActionPosition) -> QAction");

extern "C" {static PyObject *meth_QLineEdit_addAction(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_addAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAction* a0;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QAction, &a0))
        {
            sipCpp->addAction(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QAction* a0;
         ::QLineEdit::ActionPosition a1;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8E", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QAction, &a0, sipType_QLineEdit_ActionPosition, &a1))
        {
            sipCpp->addAction(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QIcon* a0;
         ::QLineEdit::ActionPosition a1;
         ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QIcon, &a0, sipType_QLineEdit_ActionPosition, &a1))
        {
             ::QAction*sipRes;

            sipRes = sipCpp->addAction(*a0,a1);

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_addAction, doc_QLineEdit_addAction);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_selectionEnd, "selectionEnd(self) -> int");

extern "C" {static PyObject *meth_QLineEdit_selectionEnd(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_selectionEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->selectionEnd();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_selectionEnd, doc_QLineEdit_selectionEnd);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_selectionLength, "selectionLength(self) -> int");

extern "C" {static PyObject *meth_QLineEdit_selectionLength(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_selectionLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->selectionLength();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_selectionLength, doc_QLineEdit_selectionLength);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QLineEdit(void *, const sipTypeDef *);}
static void *cast_QLineEdit(void *sipCppV, const sipTypeDef *targetType)
{
     ::QLineEdit *sipCpp = reinterpret_cast< ::QLineEdit *>(sipCppV);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLineEdit(void *, int);}
static void release_QLineEdit(void *sipCppV, int)
{
     ::QLineEdit *sipCpp = reinterpret_cast< ::QLineEdit *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QLineEdit(sipSimpleWrapper *);}
static void dealloc_QLineEdit(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQLineEdit *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLineEdit(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QLineEdit(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLineEdit(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQLineEdit *sipCpp = 0;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQLineEdit(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQLineEdit(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QLineEdit[] = {{457, 255, 1}};


static PyMethodDef methods_QLineEdit[] = {
    {SIP_MLNAME_CAST(sipName_actionEvent), (PyCFunction)meth_QLineEdit_actionEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_addAction), meth_QLineEdit_addAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_addAction)},
    {SIP_MLNAME_CAST(sipName_alignment), meth_QLineEdit_alignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_alignment)},
    {SIP_MLNAME_CAST(sipName_backspace), meth_QLineEdit_backspace, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_backspace)},
    {SIP_MLNAME_CAST(sipName_changeEvent), (PyCFunction)meth_QLineEdit_changeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLineEdit_changeEvent)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QLineEdit_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QLineEdit_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_clear)},
    {SIP_MLNAME_CAST(sipName_closeEvent), (PyCFunction)meth_QLineEdit_closeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_completer), meth_QLineEdit_completer, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_completer)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QLineEdit_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), (PyCFunction)meth_QLineEdit_contextMenuEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLineEdit_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_copy), meth_QLineEdit_copy, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_copy)},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QLineEdit_create, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_createStandardContextMenu), meth_QLineEdit_createStandardContextMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_createStandardContextMenu)},
    {SIP_MLNAME_CAST(sipName_cursorBackward), (PyCFunction)meth_QLineEdit_cursorBackward, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLineEdit_cursorBackward)},
    {SIP_MLNAME_CAST(sipName_cursorForward), (PyCFunction)meth_QLineEdit_cursorForward, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLineEdit_cursorForward)},
    {SIP_MLNAME_CAST(sipName_cursorMoveStyle), meth_QLineEdit_cursorMoveStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_cursorMoveStyle)},
    {SIP_MLNAME_CAST(sipName_cursorPosition), meth_QLineEdit_cursorPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_cursorPosition)},
    {SIP_MLNAME_CAST(sipName_cursorPositionAt), meth_QLineEdit_cursorPositionAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_cursorPositionAt)},
    {SIP_MLNAME_CAST(sipName_cursorRect), (PyCFunction)meth_QLineEdit_cursorRect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLineEdit_cursorRect)},
    {SIP_MLNAME_CAST(sipName_cursorWordBackward), meth_QLineEdit_cursorWordBackward, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_cursorWordBackward)},
    {SIP_MLNAME_CAST(sipName_cursorWordForward), meth_QLineEdit_cursorWordForward, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_cursorWordForward)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QLineEdit_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_cut), meth_QLineEdit_cut, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_cut)},
    {SIP_MLNAME_CAST(sipName_del_), meth_QLineEdit_del_, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_del_)},
    {SIP_MLNAME_CAST(sipName_deselect), meth_QLineEdit_deselect, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_deselect)},
    {SIP_MLNAME_CAST(sipName_destroy), (PyCFunction)meth_QLineEdit_destroy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QLineEdit_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_displayText), meth_QLineEdit_displayText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_displayText)},
    {SIP_MLNAME_CAST(sipName_dragEnabled), meth_QLineEdit_dragEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_dragEnabled)},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QLineEdit_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLineEdit_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QLineEdit_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLineEdit_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QLineEdit_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLineEdit_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QLineEdit_dropEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLineEdit_dropEvent)},
    {SIP_MLNAME_CAST(sipName_echoMode), meth_QLineEdit_echoMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_echoMode)},
    {SIP_MLNAME_CAST(sipName_end), meth_QLineEdit_end, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_end)},
    {SIP_MLNAME_CAST(sipName_enterEvent), (PyCFunction)meth_QLineEdit_enterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QLineEdit_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_event)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QLineEdit_focusInEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLineEdit_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusNextChild), (PyCFunction)meth_QLineEdit_focusNextChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), (PyCFunction)meth_QLineEdit_focusNextPrevChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QLineEdit_focusOutEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLineEdit_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), (PyCFunction)meth_QLineEdit_focusPreviousChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_getTextMargins), meth_QLineEdit_getTextMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_getTextMargins)},
    {SIP_MLNAME_CAST(sipName_hasAcceptableInput), meth_QLineEdit_hasAcceptableInput, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_hasAcceptableInput)},
    {SIP_MLNAME_CAST(sipName_hasFrame), meth_QLineEdit_hasFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_hasFrame)},
    {SIP_MLNAME_CAST(sipName_hasSelectedText), meth_QLineEdit_hasSelectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_hasSelectedText)},
    {SIP_MLNAME_CAST(sipName_hideEvent), (PyCFunction)meth_QLineEdit_hideEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_home), meth_QLineEdit_home, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_home)},
    {SIP_MLNAME_CAST(sipName_initPainter), (PyCFunction)meth_QLineEdit_initPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_initStyleOption), (PyCFunction)meth_QLineEdit_initStyleOption, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLineEdit_initStyleOption)},
    {SIP_MLNAME_CAST(sipName_inputMask), meth_QLineEdit_inputMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_inputMask)},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QLineEdit_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLineEdit_inputMethodEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QLineEdit_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QLineEdit_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_insert)},
    {SIP_MLNAME_CAST(sipName_isClearButtonEnabled), meth_QLineEdit_isClearButtonEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_isClearButtonEnabled)},
    {SIP_MLNAME_CAST(sipName_isModified), meth_QLineEdit_isModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_isModified)},
    {SIP_MLNAME_CAST(sipName_isReadOnly), meth_QLineEdit_isReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_isReadOnly)},
    {SIP_MLNAME_CAST(sipName_isRedoAvailable), meth_QLineEdit_isRedoAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_isRedoAvailable)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QLineEdit_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isUndoAvailable), meth_QLineEdit_isUndoAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_isUndoAvailable)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QLineEdit_keyPressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLineEdit_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QLineEdit_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_leaveEvent), (PyCFunction)meth_QLineEdit_leaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_maxLength), meth_QLineEdit_maxLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_maxLength)},
    {SIP_MLNAME_CAST(sipName_metric), (PyCFunction)meth_QLineEdit_metric, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_minimumSizeHint), meth_QLineEdit_minimumSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_minimumSizeHint)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QLineEdit_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLineEdit_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QLineEdit_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLineEdit_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QLineEdit_mousePressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLineEdit_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QLineEdit_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLineEdit_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveEvent), (PyCFunction)meth_QLineEdit_moveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_nativeEvent), (PyCFunction)meth_QLineEdit_nativeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEvent), (PyCFunction)meth_QLineEdit_paintEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLineEdit_paintEvent)},
    {SIP_MLNAME_CAST(sipName_paste), meth_QLineEdit_paste, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_paste)},
    {SIP_MLNAME_CAST(sipName_placeholderText), meth_QLineEdit_placeholderText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_placeholderText)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QLineEdit_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_redo), meth_QLineEdit_redo, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_redo)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), (PyCFunction)meth_QLineEdit_resizeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_selectAll), meth_QLineEdit_selectAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_selectAll)},
    {SIP_MLNAME_CAST(sipName_selectedText), meth_QLineEdit_selectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_selectedText)},
    {SIP_MLNAME_CAST(sipName_selectionEnd), meth_QLineEdit_selectionEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_selectionEnd)},
    {SIP_MLNAME_CAST(sipName_selectionLength), meth_QLineEdit_selectionLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_selectionLength)},
    {SIP_MLNAME_CAST(sipName_selectionStart), meth_QLineEdit_selectionStart, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_selectionStart)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QLineEdit_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QLineEdit_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QLineEdit_setAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setAlignment)},
    {SIP_MLNAME_CAST(sipName_setClearButtonEnabled), meth_QLineEdit_setClearButtonEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setClearButtonEnabled)},
    {SIP_MLNAME_CAST(sipName_setCompleter), meth_QLineEdit_setCompleter, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setCompleter)},
    {SIP_MLNAME_CAST(sipName_setCursorMoveStyle), meth_QLineEdit_setCursorMoveStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setCursorMoveStyle)},
    {SIP_MLNAME_CAST(sipName_setCursorPosition), meth_QLineEdit_setCursorPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setCursorPosition)},
    {SIP_MLNAME_CAST(sipName_setDragEnabled), meth_QLineEdit_setDragEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setDragEnabled)},
    {SIP_MLNAME_CAST(sipName_setEchoMode), meth_QLineEdit_setEchoMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setEchoMode)},
    {SIP_MLNAME_CAST(sipName_setFrame), meth_QLineEdit_setFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setFrame)},
    {SIP_MLNAME_CAST(sipName_setInputMask), meth_QLineEdit_setInputMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setInputMask)},
    {SIP_MLNAME_CAST(sipName_setMaxLength), meth_QLineEdit_setMaxLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setMaxLength)},
    {SIP_MLNAME_CAST(sipName_setModified), meth_QLineEdit_setModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setModified)},
    {SIP_MLNAME_CAST(sipName_setPlaceholderText), meth_QLineEdit_setPlaceholderText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setPlaceholderText)},
    {SIP_MLNAME_CAST(sipName_setReadOnly), meth_QLineEdit_setReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setReadOnly)},
    {SIP_MLNAME_CAST(sipName_setSelection), meth_QLineEdit_setSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setSelection)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QLineEdit_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setText)},
    {SIP_MLNAME_CAST(sipName_setTextMargins), meth_QLineEdit_setTextMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setTextMargins)},
    {SIP_MLNAME_CAST(sipName_setValidator), meth_QLineEdit_setValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setValidator)},
    {SIP_MLNAME_CAST(sipName_sharedPainter), (PyCFunction)meth_QLineEdit_sharedPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), (PyCFunction)meth_QLineEdit_showEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QLineEdit_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_sizeHint)},
    {SIP_MLNAME_CAST(sipName_tabletEvent), (PyCFunction)meth_QLineEdit_tabletEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_text), meth_QLineEdit_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_text)},
    {SIP_MLNAME_CAST(sipName_textMargins), meth_QLineEdit_textMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_textMargins)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QLineEdit_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_undo), meth_QLineEdit_undo, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_undo)},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), (PyCFunction)meth_QLineEdit_updateMicroFocus, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_validator), meth_QLineEdit_validator, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_validator)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QLineEdit_wheelEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};

static sipEnumMemberDef enummembers_QLineEdit[] = {
    {sipName_LeadingPosition, static_cast<int>( ::QLineEdit::LeadingPosition), 191},
    {sipName_NoEcho, static_cast<int>( ::QLineEdit::NoEcho), 192},
    {sipName_Normal, static_cast<int>( ::QLineEdit::Normal), 192},
    {sipName_Password, static_cast<int>( ::QLineEdit::Password), 192},
    {sipName_PasswordEchoOnEdit, static_cast<int>( ::QLineEdit::PasswordEchoOnEdit), 192},
    {sipName_TrailingPosition, static_cast<int>( ::QLineEdit::TrailingPosition), 191},
};

PyDoc_STRVAR(doc_QLineEdit, "\1QLineEdit(parent: QWidget = None)\n"
"QLineEdit(str, parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QLineEdit[] = {
    {"selectionChanged()", "\1selectionChanged(self)", 0, 0},
    {"editingFinished()", "\1editingFinished(self)", 0, 0},
    {"returnPressed()", "\1returnPressed(self)", 0, 0},
    {"cursorPositionChanged(int,int)", "\1cursorPositionChanged(self, int, int)", 0, 0},
    {"textEdited(QString)", "\1textEdited(self, str)", 0, 0},
    {"textChanged(QString)", "\1textChanged(self, str)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QLineEdit = {
    & ::QLineEdit::staticMetaObject,
    0,
    signals_QLineEdit,
    0
};


sipClassTypeDef sipTypeDef_QtWidgets_QLineEdit = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLineEdit,
        {0},
        &plugin_QLineEdit
    },
    {
        sipNameNr_QLineEdit,
        {0, 0, 1},
        114, methods_QLineEdit,
        6, enummembers_QLineEdit,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QLineEdit,
    -1,
    -1,
    supers_QLineEdit,
    0,
    init_type_QLineEdit,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLineEdit,
    0,
    0,
    0,
    release_QLineEdit,
    cast_QLineEdit,
    0,
    0,
    0,
    0,
    0,
    0
};
