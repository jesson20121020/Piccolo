/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#include <qcalendarwidget.h>

#include <qwidget.h>
#include <qdatetime.h>
#include <qpainter.h>
#include <qrect.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qobject.h>
#include <qcoreevent.h>
#include <qtextformat.h>
#include <qmap.h>
#include <qnamespace.h>
#include <qsize.h>
#include <qstring.h>
#include <qicon.h>
#include <qbytearray.h>
#include <qwindow.h>
#include <qnamespace.h>
#include <qpixmap.h>
#include <qnamespace.h>
#include <qmargins.h>
#include <qnamespace.h>
#include <qgraphicseffect.h>
#include <qgraphicsproxywidget.h>
#include <QtGlobal>
#include <qlocale.h>
#include <qpaintdevice.h>
#include <qpoint.h>
#include <qregion.h>
#include <qwidget.h>
#include <qfontinfo.h>
#include <qfontmetrics.h>
#include <qfont.h>
#include <qvariant.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qpaintengine.h>
#include <qlist.h>
#include <qaction.h>
#include <qlayout.h>
#include <qsizepolicy.h>
#include <qnamespace.h>
#include <qkeysequence.h>
#include <qcursor.h>
#include <qbitmap.h>
#include <qpalette.h>
#include <qstyle.h>
#include <qmetaobject.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qlist.h>
#include <qlist.h>
#include <qthread.h>
#include <qnamespace.h>
#include <qregexp.h>
#include <qregularexpression.h>
#include <qobjectdefs.h>


class sipQCalendarWidget : public  ::QCalendarWidget
{
public:
    sipQCalendarWidget( ::QWidget*);
    virtual ~sipQCalendarWidget();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const  ::QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const  ::QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const  ::QMetaMethod&) const;
    void sipProtectVirt_mouseReleaseEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_mouseDoubleClickEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_mouseMoveEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_wheelEvent(bool, ::QWheelEvent*);
    void sipProtectVirt_keyReleaseEvent(bool, ::QKeyEvent*);
    void sipProtectVirt_focusInEvent(bool, ::QFocusEvent*);
    void sipProtectVirt_focusOutEvent(bool, ::QFocusEvent*);
    void sipProtectVirt_enterEvent(bool, ::QEvent*);
    void sipProtectVirt_leaveEvent(bool, ::QEvent*);
    void sipProtectVirt_paintEvent(bool, ::QPaintEvent*);
    void sipProtectVirt_moveEvent(bool, ::QMoveEvent*);
    void sipProtectVirt_closeEvent(bool, ::QCloseEvent*);
    void sipProtectVirt_contextMenuEvent(bool, ::QContextMenuEvent*);
    void sipProtectVirt_tabletEvent(bool, ::QTabletEvent*);
    void sipProtectVirt_actionEvent(bool, ::QActionEvent*);
    void sipProtectVirt_dragEnterEvent(bool, ::QDragEnterEvent*);
    void sipProtectVirt_dragMoveEvent(bool, ::QDragMoveEvent*);
    void sipProtectVirt_dragLeaveEvent(bool, ::QDragLeaveEvent*);
    void sipProtectVirt_dropEvent(bool, ::QDropEvent*);
    void sipProtectVirt_showEvent(bool, ::QShowEvent*);
    void sipProtectVirt_hideEvent(bool, ::QHideEvent*);
    void sipProtectVirt_changeEvent(bool, ::QEvent*);
    int sipProtectVirt_metric(bool, ::QPaintDevice::PaintDeviceMetric) const;
    void sipProtectVirt_inputMethodEvent(bool, ::QInputMethodEvent*);
    void sipProtect_updateMicroFocus();
    void sipProtect_create( ::WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    bool sipProtectVirt_nativeEvent(bool,const  ::QByteArray&,void*,long*);
     ::QPainter* sipProtectVirt_sharedPainter(bool) const;
    void sipProtectVirt_initPainter(bool, ::QPainter*) const;
    void sipProtect_updateCell(const  ::QDate&);
    void sipProtect_updateCells();
    bool sipProtectVirt_event(bool, ::QEvent*);
    bool sipProtectVirt_eventFilter(bool, ::QObject*, ::QEvent*);
    void sipProtectVirt_mousePressEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_resizeEvent(bool, ::QResizeEvent*);
    void sipProtectVirt_keyPressEvent(bool, ::QKeyEvent*);
    void sipProtectVirt_paintCell(bool, ::QPainter*,const  ::QRect&,const  ::QDate&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void paintCell( ::QPainter*,const  ::QRect&,const  ::QDate&) const;
    void disconnectNotify(const  ::QMetaMethod&);
    void connectNotify(const  ::QMetaMethod&);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
    int metric( ::QPaintDevice::PaintDeviceMetric) const;
     ::QPaintEngine* paintEngine() const;
    int devType() const;
    void setVisible(bool);
     ::QSize sizeHint() const;
     ::QSize minimumSizeHint() const;
    int heightForWidth(int) const;
    void mousePressEvent( ::QMouseEvent*);
    void mouseReleaseEvent( ::QMouseEvent*);
    void mouseDoubleClickEvent( ::QMouseEvent*);
    void mouseMoveEvent( ::QMouseEvent*);
    void wheelEvent( ::QWheelEvent*);
    void keyPressEvent( ::QKeyEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void focusInEvent( ::QFocusEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void enterEvent( ::QEvent*);
    void leaveEvent( ::QEvent*);
    void paintEvent( ::QPaintEvent*);
    void moveEvent( ::QMoveEvent*);
    void resizeEvent( ::QResizeEvent*);
    void closeEvent( ::QCloseEvent*);
    void contextMenuEvent( ::QContextMenuEvent*);
    void tabletEvent( ::QTabletEvent*);
    void actionEvent( ::QActionEvent*);
    void dragEnterEvent( ::QDragEnterEvent*);
    void dragMoveEvent( ::QDragMoveEvent*);
    void dragLeaveEvent( ::QDragLeaveEvent*);
    void dropEvent( ::QDropEvent*);
    void showEvent( ::QShowEvent*);
    void hideEvent( ::QHideEvent*);
    void changeEvent( ::QEvent*);
    void inputMethodEvent( ::QInputMethodEvent*);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    bool hasHeightForWidth() const;
    bool nativeEvent(const  ::QByteArray&,void*,long*);
     ::QPainter* sharedPainter() const;
    void initPainter( ::QPainter*) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQCalendarWidget(const sipQCalendarWidget &);
    sipQCalendarWidget &operator = (const sipQCalendarWidget &);

    char sipPyMethods[47];
};

sipQCalendarWidget::sipQCalendarWidget( ::QWidget*a0):  ::QCalendarWidget(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCalendarWidget::~sipQCalendarWidget()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQCalendarWidget::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QCalendarWidget);

    return  ::QCalendarWidget::metaObject();
}

int sipQCalendarWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QCalendarWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QCalendarWidget,_c,_id,_a);

    return _id;
}

void *sipQCalendarWidget::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QCalendarWidget, _clname, &sipCpp) ? sipCpp :  ::QCalendarWidget::qt_metacast(_clname));
}

void sipQCalendarWidget::paintCell( ::QPainter*a0,const  ::QRect& a1,const  ::QDate& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_paintCell);

    if (!sipMeth)
    {
         ::QCalendarWidget::paintCell(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_86(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QRect&,const  ::QDate&);

    sipVH_QtWidgets_86(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQCalendarWidget::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QCalendarWidget::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QCalendarWidget::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQCalendarWidget::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QCalendarWidget::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQCalendarWidget::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QCalendarWidget::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQCalendarWidget::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return  ::QCalendarWidget::metric(a0);

    extern int sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQCalendarWidget::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return  ::QCalendarWidget::paintEngine();

    extern  ::QPaintEngine* sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQCalendarWidget::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return  ::QCalendarWidget::devType();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQCalendarWidget::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
         ::QCalendarWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQCalendarWidget::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::QCalendarWidget::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQCalendarWidget::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::QCalendarWidget::minimumSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQCalendarWidget::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QCalendarWidget::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::enterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtWidgets_16(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtWidgets_17(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtWidgets_18(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWidgets_19(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtWidgets_20(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtWidgets_23(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtWidgets_25(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::showEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWidgets_27(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWidgets_28(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QCalendarWidget::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWidgets_29(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQCalendarWidget::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QCalendarWidget::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWidgets_30(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQCalendarWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QCalendarWidget::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_31(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQCalendarWidget::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[43]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return  ::QCalendarWidget::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQCalendarWidget::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return  ::QCalendarWidget::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtWidgets_33(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QPainter* sipQCalendarWidget::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return  ::QCalendarWidget::sharedPainter();

    extern  ::QPainter* sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_34(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQCalendarWidget::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
         ::QCalendarWidget::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQCalendarWidget::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipQCalendarWidget::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipQCalendarWidget::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_connectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQCalendarWidget::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQCalendarWidget::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}

bool sipQCalendarWidget::sipProtect_isSignalConnected(const  ::QMetaMethod& a0) const
{
    return  ::QObject::isSignalConnected(a0);
}

void sipQCalendarWidget::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_wheelEvent(bool sipSelfWasArg, ::QWheelEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::wheelEvent(a0) : wheelEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg, ::QKeyEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_focusInEvent(bool sipSelfWasArg, ::QFocusEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::focusInEvent(a0) : focusInEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_focusOutEvent(bool sipSelfWasArg, ::QFocusEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_enterEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_leaveEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_paintEvent(bool sipSelfWasArg, ::QPaintEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::paintEvent(a0) : paintEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_moveEvent(bool sipSelfWasArg, ::QMoveEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_closeEvent(bool sipSelfWasArg, ::QCloseEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg, ::QContextMenuEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_tabletEvent(bool sipSelfWasArg, ::QTabletEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_actionEvent(bool sipSelfWasArg, ::QActionEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg, ::QDragEnterEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg, ::QDragMoveEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg, ::QDragLeaveEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_dropEvent(bool sipSelfWasArg, ::QDropEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::dropEvent(a0) : dropEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_showEvent(bool sipSelfWasArg, ::QShowEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::showEvent(a0) : showEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_hideEvent(bool sipSelfWasArg, ::QHideEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::hideEvent(a0) : hideEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_changeEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::changeEvent(a0) : changeEvent(a0));
}

int sipQCalendarWidget::sipProtectVirt_metric(bool sipSelfWasArg, ::QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ?  ::QWidget::metric(a0) : metric(a0));
}

void sipQCalendarWidget::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg, ::QInputMethodEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQCalendarWidget::sipProtect_updateMicroFocus()
{
     ::QWidget::updateMicroFocus();
}

void sipQCalendarWidget::sipProtect_create( ::WId a0,bool a1,bool a2)
{
     ::QWidget::create(a0,a1,a2);
}

void sipQCalendarWidget::sipProtect_destroy(bool a0,bool a1)
{
     ::QWidget::destroy(a0,a1);
}

bool sipQCalendarWidget::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ?  ::QWidget::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

bool sipQCalendarWidget::sipProtect_focusNextChild()
{
    return  ::QWidget::focusNextChild();
}

bool sipQCalendarWidget::sipProtect_focusPreviousChild()
{
    return  ::QWidget::focusPreviousChild();
}

bool sipQCalendarWidget::sipProtectVirt_nativeEvent(bool sipSelfWasArg,const  ::QByteArray& a0,void*a1,long*a2)
{
    return (sipSelfWasArg ?  ::QWidget::nativeEvent(a0,a1,a2) : nativeEvent(a0,a1,a2));
}

 ::QPainter* sipQCalendarWidget::sipProtectVirt_sharedPainter(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::QWidget::sharedPainter() : sharedPainter());
}

void sipQCalendarWidget::sipProtectVirt_initPainter(bool sipSelfWasArg, ::QPainter*a0) const
{
    (sipSelfWasArg ?  ::QWidget::initPainter(a0) : initPainter(a0));
}

void sipQCalendarWidget::sipProtect_updateCell(const  ::QDate& a0)
{
     ::QCalendarWidget::updateCell(a0);
}

void sipQCalendarWidget::sipProtect_updateCells()
{
     ::QCalendarWidget::updateCells();
}

bool sipQCalendarWidget::sipProtectVirt_event(bool sipSelfWasArg, ::QEvent*a0)
{
    return (sipSelfWasArg ?  ::QCalendarWidget::event(a0) : event(a0));
}

bool sipQCalendarWidget::sipProtectVirt_eventFilter(bool sipSelfWasArg, ::QObject*a0, ::QEvent*a1)
{
    return (sipSelfWasArg ?  ::QCalendarWidget::eventFilter(a0,a1) : eventFilter(a0,a1));
}

void sipQCalendarWidget::sipProtectVirt_mousePressEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QCalendarWidget::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_resizeEvent(bool sipSelfWasArg, ::QResizeEvent*a0)
{
    (sipSelfWasArg ?  ::QCalendarWidget::resizeEvent(a0) : resizeEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_keyPressEvent(bool sipSelfWasArg, ::QKeyEvent*a0)
{
    (sipSelfWasArg ?  ::QCalendarWidget::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQCalendarWidget::sipProtectVirt_paintCell(bool sipSelfWasArg, ::QPainter*a0,const  ::QRect& a1,const  ::QDate& a2) const
{
    (sipSelfWasArg ?  ::QCalendarWidget::paintCell(a0,a1,a2) : paintCell(a0,a1,a2));
}


PyDoc_STRVAR(doc_QCalendarWidget_sender, "sender(self) -> QObject");

extern "C" {static PyObject *meth_QCalendarWidget_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
             ::QObject*sipRes = 0;

        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_sender, doc_QCalendarWidget_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_receivers, "receivers(self, PYQT_SIGNAL) -> int");

extern "C" {static PyObject *meth_QCalendarWidget_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QCalendarWidget, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_receivers, doc_QCalendarWidget_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_timerEvent, doc_QCalendarWidget_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_childEvent, "childEvent(self, QChildEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_childEvent, doc_QCalendarWidget_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_customEvent, "customEvent(self, QEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_customEvent, doc_QCalendarWidget_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_connectNotify, "connectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QCalendarWidget_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_connectNotify, doc_QCalendarWidget_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_disconnectNotify, "disconnectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QCalendarWidget_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_disconnectNotify, doc_QCalendarWidget_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_senderSignalIndex, "senderSignalIndex(self) -> int");

extern "C" {static PyObject *meth_QCalendarWidget_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_senderSignalIndex, doc_QCalendarWidget_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_isSignalConnected, "isSignalConnected(self, QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QCalendarWidget_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMetaMethod* a0;
        const sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_isSignalConnected, doc_QCalendarWidget_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_mouseReleaseEvent, doc_QCalendarWidget_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_mouseDoubleClickEvent, doc_QCalendarWidget_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_mouseMoveEvent, doc_QCalendarWidget_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_wheelEvent, "wheelEvent(self, QWheelEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWheelEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_wheelEvent, doc_QCalendarWidget_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_keyReleaseEvent, "keyReleaseEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_keyReleaseEvent, doc_QCalendarWidget_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_focusInEvent, doc_QCalendarWidget_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_focusOutEvent, "focusOutEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_focusOutEvent, doc_QCalendarWidget_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_enterEvent, "enterEvent(self, QEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_enterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_enterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_enterEvent, doc_QCalendarWidget_enterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_leaveEvent, "leaveEvent(self, QEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_leaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_leaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_leaveEvent, doc_QCalendarWidget_leaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_paintEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_paintEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QPaintEvent, &a0))
        {
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_paintEvent, doc_QCalendarWidget_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_moveEvent, "moveEvent(self, QMoveEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_moveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_moveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMoveEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_moveEvent, doc_QCalendarWidget_moveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_closeEvent, "closeEvent(self, QCloseEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_closeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_closeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QCloseEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QCloseEvent, &a0))
        {
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_closeEvent, doc_QCalendarWidget_closeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_contextMenuEvent, "contextMenuEvent(self, QContextMenuEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_contextMenuEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QContextMenuEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_contextMenuEvent, doc_QCalendarWidget_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_tabletEvent, "tabletEvent(self, QTabletEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_tabletEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_tabletEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTabletEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QTabletEvent, &a0))
        {
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_tabletEvent, doc_QCalendarWidget_tabletEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_actionEvent, "actionEvent(self, QActionEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_actionEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_actionEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QActionEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QActionEvent, &a0))
        {
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_actionEvent, doc_QCalendarWidget_actionEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_dragEnterEvent, "dragEnterEvent(self, QDragEnterEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragEnterEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_dragEnterEvent, doc_QCalendarWidget_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_dragMoveEvent, "dragMoveEvent(self, QDragMoveEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragMoveEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_dragMoveEvent, doc_QCalendarWidget_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_dragLeaveEvent, "dragLeaveEvent(self, QDragLeaveEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragLeaveEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_dragLeaveEvent, doc_QCalendarWidget_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_dropEvent, "dropEvent(self, QDropEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDropEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_dropEvent, doc_QCalendarWidget_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_showEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_showEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QShowEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QShowEvent, &a0))
        {
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_showEvent, doc_QCalendarWidget_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_hideEvent, "hideEvent(self, QHideEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_hideEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_hideEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QHideEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QHideEvent, &a0))
        {
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_hideEvent, doc_QCalendarWidget_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_changeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_changeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_changeEvent, doc_QCalendarWidget_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_metric, "metric(self, QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QCalendarWidget_metric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_metric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintDevice::PaintDeviceMetric a0;
        const sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_metric, doc_QCalendarWidget_metric);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_inputMethodEvent, "inputMethodEvent(self, QInputMethodEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QInputMethodEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_inputMethodEvent, doc_QCalendarWidget_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_updateMicroFocus, "updateMicroFocus(self)");

extern "C" {static PyObject *meth_QCalendarWidget_updateMicroFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            sipCpp->sipProtect_updateMicroFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_updateMicroFocus, doc_QCalendarWidget_updateMicroFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_create, "create(self, window: sip.voidptr = 0, initializeWindow: bool = True, destroyOldWindow: bool = True)");

extern "C" {static PyObject *meth_QCalendarWidget_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::WId a0def = 0;
         ::WId* a0 = &a0def;
        int a0State = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQCalendarWidget *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_initializeWindow,
            sipName_destroyOldWindow,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1bb", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_quintptr,&a0, &a0State, &a1, &a2))
        {
            sipCpp->sipProtect_create(*a0,a1,a2);
            sipReleaseType(a0,sipType_quintptr,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_create, doc_QCalendarWidget_create);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_destroy, "destroy(self, destroyWindow: bool = True, destroySubWindows: bool = True)");

extern "C" {static PyObject *meth_QCalendarWidget_destroy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_destroy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQCalendarWidget *sipCpp;

        static const char *sipKwdList[] = {
            sipName_destroyWindow,
            sipName_destroySubWindows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|bb", &sipSelf, sipType_QCalendarWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_destroy(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_destroy, doc_QCalendarWidget_destroy);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_focusNextPrevChild, "focusNextPrevChild(self, bool) -> bool");

extern "C" {static PyObject *meth_QCalendarWidget_focusNextPrevChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QCalendarWidget, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_focusNextPrevChild, doc_QCalendarWidget_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_focusNextChild, "focusNextChild(self) -> bool");

extern "C" {static PyObject *meth_QCalendarWidget_focusNextChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_focusNextChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusNextChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_focusNextChild, doc_QCalendarWidget_focusNextChild);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_focusPreviousChild, "focusPreviousChild(self) -> bool");

extern "C" {static PyObject *meth_QCalendarWidget_focusPreviousChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusPreviousChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_focusPreviousChild, doc_QCalendarWidget_focusPreviousChild);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_nativeEvent, "nativeEvent(self, Union[QByteArray, bytes, bytearray], sip.voidptr) -> Tuple[bool, int]");

extern "C" {static PyObject *meth_QCalendarWidget_nativeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_nativeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        void* a1;
        long a2;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1v", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_nativeEvent(sipSelfWasArg,*a0,a1,&a2);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bl)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_nativeEvent, doc_QCalendarWidget_nativeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_sharedPainter, "sharedPainter(self) -> QPainter");

extern "C" {static PyObject *meth_QCalendarWidget_sharedPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_sharedPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
             ::QPainter*sipRes;

            sipRes = sipCpp->sipProtectVirt_sharedPainter(sipSelfWasArg);

            return sipConvertFromType(sipRes,sipType_QPainter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_sharedPainter, doc_QCalendarWidget_sharedPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_initPainter, "initPainter(self, QPainter)");

extern "C" {static PyObject *meth_QCalendarWidget_initPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_initPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPainter* a0;
        const sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtectVirt_initPainter(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_initPainter, doc_QCalendarWidget_initPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QCalendarWidget_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QCalendarWidget::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_sizeHint, doc_QCalendarWidget_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_minimumSizeHint, "minimumSizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QCalendarWidget_minimumSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_minimumSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QCalendarWidget::minimumSizeHint() : sipCpp->minimumSizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_minimumSizeHint, doc_QCalendarWidget_minimumSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_selectedDate, "selectedDate(self) -> QDate");

extern "C" {static PyObject *meth_QCalendarWidget_selectedDate(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_selectedDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
             ::QDate*sipRes;

            sipRes = new  ::QDate(sipCpp->selectedDate());

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_selectedDate, doc_QCalendarWidget_selectedDate);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_yearShown, "yearShown(self) -> int");

extern "C" {static PyObject *meth_QCalendarWidget_yearShown(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_yearShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->yearShown();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_yearShown, doc_QCalendarWidget_yearShown);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_monthShown, "monthShown(self) -> int");

extern "C" {static PyObject *meth_QCalendarWidget_monthShown(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_monthShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->monthShown();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_monthShown, doc_QCalendarWidget_monthShown);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_minimumDate, "minimumDate(self) -> QDate");

extern "C" {static PyObject *meth_QCalendarWidget_minimumDate(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_minimumDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
             ::QDate*sipRes;

            sipRes = new  ::QDate(sipCpp->minimumDate());

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_minimumDate, doc_QCalendarWidget_minimumDate);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setMinimumDate, "setMinimumDate(self, Union[QDate, datetime.date])");

extern "C" {static PyObject *meth_QCalendarWidget_setMinimumDate(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setMinimumDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDate* a0;
        int a0State = 0;
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QDate, &a0, &a0State))
        {
            sipCpp->setMinimumDate(*a0);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setMinimumDate, doc_QCalendarWidget_setMinimumDate);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_maximumDate, "maximumDate(self) -> QDate");

extern "C" {static PyObject *meth_QCalendarWidget_maximumDate(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_maximumDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
             ::QDate*sipRes;

            sipRes = new  ::QDate(sipCpp->maximumDate());

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_maximumDate, doc_QCalendarWidget_maximumDate);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setMaximumDate, "setMaximumDate(self, Union[QDate, datetime.date])");

extern "C" {static PyObject *meth_QCalendarWidget_setMaximumDate(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setMaximumDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDate* a0;
        int a0State = 0;
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QDate, &a0, &a0State))
        {
            sipCpp->setMaximumDate(*a0);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setMaximumDate, doc_QCalendarWidget_setMaximumDate);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_firstDayOfWeek, "firstDayOfWeek(self) -> Qt.DayOfWeek");

extern "C" {static PyObject *meth_QCalendarWidget_firstDayOfWeek(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_firstDayOfWeek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
             ::Qt::DayOfWeek sipRes;

            sipRes = sipCpp->firstDayOfWeek();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_DayOfWeek);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_firstDayOfWeek, doc_QCalendarWidget_firstDayOfWeek);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setFirstDayOfWeek, "setFirstDayOfWeek(self, Qt.DayOfWeek)");

extern "C" {static PyObject *meth_QCalendarWidget_setFirstDayOfWeek(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setFirstDayOfWeek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::DayOfWeek a0;
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_Qt_DayOfWeek, &a0))
        {
            sipCpp->setFirstDayOfWeek(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setFirstDayOfWeek, doc_QCalendarWidget_setFirstDayOfWeek);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_isGridVisible, "isGridVisible(self) -> bool");

extern "C" {static PyObject *meth_QCalendarWidget_isGridVisible(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_isGridVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isGridVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_isGridVisible, doc_QCalendarWidget_isGridVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setGridVisible, "setGridVisible(self, bool)");

extern "C" {static PyObject *meth_QCalendarWidget_setGridVisible(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setGridVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCalendarWidget, &sipCpp, &a0))
        {
            sipCpp->setGridVisible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setGridVisible, doc_QCalendarWidget_setGridVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_selectionMode, "selectionMode(self) -> QCalendarWidget.SelectionMode");

extern "C" {static PyObject *meth_QCalendarWidget_selectionMode(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_selectionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
             ::QCalendarWidget::SelectionMode sipRes;

            sipRes = sipCpp->selectionMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QCalendarWidget_SelectionMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_selectionMode, doc_QCalendarWidget_selectionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setSelectionMode, "setSelectionMode(self, QCalendarWidget.SelectionMode)");

extern "C" {static PyObject *meth_QCalendarWidget_setSelectionMode(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setSelectionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCalendarWidget::SelectionMode a0;
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QCalendarWidget_SelectionMode, &a0))
        {
            sipCpp->setSelectionMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setSelectionMode, doc_QCalendarWidget_setSelectionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_horizontalHeaderFormat, "horizontalHeaderFormat(self) -> QCalendarWidget.HorizontalHeaderFormat");

extern "C" {static PyObject *meth_QCalendarWidget_horizontalHeaderFormat(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_horizontalHeaderFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
             ::QCalendarWidget::HorizontalHeaderFormat sipRes;

            sipRes = sipCpp->horizontalHeaderFormat();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QCalendarWidget_HorizontalHeaderFormat);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_horizontalHeaderFormat, doc_QCalendarWidget_horizontalHeaderFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setHorizontalHeaderFormat, "setHorizontalHeaderFormat(self, QCalendarWidget.HorizontalHeaderFormat)");

extern "C" {static PyObject *meth_QCalendarWidget_setHorizontalHeaderFormat(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setHorizontalHeaderFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCalendarWidget::HorizontalHeaderFormat a0;
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QCalendarWidget_HorizontalHeaderFormat, &a0))
        {
            sipCpp->setHorizontalHeaderFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setHorizontalHeaderFormat, doc_QCalendarWidget_setHorizontalHeaderFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_verticalHeaderFormat, "verticalHeaderFormat(self) -> QCalendarWidget.VerticalHeaderFormat");

extern "C" {static PyObject *meth_QCalendarWidget_verticalHeaderFormat(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_verticalHeaderFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
             ::QCalendarWidget::VerticalHeaderFormat sipRes;

            sipRes = sipCpp->verticalHeaderFormat();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QCalendarWidget_VerticalHeaderFormat);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_verticalHeaderFormat, doc_QCalendarWidget_verticalHeaderFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setVerticalHeaderFormat, "setVerticalHeaderFormat(self, QCalendarWidget.VerticalHeaderFormat)");

extern "C" {static PyObject *meth_QCalendarWidget_setVerticalHeaderFormat(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setVerticalHeaderFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCalendarWidget::VerticalHeaderFormat a0;
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QCalendarWidget_VerticalHeaderFormat, &a0))
        {
            sipCpp->setVerticalHeaderFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setVerticalHeaderFormat, doc_QCalendarWidget_setVerticalHeaderFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_headerTextFormat, "headerTextFormat(self) -> QTextCharFormat");

extern "C" {static PyObject *meth_QCalendarWidget_headerTextFormat(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_headerTextFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
             ::QTextCharFormat*sipRes;

            sipRes = new  ::QTextCharFormat(sipCpp->headerTextFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_headerTextFormat, doc_QCalendarWidget_headerTextFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setHeaderTextFormat, "setHeaderTextFormat(self, QTextCharFormat)");

extern "C" {static PyObject *meth_QCalendarWidget_setHeaderTextFormat(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setHeaderTextFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextCharFormat* a0;
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            sipCpp->setHeaderTextFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setHeaderTextFormat, doc_QCalendarWidget_setHeaderTextFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_weekdayTextFormat, "weekdayTextFormat(self, Qt.DayOfWeek) -> QTextCharFormat");

extern "C" {static PyObject *meth_QCalendarWidget_weekdayTextFormat(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_weekdayTextFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::DayOfWeek a0;
        const  ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_Qt_DayOfWeek, &a0))
        {
             ::QTextCharFormat*sipRes;

            sipRes = new  ::QTextCharFormat(sipCpp->weekdayTextFormat(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_weekdayTextFormat, doc_QCalendarWidget_weekdayTextFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setWeekdayTextFormat, "setWeekdayTextFormat(self, Qt.DayOfWeek, QTextCharFormat)");

extern "C" {static PyObject *meth_QCalendarWidget_setWeekdayTextFormat(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setWeekdayTextFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::DayOfWeek a0;
        const  ::QTextCharFormat* a1;
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_Qt_DayOfWeek, &a0, sipType_QTextCharFormat, &a1))
        {
            sipCpp->setWeekdayTextFormat(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setWeekdayTextFormat, doc_QCalendarWidget_setWeekdayTextFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_dateTextFormat, "dateTextFormat(self) -> object\n"
"dateTextFormat(self, Union[QDate, datetime.date]) -> QTextCharFormat");

extern "C" {static PyObject *meth_QCalendarWidget_dateTextFormat(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_dateTextFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            QMap< ::QDate, ::QTextCharFormat>*sipRes;

            sipRes = new QMap< ::QDate, ::QTextCharFormat>(sipCpp->dateTextFormat());

            return sipConvertFromNewType(sipRes,sipType_QMap_0100QDate_0100QTextCharFormat,NULL);
        }
    }

    {
        const  ::QDate* a0;
        int a0State = 0;
        const  ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QDate, &a0, &a0State))
        {
             ::QTextCharFormat*sipRes;

            sipRes = new  ::QTextCharFormat(sipCpp->dateTextFormat(*a0));
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_dateTextFormat, doc_QCalendarWidget_dateTextFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setDateTextFormat, "setDateTextFormat(self, Union[QDate, datetime.date], QTextCharFormat)");

extern "C" {static PyObject *meth_QCalendarWidget_setDateTextFormat(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setDateTextFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDate* a0;
        int a0State = 0;
        const  ::QTextCharFormat* a1;
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QDate, &a0, &a0State, sipType_QTextCharFormat, &a1))
        {
            sipCpp->setDateTextFormat(*a0,*a1);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setDateTextFormat, doc_QCalendarWidget_setDateTextFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_updateCell, "updateCell(self, Union[QDate, datetime.date])");

extern "C" {static PyObject *meth_QCalendarWidget_updateCell(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_updateCell(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDate* a0;
        int a0State = 0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QDate, &a0, &a0State))
        {
            sipCpp->sipProtect_updateCell(*a0);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_updateCell, doc_QCalendarWidget_updateCell);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_updateCells, "updateCells(self)");

extern "C" {static PyObject *meth_QCalendarWidget_updateCells(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_updateCells(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            sipCpp->sipProtect_updateCells();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_updateCells, doc_QCalendarWidget_updateCells);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QCalendarWidget_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_event, doc_QCalendarWidget_event);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_eventFilter, "eventFilter(self, QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QCalendarWidget_eventFilter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_eventFilter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QObject* a0;
         ::QEvent* a1;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_eventFilter(sipSelfWasArg,a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_eventFilter, doc_QCalendarWidget_eventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_mousePressEvent, doc_QCalendarWidget_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_resizeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_resizeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QResizeEvent, &a0))
        {
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_resizeEvent, doc_QCalendarWidget_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
        sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_keyPressEvent, doc_QCalendarWidget_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_paintCell, "paintCell(self, QPainter, QRect, Union[QDate, datetime.date])");

extern "C" {static PyObject *meth_QCalendarWidget_paintCell(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_paintCell(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPainter* a0;
        const  ::QRect* a1;
        const  ::QDate* a2;
        int a2State = 0;
        const sipQCalendarWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J9J1", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QPainter, &a0, sipType_QRect, &a1, sipType_QDate, &a2, &a2State))
        {
            sipCpp->sipProtectVirt_paintCell(sipSelfWasArg,a0,*a1,*a2);
            sipReleaseType(const_cast< ::QDate *>(a2),sipType_QDate,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_paintCell, doc_QCalendarWidget_paintCell);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setCurrentPage, "setCurrentPage(self, int, int)");

extern "C" {static PyObject *meth_QCalendarWidget_setCurrentPage(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setCurrentPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QCalendarWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->setCurrentPage(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setCurrentPage, doc_QCalendarWidget_setCurrentPage);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setDateRange, "setDateRange(self, Union[QDate, datetime.date], Union[QDate, datetime.date])");

extern "C" {static PyObject *meth_QCalendarWidget_setDateRange(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setDateRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDate* a0;
        int a0State = 0;
        const  ::QDate* a1;
        int a1State = 0;
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QDate, &a0, &a0State, sipType_QDate, &a1, &a1State))
        {
            sipCpp->setDateRange(*a0,*a1);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);
            sipReleaseType(const_cast< ::QDate *>(a1),sipType_QDate,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setDateRange, doc_QCalendarWidget_setDateRange);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setSelectedDate, "setSelectedDate(self, Union[QDate, datetime.date])");

extern "C" {static PyObject *meth_QCalendarWidget_setSelectedDate(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setSelectedDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDate* a0;
        int a0State = 0;
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QDate, &a0, &a0State))
        {
            sipCpp->setSelectedDate(*a0);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setSelectedDate, doc_QCalendarWidget_setSelectedDate);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_showNextMonth, "showNextMonth(self)");

extern "C" {static PyObject *meth_QCalendarWidget_showNextMonth(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_showNextMonth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            sipCpp->showNextMonth();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_showNextMonth, doc_QCalendarWidget_showNextMonth);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_showNextYear, "showNextYear(self)");

extern "C" {static PyObject *meth_QCalendarWidget_showNextYear(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_showNextYear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            sipCpp->showNextYear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_showNextYear, doc_QCalendarWidget_showNextYear);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_showPreviousMonth, "showPreviousMonth(self)");

extern "C" {static PyObject *meth_QCalendarWidget_showPreviousMonth(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_showPreviousMonth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            sipCpp->showPreviousMonth();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_showPreviousMonth, doc_QCalendarWidget_showPreviousMonth);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_showPreviousYear, "showPreviousYear(self)");

extern "C" {static PyObject *meth_QCalendarWidget_showPreviousYear(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_showPreviousYear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            sipCpp->showPreviousYear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_showPreviousYear, doc_QCalendarWidget_showPreviousYear);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_showSelectedDate, "showSelectedDate(self)");

extern "C" {static PyObject *meth_QCalendarWidget_showSelectedDate(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_showSelectedDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            sipCpp->showSelectedDate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_showSelectedDate, doc_QCalendarWidget_showSelectedDate);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_showToday, "showToday(self)");

extern "C" {static PyObject *meth_QCalendarWidget_showToday(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_showToday(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            sipCpp->showToday();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_showToday, doc_QCalendarWidget_showToday);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_isNavigationBarVisible, "isNavigationBarVisible(self) -> bool");

extern "C" {static PyObject *meth_QCalendarWidget_isNavigationBarVisible(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_isNavigationBarVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNavigationBarVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_isNavigationBarVisible, doc_QCalendarWidget_isNavigationBarVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_isDateEditEnabled, "isDateEditEnabled(self) -> bool");

extern "C" {static PyObject *meth_QCalendarWidget_isDateEditEnabled(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_isDateEditEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDateEditEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_isDateEditEnabled, doc_QCalendarWidget_isDateEditEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setDateEditEnabled, "setDateEditEnabled(self, bool)");

extern "C" {static PyObject *meth_QCalendarWidget_setDateEditEnabled(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setDateEditEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCalendarWidget, &sipCpp, &a0))
        {
            sipCpp->setDateEditEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setDateEditEnabled, doc_QCalendarWidget_setDateEditEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_dateEditAcceptDelay, "dateEditAcceptDelay(self) -> int");

extern "C" {static PyObject *meth_QCalendarWidget_dateEditAcceptDelay(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_dateEditAcceptDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->dateEditAcceptDelay();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_dateEditAcceptDelay, doc_QCalendarWidget_dateEditAcceptDelay);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setDateEditAcceptDelay, "setDateEditAcceptDelay(self, int)");

extern "C" {static PyObject *meth_QCalendarWidget_setDateEditAcceptDelay(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setDateEditAcceptDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QCalendarWidget, &sipCpp, &a0))
        {
            sipCpp->setDateEditAcceptDelay(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setDateEditAcceptDelay, doc_QCalendarWidget_setDateEditAcceptDelay);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setNavigationBarVisible, "setNavigationBarVisible(self, bool)");

extern "C" {static PyObject *meth_QCalendarWidget_setNavigationBarVisible(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setNavigationBarVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCalendarWidget, &sipCpp, &a0))
        {
            sipCpp->setNavigationBarVisible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setNavigationBarVisible, doc_QCalendarWidget_setNavigationBarVisible);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QCalendarWidget(void *, const sipTypeDef *);}
static void *cast_QCalendarWidget(void *sipCppV, const sipTypeDef *targetType)
{
     ::QCalendarWidget *sipCpp = reinterpret_cast< ::QCalendarWidget *>(sipCppV);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCalendarWidget(void *, int);}
static void release_QCalendarWidget(void *sipCppV, int)
{
     ::QCalendarWidget *sipCpp = reinterpret_cast< ::QCalendarWidget *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QCalendarWidget(sipSimpleWrapper *);}
static void dealloc_QCalendarWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQCalendarWidget *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QCalendarWidget(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QCalendarWidget(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCalendarWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQCalendarWidget *sipCpp = 0;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQCalendarWidget(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QCalendarWidget[] = {{457, 255, 1}};


static PyMethodDef methods_QCalendarWidget[] = {
    {SIP_MLNAME_CAST(sipName_actionEvent), (PyCFunction)meth_QCalendarWidget_actionEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_changeEvent), (PyCFunction)meth_QCalendarWidget_changeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QCalendarWidget_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEvent), (PyCFunction)meth_QCalendarWidget_closeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QCalendarWidget_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), (PyCFunction)meth_QCalendarWidget_contextMenuEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QCalendarWidget_create, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QCalendarWidget_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dateEditAcceptDelay), meth_QCalendarWidget_dateEditAcceptDelay, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_dateEditAcceptDelay)},
    {SIP_MLNAME_CAST(sipName_dateTextFormat), meth_QCalendarWidget_dateTextFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_dateTextFormat)},
    {SIP_MLNAME_CAST(sipName_destroy), (PyCFunction)meth_QCalendarWidget_destroy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QCalendarWidget_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QCalendarWidget_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QCalendarWidget_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QCalendarWidget_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QCalendarWidget_dropEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_enterEvent), (PyCFunction)meth_QCalendarWidget_enterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QCalendarWidget_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCalendarWidget_event)},
    {SIP_MLNAME_CAST(sipName_eventFilter), (PyCFunction)meth_QCalendarWidget_eventFilter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCalendarWidget_eventFilter)},
    {SIP_MLNAME_CAST(sipName_firstDayOfWeek), meth_QCalendarWidget_firstDayOfWeek, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_firstDayOfWeek)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QCalendarWidget_focusInEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextChild), (PyCFunction)meth_QCalendarWidget_focusNextChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), (PyCFunction)meth_QCalendarWidget_focusNextPrevChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QCalendarWidget_focusOutEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), (PyCFunction)meth_QCalendarWidget_focusPreviousChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_headerTextFormat), meth_QCalendarWidget_headerTextFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_headerTextFormat)},
    {SIP_MLNAME_CAST(sipName_hideEvent), (PyCFunction)meth_QCalendarWidget_hideEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalHeaderFormat), meth_QCalendarWidget_horizontalHeaderFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_horizontalHeaderFormat)},
    {SIP_MLNAME_CAST(sipName_initPainter), (PyCFunction)meth_QCalendarWidget_initPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QCalendarWidget_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isDateEditEnabled), meth_QCalendarWidget_isDateEditEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_isDateEditEnabled)},
    {SIP_MLNAME_CAST(sipName_isGridVisible), meth_QCalendarWidget_isGridVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_isGridVisible)},
    {SIP_MLNAME_CAST(sipName_isNavigationBarVisible), meth_QCalendarWidget_isNavigationBarVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_isNavigationBarVisible)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QCalendarWidget_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QCalendarWidget_keyPressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCalendarWidget_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QCalendarWidget_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_leaveEvent), (PyCFunction)meth_QCalendarWidget_leaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_maximumDate), meth_QCalendarWidget_maximumDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_maximumDate)},
    {SIP_MLNAME_CAST(sipName_metric), (PyCFunction)meth_QCalendarWidget_metric, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_minimumDate), meth_QCalendarWidget_minimumDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_minimumDate)},
    {SIP_MLNAME_CAST(sipName_minimumSizeHint), meth_QCalendarWidget_minimumSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_minimumSizeHint)},
    {SIP_MLNAME_CAST(sipName_monthShown), meth_QCalendarWidget_monthShown, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_monthShown)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QCalendarWidget_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QCalendarWidget_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QCalendarWidget_mousePressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCalendarWidget_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QCalendarWidget_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_moveEvent), (PyCFunction)meth_QCalendarWidget_moveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_nativeEvent), (PyCFunction)meth_QCalendarWidget_nativeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_paintCell), (PyCFunction)meth_QCalendarWidget_paintCell, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCalendarWidget_paintCell)},
    {SIP_MLNAME_CAST(sipName_paintEvent), (PyCFunction)meth_QCalendarWidget_paintEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QCalendarWidget_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeEvent), (PyCFunction)meth_QCalendarWidget_resizeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCalendarWidget_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_selectedDate), meth_QCalendarWidget_selectedDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_selectedDate)},
    {SIP_MLNAME_CAST(sipName_selectionMode), meth_QCalendarWidget_selectionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_selectionMode)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QCalendarWidget_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QCalendarWidget_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrentPage), meth_QCalendarWidget_setCurrentPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setCurrentPage)},
    {SIP_MLNAME_CAST(sipName_setDateEditAcceptDelay), meth_QCalendarWidget_setDateEditAcceptDelay, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setDateEditAcceptDelay)},
    {SIP_MLNAME_CAST(sipName_setDateEditEnabled), meth_QCalendarWidget_setDateEditEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setDateEditEnabled)},
    {SIP_MLNAME_CAST(sipName_setDateRange), meth_QCalendarWidget_setDateRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setDateRange)},
    {SIP_MLNAME_CAST(sipName_setDateTextFormat), meth_QCalendarWidget_setDateTextFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setDateTextFormat)},
    {SIP_MLNAME_CAST(sipName_setFirstDayOfWeek), meth_QCalendarWidget_setFirstDayOfWeek, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setFirstDayOfWeek)},
    {SIP_MLNAME_CAST(sipName_setGridVisible), meth_QCalendarWidget_setGridVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setGridVisible)},
    {SIP_MLNAME_CAST(sipName_setHeaderTextFormat), meth_QCalendarWidget_setHeaderTextFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setHeaderTextFormat)},
    {SIP_MLNAME_CAST(sipName_setHorizontalHeaderFormat), meth_QCalendarWidget_setHorizontalHeaderFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setHorizontalHeaderFormat)},
    {SIP_MLNAME_CAST(sipName_setMaximumDate), meth_QCalendarWidget_setMaximumDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setMaximumDate)},
    {SIP_MLNAME_CAST(sipName_setMinimumDate), meth_QCalendarWidget_setMinimumDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setMinimumDate)},
    {SIP_MLNAME_CAST(sipName_setNavigationBarVisible), meth_QCalendarWidget_setNavigationBarVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setNavigationBarVisible)},
    {SIP_MLNAME_CAST(sipName_setSelectedDate), meth_QCalendarWidget_setSelectedDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setSelectedDate)},
    {SIP_MLNAME_CAST(sipName_setSelectionMode), meth_QCalendarWidget_setSelectionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setSelectionMode)},
    {SIP_MLNAME_CAST(sipName_setVerticalHeaderFormat), meth_QCalendarWidget_setVerticalHeaderFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setVerticalHeaderFormat)},
    {SIP_MLNAME_CAST(sipName_setWeekdayTextFormat), meth_QCalendarWidget_setWeekdayTextFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setWeekdayTextFormat)},
    {SIP_MLNAME_CAST(sipName_sharedPainter), (PyCFunction)meth_QCalendarWidget_sharedPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), (PyCFunction)meth_QCalendarWidget_showEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_showNextMonth), meth_QCalendarWidget_showNextMonth, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_showNextMonth)},
    {SIP_MLNAME_CAST(sipName_showNextYear), meth_QCalendarWidget_showNextYear, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_showNextYear)},
    {SIP_MLNAME_CAST(sipName_showPreviousMonth), meth_QCalendarWidget_showPreviousMonth, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_showPreviousMonth)},
    {SIP_MLNAME_CAST(sipName_showPreviousYear), meth_QCalendarWidget_showPreviousYear, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_showPreviousYear)},
    {SIP_MLNAME_CAST(sipName_showSelectedDate), meth_QCalendarWidget_showSelectedDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_showSelectedDate)},
    {SIP_MLNAME_CAST(sipName_showToday), meth_QCalendarWidget_showToday, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_showToday)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QCalendarWidget_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_sizeHint)},
    {SIP_MLNAME_CAST(sipName_tabletEvent), (PyCFunction)meth_QCalendarWidget_tabletEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QCalendarWidget_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateCell), (PyCFunction)meth_QCalendarWidget_updateCell, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCalendarWidget_updateCell)},
    {SIP_MLNAME_CAST(sipName_updateCells), (PyCFunction)meth_QCalendarWidget_updateCells, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCalendarWidget_updateCells)},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), (PyCFunction)meth_QCalendarWidget_updateMicroFocus, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalHeaderFormat), meth_QCalendarWidget_verticalHeaderFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_verticalHeaderFormat)},
    {SIP_MLNAME_CAST(sipName_weekdayTextFormat), meth_QCalendarWidget_weekdayTextFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_weekdayTextFormat)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QCalendarWidget_wheelEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_yearShown), meth_QCalendarWidget_yearShown, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_yearShown)}
};

static sipEnumMemberDef enummembers_QCalendarWidget[] = {
    {sipName_ISOWeekNumbers, static_cast<int>( ::QCalendarWidget::ISOWeekNumbers), 38},
    {sipName_LongDayNames, static_cast<int>( ::QCalendarWidget::LongDayNames), 36},
    {sipName_NoHorizontalHeader, static_cast<int>( ::QCalendarWidget::NoHorizontalHeader), 36},
    {sipName_NoSelection, static_cast<int>( ::QCalendarWidget::NoSelection), 37},
    {sipName_NoVerticalHeader, static_cast<int>( ::QCalendarWidget::NoVerticalHeader), 38},
    {sipName_ShortDayNames, static_cast<int>( ::QCalendarWidget::ShortDayNames), 36},
    {sipName_SingleLetterDayNames, static_cast<int>( ::QCalendarWidget::SingleLetterDayNames), 36},
    {sipName_SingleSelection, static_cast<int>( ::QCalendarWidget::SingleSelection), 37},
};

PyDoc_STRVAR(doc_QCalendarWidget, "\1QCalendarWidget(parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QCalendarWidget[] = {
    {"selectionChanged()", "\1selectionChanged(self)", 0, 0},
    {"currentPageChanged(int,int)", "\1currentPageChanged(self, int, int)", 0, 0},
    {"clicked(QDate)", "\1clicked(self, Union[QDate, datetime.date])", 0, 0},
    {"activated(QDate)", "\1activated(self, Union[QDate, datetime.date])", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QCalendarWidget = {
    & ::QCalendarWidget::staticMetaObject,
    0,
    signals_QCalendarWidget,
    0
};


sipClassTypeDef sipTypeDef_QtWidgets_QCalendarWidget = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QCalendarWidget,
        {0},
        &plugin_QCalendarWidget
    },
    {
        sipNameNr_QCalendarWidget,
        {0, 0, 1},
        90, methods_QCalendarWidget,
        8, enummembers_QCalendarWidget,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QCalendarWidget,
    -1,
    -1,
    supers_QCalendarWidget,
    0,
    init_type_QCalendarWidget,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QCalendarWidget,
    0,
    0,
    0,
    release_QCalendarWidget,
    cast_QCalendarWidget,
    0,
    0,
    0,
    0,
    0,
    0
};
