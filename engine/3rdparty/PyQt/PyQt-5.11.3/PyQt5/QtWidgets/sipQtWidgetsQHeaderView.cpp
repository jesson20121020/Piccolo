/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#include <qheaderview.h>

#include <qnamespace.h>
#include <qwidget.h>
#include <qstyleoption.h>
#include <qbytearray.h>
#include <qnamespace.h>
#include <qregion.h>
#include <qitemselectionmodel.h>
#include <qrect.h>
#include <qitemselectionmodel.h>
#include <qabstractitemmodel.h>
#include <qabstractitemview.h>
#include <qnamespace.h>
#include <qpoint.h>
#include <qvector.h>
#include <qsize.h>
#include <qpainter.h>
#include <qevent.h>
#include <qevent.h>
#include <qcoreevent.h>
#include <qabstractitemmodel.h>
#include <qevent.h>
#include <qvariant.h>
#include <qabstractitemdelegate.h>
#include <qcoreevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qstyleoption.h>
#include <qnamespace.h>
#include <qlist.h>
#include <qobject.h>
#include <qstring.h>
#include <qabstractitemview.h>
#include <qitemselectionmodel.h>
#include <qabstractscrollarea.h>
#include <qlist.h>
#include <qscrollbar.h>
#include <qevent.h>
#include <qevent.h>
#include <qmargins.h>
#include <qframe.h>
#include <qicon.h>
#include <qwindow.h>
#include <qnamespace.h>
#include <qpixmap.h>
#include <qnamespace.h>
#include <qnamespace.h>
#include <qgraphicseffect.h>
#include <qgraphicsproxywidget.h>
#include <QtGlobal>
#include <qlocale.h>
#include <qpaintdevice.h>
#include <qwidget.h>
#include <qfontinfo.h>
#include <qfontmetrics.h>
#include <qfont.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qpaintengine.h>
#include <qlist.h>
#include <qaction.h>
#include <qlayout.h>
#include <qsizepolicy.h>
#include <qnamespace.h>
#include <qkeysequence.h>
#include <qcursor.h>
#include <qbitmap.h>
#include <qpalette.h>
#include <qstyle.h>
#include <qmetaobject.h>
#include <qcoreevent.h>
#include <qlist.h>
#include <qlist.h>
#include <qthread.h>
#include <qnamespace.h>
#include <qregexp.h>
#include <qregularexpression.h>
#include <qobjectdefs.h>


class sipQHeaderView : public  ::QHeaderView
{
public:
    sipQHeaderView( ::Qt::Orientation, ::QWidget*);
    virtual ~sipQHeaderView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /* Expose this protected enum. */
    enum sipDropIndicatorPosition {
        OnItem =  ::QAbstractItemView::OnItem,
        AboveItem =  ::QAbstractItemView::AboveItem,
        BelowItem =  ::QAbstractItemView::BelowItem,
        OnViewport =  ::QAbstractItemView::OnViewport
    };

    /* Expose this protected enum. */
    enum sipState {
        NoState =  ::QAbstractItemView::NoState,
        DraggingState =  ::QAbstractItemView::DraggingState,
        DragSelectingState =  ::QAbstractItemView::DragSelectingState,
        EditingState =  ::QAbstractItemView::EditingState,
        ExpandingState =  ::QAbstractItemView::ExpandingState,
        CollapsingState =  ::QAbstractItemView::CollapsingState,
        AnimatingState =  ::QAbstractItemView::AnimatingState
    };

    /* Expose this protected enum. */
    enum sipCursorAction {
        MoveUp =  ::QAbstractItemView::MoveUp,
        MoveDown =  ::QAbstractItemView::MoveDown,
        MoveLeft =  ::QAbstractItemView::MoveLeft,
        MoveRight =  ::QAbstractItemView::MoveRight,
        MoveHome =  ::QAbstractItemView::MoveHome,
        MoveEnd =  ::QAbstractItemView::MoveEnd,
        MovePageUp =  ::QAbstractItemView::MovePageUp,
        MovePageDown =  ::QAbstractItemView::MovePageDown,
        MoveNext =  ::QAbstractItemView::MoveNext,
        MovePrevious =  ::QAbstractItemView::MovePrevious
    };

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const  ::QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const  ::QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const  ::QMetaMethod&) const;
    void sipProtectVirt_keyReleaseEvent(bool, ::QKeyEvent*);
    void sipProtectVirt_enterEvent(bool, ::QEvent*);
    void sipProtectVirt_leaveEvent(bool, ::QEvent*);
    void sipProtectVirt_moveEvent(bool, ::QMoveEvent*);
    void sipProtectVirt_closeEvent(bool, ::QCloseEvent*);
    void sipProtectVirt_tabletEvent(bool, ::QTabletEvent*);
    void sipProtectVirt_actionEvent(bool, ::QActionEvent*);
    void sipProtectVirt_showEvent(bool, ::QShowEvent*);
    void sipProtectVirt_hideEvent(bool, ::QHideEvent*);
    int sipProtectVirt_metric(bool, ::QPaintDevice::PaintDeviceMetric) const;
    void sipProtect_updateMicroFocus();
    void sipProtect_create( ::WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    bool sipProtectVirt_nativeEvent(bool,const  ::QByteArray&,void*,long*);
     ::QPainter* sipProtectVirt_sharedPainter(bool) const;
    void sipProtectVirt_initPainter(bool, ::QPainter*) const;
    void sipProtectVirt_changeEvent(bool, ::QEvent*);
    void sipProtect_drawFrame( ::QPainter*);
    void sipProtect_setViewportMargins(int,int,int,int);
    void sipProtect_setViewportMargins(const  ::QMargins&);
     ::QMargins sipProtect_viewportMargins() const;
    void sipProtectVirt_wheelEvent(bool, ::QWheelEvent*);
    void sipProtectVirt_contextMenuEvent(bool, ::QContextMenuEvent*);
    bool sipProtectVirt_eventFilter(bool, ::QObject*, ::QEvent*);
    bool sipProtectVirt_edit(bool,const  ::QModelIndex&, ::QAbstractItemView::EditTrigger, ::QEvent*);
    void sipProtectVirt_rowsAboutToBeRemoved(bool,const  ::QModelIndex&,int,int);
    void sipProtectVirt_selectionChanged(bool,const  ::QItemSelection&,const  ::QItemSelection&);
    void sipProtectVirt_updateEditorData(bool);
    void sipProtectVirt_updateEditorGeometries(bool);
    void sipProtectVirt_verticalScrollbarAction(bool,int);
    void sipProtectVirt_horizontalScrollbarAction(bool,int);
    void sipProtectVirt_verticalScrollbarValueChanged(bool,int);
    void sipProtectVirt_horizontalScrollbarValueChanged(bool,int);
    void sipProtectVirt_closeEditor(bool, ::QWidget*, ::QAbstractItemDelegate::EndEditHint);
    void sipProtectVirt_commitData(bool, ::QWidget*);
    void sipProtectVirt_editorDestroyed(bool, ::QObject*);
     ::QModelIndexList sipProtectVirt_selectedIndexes(bool) const;
     ::QItemSelectionModel::SelectionFlags sipProtectVirt_selectionCommand(bool,const  ::QModelIndex&,const  ::QEvent*) const;
    void sipProtectVirt_startDrag(bool, ::Qt::DropActions);
     ::QStyleOptionViewItem sipProtectVirt_viewOptions(bool) const;
    int sipProtect_state() const;
    void sipProtect_setState(int);
    void sipProtect_scheduleDelayedItemsLayout();
    void sipProtect_executeDelayedItemsLayout();
    void sipProtect_scrollDirtyRegion(int,int);
    void sipProtect_setDirtyRegion(const  ::QRegion&);
     ::QPoint sipProtect_dirtyRegionOffset() const;
    void sipProtectVirt_dragEnterEvent(bool, ::QDragEnterEvent*);
    void sipProtectVirt_dragMoveEvent(bool, ::QDragMoveEvent*);
    void sipProtectVirt_dragLeaveEvent(bool, ::QDragLeaveEvent*);
    void sipProtectVirt_dropEvent(bool, ::QDropEvent*);
    void sipProtectVirt_focusInEvent(bool, ::QFocusEvent*);
    void sipProtectVirt_focusOutEvent(bool, ::QFocusEvent*);
    void sipProtectVirt_keyPressEvent(bool, ::QKeyEvent*);
    void sipProtectVirt_resizeEvent(bool, ::QResizeEvent*);
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    int sipProtect_dropIndicatorPosition() const;
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    void sipProtectVirt_inputMethodEvent(bool, ::QInputMethodEvent*);
     ::QSize sipProtectVirt_viewportSizeHint(bool) const;
    void sipProtect_updateSection(int);
    void sipProtect_resizeSections();
    void sipProtect_sectionsInserted(const  ::QModelIndex&,int,int);
    void sipProtect_sectionsAboutToBeRemoved(const  ::QModelIndex&,int,int);
    void sipProtect_initialize();
    void sipProtect_initializeSections();
    void sipProtect_initializeSections(int,int);
    void sipProtectVirt_currentChanged(bool,const  ::QModelIndex&,const  ::QModelIndex&);
    bool sipProtectVirt_event(bool, ::QEvent*);
    bool sipProtectVirt_viewportEvent(bool, ::QEvent*);
    void sipProtectVirt_paintEvent(bool, ::QPaintEvent*);
    void sipProtectVirt_mousePressEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_mouseMoveEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_mouseDoubleClickEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_paintSection(bool, ::QPainter*,const  ::QRect&,int) const;
     ::QSize sipProtectVirt_sectionSizeFromContents(bool,int) const;
    int sipProtectVirt_horizontalOffset(bool) const;
    int sipProtectVirt_verticalOffset(bool) const;
    void sipProtectVirt_updateGeometries(bool);
    void sipProtectVirt_scrollContentsBy(bool,int,int);
    void sipProtectVirt_dataChanged(bool,const  ::QModelIndex&,const  ::QModelIndex&,const  ::QVector<int>&);
    void sipProtectVirt_rowsInserted(bool,const  ::QModelIndex&,int,int);
     ::QRect sipProtectVirt_visualRect(bool,const  ::QModelIndex&) const;
    void sipProtectVirt_scrollTo(bool,const  ::QModelIndex&, ::QAbstractItemView::ScrollHint);
     ::QModelIndex sipProtectVirt_indexAt(bool,const  ::QPoint&) const;
    bool sipProtectVirt_isIndexHidden(bool,const  ::QModelIndex&) const;
     ::QModelIndex sipProtectVirt_moveCursor(bool,int, ::Qt::KeyboardModifiers);
    void sipProtectVirt_setSelection(bool,const  ::QRect&, ::QItemSelectionModel::SelectionFlags);
     ::QRegion sipProtectVirt_visualRegionForSelection(bool,const  ::QItemSelection&) const;
    void sipProtect_initStyleOption( ::QStyleOptionHeader*) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QSize sectionSizeFromContents(int) const;
    void paintSection( ::QPainter*,const  ::QRect&,int) const;
    void setupViewport( ::QWidget*);
    void scrollContentsBy(int,int);
    bool viewportEvent( ::QEvent*);
     ::QSize viewportSizeHint() const;
    void initPainter( ::QPainter*) const;
     ::QPainter* sharedPainter() const;
    bool nativeEvent(const  ::QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    bool focusNextPrevChild(bool);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    void inputMethodEvent( ::QInputMethodEvent*);
    void changeEvent( ::QEvent*);
    void hideEvent( ::QHideEvent*);
    void showEvent( ::QShowEvent*);
    void dropEvent( ::QDropEvent*);
    void dragLeaveEvent( ::QDragLeaveEvent*);
    void dragMoveEvent( ::QDragMoveEvent*);
    void dragEnterEvent( ::QDragEnterEvent*);
    void actionEvent( ::QActionEvent*);
    void tabletEvent( ::QTabletEvent*);
    void contextMenuEvent( ::QContextMenuEvent*);
    void closeEvent( ::QCloseEvent*);
    void resizeEvent( ::QResizeEvent*);
    void moveEvent( ::QMoveEvent*);
    void paintEvent( ::QPaintEvent*);
    void leaveEvent( ::QEvent*);
    void enterEvent( ::QEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void focusInEvent( ::QFocusEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void keyPressEvent( ::QKeyEvent*);
    void wheelEvent( ::QWheelEvent*);
    void mouseMoveEvent( ::QMouseEvent*);
    void mouseDoubleClickEvent( ::QMouseEvent*);
    void mouseReleaseEvent( ::QMouseEvent*);
    void mousePressEvent( ::QMouseEvent*);
    int heightForWidth(int) const;
     ::QSize minimumSizeHint() const;
     ::QSize sizeHint() const;
    void setVisible(bool);
    int devType() const;
     ::QPaintEngine* paintEngine() const;
    int metric( ::QPaintDevice::PaintDeviceMetric) const;
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);
    void setModel( ::QAbstractItemModel*);
    void setSelectionModel( ::QItemSelectionModel*);
    void keyboardSearch(const  ::QString&);
     ::QRect visualRect(const  ::QModelIndex&) const;
    void scrollTo(const  ::QModelIndex&, ::QAbstractItemView::ScrollHint);
     ::QModelIndex indexAt(const  ::QPoint&) const;
    int sizeHintForRow(int) const;
    int sizeHintForColumn(int) const;
    void reset();
    void setRootIndex(const  ::QModelIndex&);
    void selectAll();
    void dataChanged(const  ::QModelIndex&,const  ::QModelIndex&,const  ::QVector<int>&);
    void rowsInserted(const  ::QModelIndex&,int,int);
    void rowsAboutToBeRemoved(const  ::QModelIndex&,int,int);
    void selectionChanged(const  ::QItemSelection&,const  ::QItemSelection&);
    void currentChanged(const  ::QModelIndex&,const  ::QModelIndex&);
    void updateEditorData();
    void updateEditorGeometries();
    void updateGeometries();
    void verticalScrollbarAction(int);
    void horizontalScrollbarAction(int);
    void verticalScrollbarValueChanged(int);
    void horizontalScrollbarValueChanged(int);
    void closeEditor( ::QWidget*, ::QAbstractItemDelegate::EndEditHint);
    void commitData( ::QWidget*);
    void editorDestroyed( ::QObject*);
     ::QModelIndex moveCursor( ::QAbstractItemView::CursorAction, ::Qt::KeyboardModifiers);
    int horizontalOffset() const;
    int verticalOffset() const;
    bool isIndexHidden(const  ::QModelIndex&) const;
    void setSelection(const  ::QRect&, ::QItemSelectionModel::SelectionFlags);
     ::QRegion visualRegionForSelection(const  ::QItemSelection&) const;
     ::QModelIndexList selectedIndexes() const;
    bool edit(const  ::QModelIndex&, ::QAbstractItemView::EditTrigger, ::QEvent*);
     ::QItemSelectionModel::SelectionFlags selectionCommand(const  ::QModelIndex&,const  ::QEvent*) const;
    void startDrag( ::Qt::DropActions);
     ::QStyleOptionViewItem viewOptions() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQHeaderView(const sipQHeaderView &);
    sipQHeaderView &operator = (const sipQHeaderView &);

    char sipPyMethods[89];
};

sipQHeaderView::sipQHeaderView( ::Qt::Orientation a0, ::QWidget*a1):  ::QHeaderView(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHeaderView::~sipQHeaderView()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQHeaderView::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QHeaderView);

    return  ::QHeaderView::metaObject();
}

int sipQHeaderView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QHeaderView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QHeaderView,_c,_id,_a);

    return _id;
}

void *sipQHeaderView::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QHeaderView, _clname, &sipCpp) ? sipCpp :  ::QHeaderView::qt_metacast(_clname));
}

 ::QSize sipQHeaderView::sectionSizeFromContents(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_sectionSizeFromContents);

    if (!sipMeth)
        return  ::QHeaderView::sectionSizeFromContents(a0);

    extern  ::QSize sipVH_QtWidgets_166(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_166(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::paintSection( ::QPainter*a0,const  ::QRect& a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_paintSection);

    if (!sipMeth)
    {
         ::QHeaderView::paintSection(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_165(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QRect&,int);

    sipVH_QtWidgets_165(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQHeaderView::setupViewport( ::QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_setupViewport);

    if (!sipMeth)
    {
         ::QHeaderView::setupViewport(a0);
        return;
    }

    extern void sipVH_QtWidgets_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    sipVH_QtWidgets_47(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!sipMeth)
    {
         ::QHeaderView::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_QtWidgets_46(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQHeaderView::viewportEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_viewportEvent);

    if (!sipMeth)
        return  ::QHeaderView::viewportEvent(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQHeaderView::viewportSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_viewportSizeHint);

    if (!sipMeth)
        return  ::QHeaderView::viewportSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQHeaderView::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
         ::QHeaderView::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPainter* sipQHeaderView::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return  ::QHeaderView::sharedPainter();

    extern  ::QPainter* sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_34(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQHeaderView::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return  ::QHeaderView::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtWidgets_33(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQHeaderView::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return  ::QHeaderView::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQHeaderView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QHeaderView::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_31(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQHeaderView::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QHeaderView::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWidgets_30(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QHeaderView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWidgets_29(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QHeaderView::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QHeaderView::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWidgets_28(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::QHeaderView::showEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWidgets_27(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QHeaderView::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QHeaderView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtWidgets_25(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QHeaderView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QHeaderView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtWidgets_23(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
         ::QHeaderView::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QHeaderView::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QHeaderView::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtWidgets_20(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QHeaderView::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWidgets_19(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QHeaderView::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtWidgets_18(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QHeaderView::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtWidgets_17(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QHeaderView::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtWidgets_16(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::QHeaderView::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
         ::QHeaderView::enterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QHeaderView::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QHeaderView::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QHeaderView::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QHeaderView::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QHeaderView::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QHeaderView::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QHeaderView::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QHeaderView::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QHeaderView::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQHeaderView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QHeaderView::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQHeaderView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::QHeaderView::minimumSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQHeaderView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::QHeaderView::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQHeaderView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
         ::QHeaderView::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQHeaderView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return  ::QHeaderView::devType();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQHeaderView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[43]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return  ::QHeaderView::paintEngine();

    extern  ::QPaintEngine* sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQHeaderView::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return  ::QHeaderView::metric(a0);

    extern int sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQHeaderView::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QHeaderView::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQHeaderView::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QHeaderView::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQHeaderView::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QHeaderView::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QHeaderView::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QHeaderView::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QHeaderView::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QHeaderView::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::setModel( ::QAbstractItemModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_setModel);

    if (!sipMeth)
    {
         ::QHeaderView::setModel(a0);
        return;
    }

    extern void sipVH_QtWidgets_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractItemModel*);

    sipVH_QtWidgets_48(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::setSelectionModel( ::QItemSelectionModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_setSelectionModel);

    if (!sipMeth)
    {
         ::QHeaderView::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtWidgets_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QItemSelectionModel*);

    sipVH_QtWidgets_49(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::keyboardSearch(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_keyboardSearch);

    if (!sipMeth)
    {
         ::QHeaderView::keyboardSearch(a0);
        return;
    }

    extern void sipVH_QtWidgets_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    sipVH_QtWidgets_50(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QRect sipQHeaderView::visualRect(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[55]),sipPySelf,NULL,sipName_visualRect);

    if (!sipMeth)
        return  ::QHeaderView::visualRect(a0);

    extern  ::QRect sipVH_QtWidgets_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtWidgets_51(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::scrollTo(const  ::QModelIndex& a0, ::QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,NULL,sipName_scrollTo);

    if (!sipMeth)
    {
         ::QHeaderView::scrollTo(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&, ::QAbstractItemView::ScrollHint);

    sipVH_QtWidgets_52(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QModelIndex sipQHeaderView::indexAt(const  ::QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[57]),sipPySelf,NULL,sipName_indexAt);

    if (!sipMeth)
        return  ::QHeaderView::indexAt(a0);

    extern  ::QModelIndex sipVH_QtWidgets_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPoint&);

    return sipVH_QtWidgets_53(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQHeaderView::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[58]),sipPySelf,NULL,sipName_sizeHintForRow);

    if (!sipMeth)
        return  ::QHeaderView::sizeHintForRow(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQHeaderView::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[59]),sipPySelf,NULL,sipName_sizeHintForColumn);

    if (!sipMeth)
        return  ::QHeaderView::sizeHintForColumn(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[60],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
    {
         ::QHeaderView::reset();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQHeaderView::setRootIndex(const  ::QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[61],sipPySelf,NULL,sipName_setRootIndex);

    if (!sipMeth)
    {
         ::QHeaderView::setRootIndex(a0);
        return;
    }

    extern void sipVH_QtWidgets_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    sipVH_QtWidgets_54(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[62],sipPySelf,NULL,sipName_selectAll);

    if (!sipMeth)
    {
         ::QHeaderView::selectAll();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQHeaderView::dataChanged(const  ::QModelIndex& a0,const  ::QModelIndex& a1,const  ::QVector<int>& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[63],sipPySelf,NULL,sipName_dataChanged);

    if (!sipMeth)
    {
         ::QHeaderView::dataChanged(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QModelIndex&,const  ::QVector<int>&);

    sipVH_QtWidgets_55(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQHeaderView::rowsInserted(const  ::QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[64],sipPySelf,NULL,sipName_rowsInserted);

    if (!sipMeth)
    {
         ::QHeaderView::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int);

    sipVH_QtWidgets_56(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQHeaderView::rowsAboutToBeRemoved(const  ::QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[65],sipPySelf,NULL,sipName_rowsAboutToBeRemoved);

    if (!sipMeth)
    {
         ::QHeaderView::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int);

    sipVH_QtWidgets_56(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQHeaderView::selectionChanged(const  ::QItemSelection& a0,const  ::QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[66],sipPySelf,NULL,sipName_selectionChanged);

    if (!sipMeth)
    {
         ::QHeaderView::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QItemSelection&,const  ::QItemSelection&);

    sipVH_QtWidgets_57(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQHeaderView::currentChanged(const  ::QModelIndex& a0,const  ::QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[67],sipPySelf,NULL,sipName_currentChanged);

    if (!sipMeth)
    {
         ::QHeaderView::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QModelIndex&);

    sipVH_QtWidgets_58(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQHeaderView::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[68],sipPySelf,NULL,sipName_updateEditorData);

    if (!sipMeth)
    {
         ::QHeaderView::updateEditorData();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQHeaderView::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[69],sipPySelf,NULL,sipName_updateEditorGeometries);

    if (!sipMeth)
    {
         ::QHeaderView::updateEditorGeometries();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQHeaderView::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[70],sipPySelf,NULL,sipName_updateGeometries);

    if (!sipMeth)
    {
         ::QHeaderView::updateGeometries();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQHeaderView::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[71],sipPySelf,NULL,sipName_verticalScrollbarAction);

    if (!sipMeth)
    {
         ::QHeaderView::verticalScrollbarAction(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[72],sipPySelf,NULL,sipName_horizontalScrollbarAction);

    if (!sipMeth)
    {
         ::QHeaderView::horizontalScrollbarAction(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[73],sipPySelf,NULL,sipName_verticalScrollbarValueChanged);

    if (!sipMeth)
    {
         ::QHeaderView::verticalScrollbarValueChanged(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[74],sipPySelf,NULL,sipName_horizontalScrollbarValueChanged);

    if (!sipMeth)
    {
         ::QHeaderView::horizontalScrollbarValueChanged(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::closeEditor( ::QWidget*a0, ::QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[75],sipPySelf,NULL,sipName_closeEditor);

    if (!sipMeth)
    {
         ::QHeaderView::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*, ::QAbstractItemDelegate::EndEditHint);

    sipVH_QtWidgets_60(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQHeaderView::commitData( ::QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[76],sipPySelf,NULL,sipName_commitData);

    if (!sipMeth)
    {
         ::QHeaderView::commitData(a0);
        return;
    }

    extern void sipVH_QtWidgets_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    sipVH_QtWidgets_47(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::editorDestroyed( ::QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[77],sipPySelf,NULL,sipName_editorDestroyed);

    if (!sipMeth)
    {
         ::QHeaderView::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtWidgets_61(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*);

    sipVH_QtWidgets_61(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQHeaderView::moveCursor( ::QAbstractItemView::CursorAction a0, ::Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[78],sipPySelf,NULL,sipName_moveCursor);

    if (!sipMeth)
        return  ::QHeaderView::moveCursor(a0,a1);

    extern  ::QModelIndex sipVH_QtWidgets_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::KeyboardModifiers);

    return sipVH_QtWidgets_62(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, (int)a0, a1);
}

int sipQHeaderView::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[79]),sipPySelf,NULL,sipName_horizontalOffset);

    if (!sipMeth)
        return  ::QHeaderView::horizontalOffset();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQHeaderView::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[80]),sipPySelf,NULL,sipName_verticalOffset);

    if (!sipMeth)
        return  ::QHeaderView::verticalOffset();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQHeaderView::isIndexHidden(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[81]),sipPySelf,NULL,sipName_isIndexHidden);

    if (!sipMeth)
        return  ::QHeaderView::isIndexHidden(a0);

    extern bool sipVH_QtWidgets_63(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtWidgets_63(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHeaderView::setSelection(const  ::QRect& a0, ::QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[82],sipPySelf,NULL,sipName_setSelection);

    if (!sipMeth)
    {
         ::QHeaderView::setSelection(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_64(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRect&, ::QItemSelectionModel::SelectionFlags);

    sipVH_QtWidgets_64(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QRegion sipQHeaderView::visualRegionForSelection(const  ::QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[83]),sipPySelf,NULL,sipName_visualRegionForSelection);

    if (!sipMeth)
        return  ::QHeaderView::visualRegionForSelection(a0);

    extern  ::QRegion sipVH_QtWidgets_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QItemSelection&);

    return sipVH_QtWidgets_65(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QModelIndexList sipQHeaderView::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[84]),sipPySelf,NULL,sipName_selectedIndexes);

    if (!sipMeth)
        return  ::QHeaderView::selectedIndexes();

    extern  ::QModelIndexList sipVH_QtWidgets_66(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_66(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQHeaderView::edit(const  ::QModelIndex& a0, ::QAbstractItemView::EditTrigger a1, ::QEvent*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[85],sipPySelf,NULL,sipName_edit);

    if (!sipMeth)
        return  ::QHeaderView::edit(a0,a1,a2);

    extern bool sipVH_QtWidgets_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&, ::QAbstractItemView::EditTrigger, ::QEvent*);

    return sipVH_QtWidgets_67(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QItemSelectionModel::SelectionFlags sipQHeaderView::selectionCommand(const  ::QModelIndex& a0,const  ::QEvent*a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[86]),sipPySelf,NULL,sipName_selectionCommand);

    if (!sipMeth)
        return  ::QHeaderView::selectionCommand(a0,a1);

    extern  ::QItemSelectionModel::SelectionFlags sipVH_QtWidgets_68(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QEvent*);

    return sipVH_QtWidgets_68(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQHeaderView::startDrag( ::Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[87],sipPySelf,NULL,sipName_startDrag);

    if (!sipMeth)
    {
         ::QHeaderView::startDrag(a0);
        return;
    }

    extern void sipVH_QtWidgets_69(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::DropActions);

    sipVH_QtWidgets_69(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QStyleOptionViewItem sipQHeaderView::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[88]),sipPySelf,NULL,sipName_viewOptions);

    if (!sipMeth)
        return  ::QHeaderView::viewOptions();

    extern  ::QStyleOptionViewItem sipVH_QtWidgets_70(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_70(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QObject* sipQHeaderView::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipQHeaderView::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipQHeaderView::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipQHeaderView::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipQHeaderView::sipProtectVirt_connectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQHeaderView::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQHeaderView::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}

bool sipQHeaderView::sipProtect_isSignalConnected(const  ::QMetaMethod& a0) const
{
    return  ::QObject::isSignalConnected(a0);
}

void sipQHeaderView::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg, ::QKeyEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQHeaderView::sipProtectVirt_enterEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQHeaderView::sipProtectVirt_leaveEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQHeaderView::sipProtectVirt_moveEvent(bool sipSelfWasArg, ::QMoveEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQHeaderView::sipProtectVirt_closeEvent(bool sipSelfWasArg, ::QCloseEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQHeaderView::sipProtectVirt_tabletEvent(bool sipSelfWasArg, ::QTabletEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQHeaderView::sipProtectVirt_actionEvent(bool sipSelfWasArg, ::QActionEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQHeaderView::sipProtectVirt_showEvent(bool sipSelfWasArg, ::QShowEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::showEvent(a0) : showEvent(a0));
}

void sipQHeaderView::sipProtectVirt_hideEvent(bool sipSelfWasArg, ::QHideEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::hideEvent(a0) : hideEvent(a0));
}

int sipQHeaderView::sipProtectVirt_metric(bool sipSelfWasArg, ::QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ?  ::QWidget::metric(a0) : metric(a0));
}

void sipQHeaderView::sipProtect_updateMicroFocus()
{
     ::QWidget::updateMicroFocus();
}

void sipQHeaderView::sipProtect_create( ::WId a0,bool a1,bool a2)
{
     ::QWidget::create(a0,a1,a2);
}

void sipQHeaderView::sipProtect_destroy(bool a0,bool a1)
{
     ::QWidget::destroy(a0,a1);
}

bool sipQHeaderView::sipProtect_focusNextChild()
{
    return  ::QWidget::focusNextChild();
}

bool sipQHeaderView::sipProtect_focusPreviousChild()
{
    return  ::QWidget::focusPreviousChild();
}

bool sipQHeaderView::sipProtectVirt_nativeEvent(bool sipSelfWasArg,const  ::QByteArray& a0,void*a1,long*a2)
{
    return (sipSelfWasArg ?  ::QWidget::nativeEvent(a0,a1,a2) : nativeEvent(a0,a1,a2));
}

 ::QPainter* sipQHeaderView::sipProtectVirt_sharedPainter(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::QWidget::sharedPainter() : sharedPainter());
}

void sipQHeaderView::sipProtectVirt_initPainter(bool sipSelfWasArg, ::QPainter*a0) const
{
    (sipSelfWasArg ?  ::QWidget::initPainter(a0) : initPainter(a0));
}

void sipQHeaderView::sipProtectVirt_changeEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QFrame::changeEvent(a0) : changeEvent(a0));
}

void sipQHeaderView::sipProtect_drawFrame( ::QPainter*a0)
{
     ::QFrame::drawFrame(a0);
}

void sipQHeaderView::sipProtect_setViewportMargins(int a0,int a1,int a2,int a3)
{
     ::QAbstractScrollArea::setViewportMargins(a0,a1,a2,a3);
}

void sipQHeaderView::sipProtect_setViewportMargins(const  ::QMargins& a0)
{
     ::QAbstractScrollArea::setViewportMargins(a0);
}

 ::QMargins sipQHeaderView::sipProtect_viewportMargins() const
{
    return  ::QAbstractScrollArea::viewportMargins();
}

void sipQHeaderView::sipProtectVirt_wheelEvent(bool sipSelfWasArg, ::QWheelEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractScrollArea::wheelEvent(a0) : wheelEvent(a0));
}

void sipQHeaderView::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg, ::QContextMenuEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractScrollArea::contextMenuEvent(a0) : contextMenuEvent(a0));
}

bool sipQHeaderView::sipProtectVirt_eventFilter(bool sipSelfWasArg, ::QObject*a0, ::QEvent*a1)
{
    return (sipSelfWasArg ?  ::QAbstractScrollArea::eventFilter(a0,a1) : eventFilter(a0,a1));
}

bool sipQHeaderView::sipProtectVirt_edit(bool sipSelfWasArg,const  ::QModelIndex& a0, ::QAbstractItemView::EditTrigger a1, ::QEvent*a2)
{
    return (sipSelfWasArg ?  ::QAbstractItemView::edit(a0,a1,a2) : edit(a0,a1,a2));
}

void sipQHeaderView::sipProtectVirt_rowsAboutToBeRemoved(bool sipSelfWasArg,const  ::QModelIndex& a0,int a1,int a2)
{
    (sipSelfWasArg ?  ::QAbstractItemView::rowsAboutToBeRemoved(a0,a1,a2) : rowsAboutToBeRemoved(a0,a1,a2));
}

void sipQHeaderView::sipProtectVirt_selectionChanged(bool sipSelfWasArg,const  ::QItemSelection& a0,const  ::QItemSelection& a1)
{
    (sipSelfWasArg ?  ::QAbstractItemView::selectionChanged(a0,a1) : selectionChanged(a0,a1));
}

void sipQHeaderView::sipProtectVirt_updateEditorData(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::QAbstractItemView::updateEditorData() : updateEditorData());
}

void sipQHeaderView::sipProtectVirt_updateEditorGeometries(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::QAbstractItemView::updateEditorGeometries() : updateEditorGeometries());
}

void sipQHeaderView::sipProtectVirt_verticalScrollbarAction(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::verticalScrollbarAction(a0) : verticalScrollbarAction(a0));
}

void sipQHeaderView::sipProtectVirt_horizontalScrollbarAction(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::horizontalScrollbarAction(a0) : horizontalScrollbarAction(a0));
}

void sipQHeaderView::sipProtectVirt_verticalScrollbarValueChanged(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::verticalScrollbarValueChanged(a0) : verticalScrollbarValueChanged(a0));
}

void sipQHeaderView::sipProtectVirt_horizontalScrollbarValueChanged(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::horizontalScrollbarValueChanged(a0) : horizontalScrollbarValueChanged(a0));
}

void sipQHeaderView::sipProtectVirt_closeEditor(bool sipSelfWasArg, ::QWidget*a0, ::QAbstractItemDelegate::EndEditHint a1)
{
    (sipSelfWasArg ?  ::QAbstractItemView::closeEditor(a0,a1) : closeEditor(a0,a1));
}

void sipQHeaderView::sipProtectVirt_commitData(bool sipSelfWasArg, ::QWidget*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::commitData(a0) : commitData(a0));
}

void sipQHeaderView::sipProtectVirt_editorDestroyed(bool sipSelfWasArg, ::QObject*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::editorDestroyed(a0) : editorDestroyed(a0));
}

 ::QModelIndexList sipQHeaderView::sipProtectVirt_selectedIndexes(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::QAbstractItemView::selectedIndexes() : selectedIndexes());
}

 ::QItemSelectionModel::SelectionFlags sipQHeaderView::sipProtectVirt_selectionCommand(bool sipSelfWasArg,const  ::QModelIndex& a0,const  ::QEvent*a1) const
{
    return (sipSelfWasArg ?  ::QAbstractItemView::selectionCommand(a0,a1) : selectionCommand(a0,a1));
}

void sipQHeaderView::sipProtectVirt_startDrag(bool sipSelfWasArg, ::Qt::DropActions a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::startDrag(a0) : startDrag(a0));
}

 ::QStyleOptionViewItem sipQHeaderView::sipProtectVirt_viewOptions(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::QAbstractItemView::viewOptions() : viewOptions());
}

int sipQHeaderView::sipProtect_state() const
{
    return (int) ::QAbstractItemView::state();
}

void sipQHeaderView::sipProtect_setState(int a0)
{
     ::QAbstractItemView::setState(( ::QAbstractItemView::State)a0);
}

void sipQHeaderView::sipProtect_scheduleDelayedItemsLayout()
{
     ::QAbstractItemView::scheduleDelayedItemsLayout();
}

void sipQHeaderView::sipProtect_executeDelayedItemsLayout()
{
     ::QAbstractItemView::executeDelayedItemsLayout();
}

void sipQHeaderView::sipProtect_scrollDirtyRegion(int a0,int a1)
{
     ::QAbstractItemView::scrollDirtyRegion(a0,a1);
}

void sipQHeaderView::sipProtect_setDirtyRegion(const  ::QRegion& a0)
{
     ::QAbstractItemView::setDirtyRegion(a0);
}

 ::QPoint sipQHeaderView::sipProtect_dirtyRegionOffset() const
{
    return  ::QAbstractItemView::dirtyRegionOffset();
}

void sipQHeaderView::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg, ::QDragEnterEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQHeaderView::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg, ::QDragMoveEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQHeaderView::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg, ::QDragLeaveEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQHeaderView::sipProtectVirt_dropEvent(bool sipSelfWasArg, ::QDropEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::dropEvent(a0) : dropEvent(a0));
}

void sipQHeaderView::sipProtectVirt_focusInEvent(bool sipSelfWasArg, ::QFocusEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::focusInEvent(a0) : focusInEvent(a0));
}

void sipQHeaderView::sipProtectVirt_focusOutEvent(bool sipSelfWasArg, ::QFocusEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQHeaderView::sipProtectVirt_keyPressEvent(bool sipSelfWasArg, ::QKeyEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQHeaderView::sipProtectVirt_resizeEvent(bool sipSelfWasArg, ::QResizeEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::resizeEvent(a0) : resizeEvent(a0));
}

void sipQHeaderView::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::timerEvent(a0) : timerEvent(a0));
}

int sipQHeaderView::sipProtect_dropIndicatorPosition() const
{
    return (int) ::QAbstractItemView::dropIndicatorPosition();
}

bool sipQHeaderView::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ?  ::QAbstractItemView::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

void sipQHeaderView::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg, ::QInputMethodEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::inputMethodEvent(a0) : inputMethodEvent(a0));
}

 ::QSize sipQHeaderView::sipProtectVirt_viewportSizeHint(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::QAbstractItemView::viewportSizeHint() : viewportSizeHint());
}

void sipQHeaderView::sipProtect_updateSection(int a0)
{
     ::QHeaderView::updateSection(a0);
}

void sipQHeaderView::sipProtect_resizeSections()
{
     ::QHeaderView::resizeSections();
}

void sipQHeaderView::sipProtect_sectionsInserted(const  ::QModelIndex& a0,int a1,int a2)
{
     ::QHeaderView::sectionsInserted(a0,a1,a2);
}

void sipQHeaderView::sipProtect_sectionsAboutToBeRemoved(const  ::QModelIndex& a0,int a1,int a2)
{
     ::QHeaderView::sectionsAboutToBeRemoved(a0,a1,a2);
}

void sipQHeaderView::sipProtect_initialize()
{
     ::QHeaderView::initialize();
}

void sipQHeaderView::sipProtect_initializeSections()
{
     ::QHeaderView::initializeSections();
}

void sipQHeaderView::sipProtect_initializeSections(int a0,int a1)
{
     ::QHeaderView::initializeSections(a0,a1);
}

void sipQHeaderView::sipProtectVirt_currentChanged(bool sipSelfWasArg,const  ::QModelIndex& a0,const  ::QModelIndex& a1)
{
    (sipSelfWasArg ?  ::QHeaderView::currentChanged(a0,a1) : currentChanged(a0,a1));
}

bool sipQHeaderView::sipProtectVirt_event(bool sipSelfWasArg, ::QEvent*a0)
{
    return (sipSelfWasArg ?  ::QHeaderView::event(a0) : event(a0));
}

bool sipQHeaderView::sipProtectVirt_viewportEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    return (sipSelfWasArg ?  ::QHeaderView::viewportEvent(a0) : viewportEvent(a0));
}

void sipQHeaderView::sipProtectVirt_paintEvent(bool sipSelfWasArg, ::QPaintEvent*a0)
{
    (sipSelfWasArg ?  ::QHeaderView::paintEvent(a0) : paintEvent(a0));
}

void sipQHeaderView::sipProtectVirt_mousePressEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QHeaderView::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQHeaderView::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QHeaderView::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQHeaderView::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QHeaderView::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQHeaderView::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QHeaderView::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQHeaderView::sipProtectVirt_paintSection(bool sipSelfWasArg, ::QPainter*a0,const  ::QRect& a1,int a2) const
{
    (sipSelfWasArg ?  ::QHeaderView::paintSection(a0,a1,a2) : paintSection(a0,a1,a2));
}

 ::QSize sipQHeaderView::sipProtectVirt_sectionSizeFromContents(bool sipSelfWasArg,int a0) const
{
    return (sipSelfWasArg ?  ::QHeaderView::sectionSizeFromContents(a0) : sectionSizeFromContents(a0));
}

int sipQHeaderView::sipProtectVirt_horizontalOffset(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::QHeaderView::horizontalOffset() : horizontalOffset());
}

int sipQHeaderView::sipProtectVirt_verticalOffset(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::QHeaderView::verticalOffset() : verticalOffset());
}

void sipQHeaderView::sipProtectVirt_updateGeometries(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::QHeaderView::updateGeometries() : updateGeometries());
}

void sipQHeaderView::sipProtectVirt_scrollContentsBy(bool sipSelfWasArg,int a0,int a1)
{
    (sipSelfWasArg ?  ::QHeaderView::scrollContentsBy(a0,a1) : scrollContentsBy(a0,a1));
}

void sipQHeaderView::sipProtectVirt_dataChanged(bool sipSelfWasArg,const  ::QModelIndex& a0,const  ::QModelIndex& a1,const  ::QVector<int>& a2)
{
    (sipSelfWasArg ?  ::QHeaderView::dataChanged(a0,a1,a2) : dataChanged(a0,a1,a2));
}

void sipQHeaderView::sipProtectVirt_rowsInserted(bool sipSelfWasArg,const  ::QModelIndex& a0,int a1,int a2)
{
    (sipSelfWasArg ?  ::QHeaderView::rowsInserted(a0,a1,a2) : rowsInserted(a0,a1,a2));
}

 ::QRect sipQHeaderView::sipProtectVirt_visualRect(bool sipSelfWasArg,const  ::QModelIndex& a0) const
{
    return (sipSelfWasArg ?  ::QHeaderView::visualRect(a0) : visualRect(a0));
}

void sipQHeaderView::sipProtectVirt_scrollTo(bool sipSelfWasArg,const  ::QModelIndex& a0, ::QAbstractItemView::ScrollHint a1)
{
    (sipSelfWasArg ?  ::QHeaderView::scrollTo(a0,a1) : scrollTo(a0,a1));
}

 ::QModelIndex sipQHeaderView::sipProtectVirt_indexAt(bool sipSelfWasArg,const  ::QPoint& a0) const
{
    return (sipSelfWasArg ?  ::QHeaderView::indexAt(a0) : indexAt(a0));
}

bool sipQHeaderView::sipProtectVirt_isIndexHidden(bool sipSelfWasArg,const  ::QModelIndex& a0) const
{
    return (sipSelfWasArg ?  ::QHeaderView::isIndexHidden(a0) : isIndexHidden(a0));
}

 ::QModelIndex sipQHeaderView::sipProtectVirt_moveCursor(bool sipSelfWasArg,int a0, ::Qt::KeyboardModifiers a1)
{
    return (sipSelfWasArg ?  ::QHeaderView::moveCursor(( ::QAbstractItemView::CursorAction)a0,a1) : moveCursor(( ::QAbstractItemView::CursorAction)a0,a1));
}

void sipQHeaderView::sipProtectVirt_setSelection(bool sipSelfWasArg,const  ::QRect& a0, ::QItemSelectionModel::SelectionFlags a1)
{
    (sipSelfWasArg ?  ::QHeaderView::setSelection(a0,a1) : setSelection(a0,a1));
}

 ::QRegion sipQHeaderView::sipProtectVirt_visualRegionForSelection(bool sipSelfWasArg,const  ::QItemSelection& a0) const
{
    return (sipSelfWasArg ?  ::QHeaderView::visualRegionForSelection(a0) : visualRegionForSelection(a0));
}

void sipQHeaderView::sipProtect_initStyleOption( ::QStyleOptionHeader*a0) const
{
     ::QHeaderView::initStyleOption(a0);
}


PyDoc_STRVAR(doc_QHeaderView_sender, "sender(self) -> QObject");

extern "C" {static PyObject *meth_QHeaderView_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
             ::QObject*sipRes = 0;

        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sender, doc_QHeaderView_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_receivers, "receivers(self, PYQT_SIGNAL) -> int");

extern "C" {static PyObject *meth_QHeaderView_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_receivers, doc_QHeaderView_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_childEvent, "childEvent(self, QChildEvent)");

extern "C" {static PyObject *meth_QHeaderView_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_childEvent, doc_QHeaderView_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_customEvent, "customEvent(self, QEvent)");

extern "C" {static PyObject *meth_QHeaderView_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_customEvent, doc_QHeaderView_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_connectNotify, "connectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QHeaderView_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_connectNotify, doc_QHeaderView_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_disconnectNotify, "disconnectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QHeaderView_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_disconnectNotify, doc_QHeaderView_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_senderSignalIndex, "senderSignalIndex(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_senderSignalIndex, doc_QHeaderView_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_isSignalConnected, "isSignalConnected(self, QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QHeaderView_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMetaMethod* a0;
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_isSignalConnected, doc_QHeaderView_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_keyReleaseEvent, "keyReleaseEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QHeaderView_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_keyReleaseEvent, doc_QHeaderView_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_enterEvent, "enterEvent(self, QEvent)");

extern "C" {static PyObject *meth_QHeaderView_enterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_enterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_enterEvent, doc_QHeaderView_enterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_leaveEvent, "leaveEvent(self, QEvent)");

extern "C" {static PyObject *meth_QHeaderView_leaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_leaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_leaveEvent, doc_QHeaderView_leaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_moveEvent, "moveEvent(self, QMoveEvent)");

extern "C" {static PyObject *meth_QHeaderView_moveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_moveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMoveEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_moveEvent, doc_QHeaderView_moveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_closeEvent, "closeEvent(self, QCloseEvent)");

extern "C" {static PyObject *meth_QHeaderView_closeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_closeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QCloseEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QCloseEvent, &a0))
        {
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_closeEvent, doc_QHeaderView_closeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_tabletEvent, "tabletEvent(self, QTabletEvent)");

extern "C" {static PyObject *meth_QHeaderView_tabletEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_tabletEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTabletEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QTabletEvent, &a0))
        {
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_tabletEvent, doc_QHeaderView_tabletEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_actionEvent, "actionEvent(self, QActionEvent)");

extern "C" {static PyObject *meth_QHeaderView_actionEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_actionEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QActionEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QActionEvent, &a0))
        {
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_actionEvent, doc_QHeaderView_actionEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QHeaderView_showEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_showEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QShowEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QShowEvent, &a0))
        {
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_showEvent, doc_QHeaderView_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_hideEvent, "hideEvent(self, QHideEvent)");

extern "C" {static PyObject *meth_QHeaderView_hideEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_hideEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QHideEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QHideEvent, &a0))
        {
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_hideEvent, doc_QHeaderView_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_metric, "metric(self, QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QHeaderView_metric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_metric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintDevice::PaintDeviceMetric a0;
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_metric, doc_QHeaderView_metric);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_updateMicroFocus, "updateMicroFocus(self)");

extern "C" {static PyObject *meth_QHeaderView_updateMicroFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            sipCpp->sipProtect_updateMicroFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_updateMicroFocus, doc_QHeaderView_updateMicroFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_create, "create(self, window: sip.voidptr = 0, initializeWindow: bool = True, destroyOldWindow: bool = True)");

extern "C" {static PyObject *meth_QHeaderView_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::WId a0def = 0;
         ::WId* a0 = &a0def;
        int a0State = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQHeaderView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_initializeWindow,
            sipName_destroyOldWindow,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1bb", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_quintptr,&a0, &a0State, &a1, &a2))
        {
            sipCpp->sipProtect_create(*a0,a1,a2);
            sipReleaseType(a0,sipType_quintptr,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_create, doc_QHeaderView_create);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_destroy, "destroy(self, destroyWindow: bool = True, destroySubWindows: bool = True)");

extern "C" {static PyObject *meth_QHeaderView_destroy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_destroy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQHeaderView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_destroyWindow,
            sipName_destroySubWindows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_destroy(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_destroy, doc_QHeaderView_destroy);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_focusNextChild, "focusNextChild(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_focusNextChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_focusNextChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusNextChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_focusNextChild, doc_QHeaderView_focusNextChild);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_focusPreviousChild, "focusPreviousChild(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_focusPreviousChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusPreviousChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_focusPreviousChild, doc_QHeaderView_focusPreviousChild);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_nativeEvent, "nativeEvent(self, Union[QByteArray, bytes, bytearray], sip.voidptr) -> Tuple[bool, int]");

extern "C" {static PyObject *meth_QHeaderView_nativeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_nativeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        void* a1;
        long a2;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1v", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_nativeEvent(sipSelfWasArg,*a0,a1,&a2);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bl)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_nativeEvent, doc_QHeaderView_nativeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sharedPainter, "sharedPainter(self) -> QPainter");

extern "C" {static PyObject *meth_QHeaderView_sharedPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sharedPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
             ::QPainter*sipRes;

            sipRes = sipCpp->sipProtectVirt_sharedPainter(sipSelfWasArg);

            return sipConvertFromType(sipRes,sipType_QPainter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sharedPainter, doc_QHeaderView_sharedPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_initPainter, "initPainter(self, QPainter)");

extern "C" {static PyObject *meth_QHeaderView_initPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_initPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPainter* a0;
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtectVirt_initPainter(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_initPainter, doc_QHeaderView_initPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QHeaderView_changeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_changeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_changeEvent, doc_QHeaderView_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_drawFrame, "drawFrame(self, QPainter)");

extern "C" {static PyObject *meth_QHeaderView_drawFrame(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_drawFrame(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPainter* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtect_drawFrame(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_drawFrame, doc_QHeaderView_drawFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setViewportMargins, "setViewportMargins(self, int, int, int, int)\n"
"setViewportMargins(self, QMargins)");

extern "C" {static PyObject *meth_QHeaderView_setViewportMargins(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setViewportMargins(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Biiii", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->sipProtect_setViewportMargins(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QMargins* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QMargins, &a0))
        {
            sipCpp->sipProtect_setViewportMargins(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setViewportMargins, doc_QHeaderView_setViewportMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_viewportMargins, "viewportMargins(self) -> QMargins");

extern "C" {static PyObject *meth_QHeaderView_viewportMargins(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_viewportMargins(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins(sipCpp->sipProtect_viewportMargins());

            return sipConvertFromNewType(sipRes,sipType_QMargins,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_viewportMargins, doc_QHeaderView_viewportMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_wheelEvent, "wheelEvent(self, QWheelEvent)");

extern "C" {static PyObject *meth_QHeaderView_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWheelEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_wheelEvent, doc_QHeaderView_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_contextMenuEvent, "contextMenuEvent(self, QContextMenuEvent)");

extern "C" {static PyObject *meth_QHeaderView_contextMenuEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QContextMenuEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_contextMenuEvent, doc_QHeaderView_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_eventFilter, "eventFilter(self, QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QHeaderView_eventFilter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_eventFilter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QObject* a0;
         ::QEvent* a1;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_eventFilter(sipSelfWasArg,a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_eventFilter, doc_QHeaderView_eventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_edit, "edit(self, QModelIndex)\n"
"edit(self, QModelIndex, QAbstractItemView.EditTrigger, QEvent) -> bool");

extern "C" {static PyObject *meth_QHeaderView_edit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_edit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
         ::QHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0))
        {
            sipCpp->edit(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QModelIndex* a0;
         ::QAbstractItemView::EditTrigger a1;
         ::QEvent* a2;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9EJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_EditTrigger, &a1, sipType_QEvent, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_edit(sipSelfWasArg,*a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_edit, doc_QHeaderView_edit);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_rowsAboutToBeRemoved, "rowsAboutToBeRemoved(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QHeaderView_rowsAboutToBeRemoved(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_rowsAboutToBeRemoved(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtectVirt_rowsAboutToBeRemoved(sipSelfWasArg,*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_rowsAboutToBeRemoved, doc_QHeaderView_rowsAboutToBeRemoved);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_selectionChanged, "selectionChanged(self, QItemSelection, QItemSelection)");

extern "C" {static PyObject *meth_QHeaderView_selectionChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_selectionChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QItemSelection* a0;
        const  ::QItemSelection* a1;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelection, &a1))
        {
            sipCpp->sipProtectVirt_selectionChanged(sipSelfWasArg,*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_selectionChanged, doc_QHeaderView_selectionChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_updateEditorData, "updateEditorData(self)");

extern "C" {static PyObject *meth_QHeaderView_updateEditorData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_updateEditorData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            sipCpp->sipProtectVirt_updateEditorData(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_updateEditorData, doc_QHeaderView_updateEditorData);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_updateEditorGeometries, "updateEditorGeometries(self)");

extern "C" {static PyObject *meth_QHeaderView_updateEditorGeometries(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_updateEditorGeometries(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            sipCpp->sipProtectVirt_updateEditorGeometries(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_updateEditorGeometries, doc_QHeaderView_updateEditorGeometries);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_verticalScrollbarAction, "verticalScrollbarAction(self, int)");

extern "C" {static PyObject *meth_QHeaderView_verticalScrollbarAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_verticalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_verticalScrollbarAction(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_verticalScrollbarAction, doc_QHeaderView_verticalScrollbarAction);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_horizontalScrollbarAction, "horizontalScrollbarAction(self, int)");

extern "C" {static PyObject *meth_QHeaderView_horizontalScrollbarAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_horizontalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_horizontalScrollbarAction(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_horizontalScrollbarAction, doc_QHeaderView_horizontalScrollbarAction);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_verticalScrollbarValueChanged, "verticalScrollbarValueChanged(self, int)");

extern "C" {static PyObject *meth_QHeaderView_verticalScrollbarValueChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_verticalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_verticalScrollbarValueChanged(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_verticalScrollbarValueChanged, doc_QHeaderView_verticalScrollbarValueChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_horizontalScrollbarValueChanged, "horizontalScrollbarValueChanged(self, int)");

extern "C" {static PyObject *meth_QHeaderView_horizontalScrollbarValueChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_horizontalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_horizontalScrollbarValueChanged(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_horizontalScrollbarValueChanged, doc_QHeaderView_horizontalScrollbarValueChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_closeEditor, "closeEditor(self, QWidget, QAbstractItemDelegate.EndEditHint)");

extern "C" {static PyObject *meth_QHeaderView_closeEditor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_closeEditor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWidget* a0;
         ::QAbstractItemDelegate::EndEditHint a1;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8E", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QWidget, &a0, sipType_QAbstractItemDelegate_EndEditHint, &a1))
        {
            sipCpp->sipProtectVirt_closeEditor(sipSelfWasArg,a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_closeEditor, doc_QHeaderView_closeEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_commitData, "commitData(self, QWidget)");

extern "C" {static PyObject *meth_QHeaderView_commitData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_commitData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWidget* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->sipProtectVirt_commitData(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_commitData, doc_QHeaderView_commitData);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_editorDestroyed, "editorDestroyed(self, QObject)");

extern "C" {static PyObject *meth_QHeaderView_editorDestroyed(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_editorDestroyed(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QObject* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QObject, &a0))
        {
            sipCpp->sipProtectVirt_editorDestroyed(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_editorDestroyed, doc_QHeaderView_editorDestroyed);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_selectedIndexes, "selectedIndexes(self) -> object");

extern "C" {static PyObject *meth_QHeaderView_selectedIndexes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_selectedIndexes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
             ::QModelIndexList*sipRes;

            sipRes = new  ::QModelIndexList(sipCpp->sipProtectVirt_selectedIndexes(sipSelfWasArg));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_selectedIndexes, doc_QHeaderView_selectedIndexes);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_selectionCommand, "selectionCommand(self, QModelIndex, event: QEvent = None) -> QItemSelectionModel.SelectionFlags");

extern "C" {static PyObject *meth_QHeaderView_selectionCommand(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_selectionCommand(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QEvent* a1 = 0;
        const sipQHeaderView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0, sipType_QEvent, &a1))
        {
             ::QItemSelectionModel::SelectionFlags*sipRes;

            sipRes = new  ::QItemSelectionModel::SelectionFlags(sipCpp->sipProtectVirt_selectionCommand(sipSelfWasArg,*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionModel_SelectionFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_selectionCommand, doc_QHeaderView_selectionCommand);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_startDrag, "startDrag(self, Union[Qt.DropActions, Qt.DropAction])");

extern "C" {static PyObject *meth_QHeaderView_startDrag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_startDrag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::Qt::DropActions* a0;
        int a0State = 0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_Qt_DropActions, &a0, &a0State))
        {
            sipCpp->sipProtectVirt_startDrag(sipSelfWasArg,*a0);
            sipReleaseType(a0,sipType_Qt_DropActions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_startDrag, doc_QHeaderView_startDrag);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_viewOptions, "viewOptions(self) -> QStyleOptionViewItem");

extern "C" {static PyObject *meth_QHeaderView_viewOptions(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_viewOptions(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
             ::QStyleOptionViewItem*sipRes;

            sipRes = new  ::QStyleOptionViewItem(sipCpp->sipProtectVirt_viewOptions(sipSelfWasArg));

            return sipConvertFromNewType(sipRes,sipType_QStyleOptionViewItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_viewOptions, doc_QHeaderView_viewOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_state, "state(self) -> QAbstractItemView.State");

extern "C" {static PyObject *meth_QHeaderView_state(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_state(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_state();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractItemView_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_state, doc_QHeaderView_state);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setState, "setState(self, QAbstractItemView.State)");

extern "C" {static PyObject *meth_QHeaderView_setState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QAbstractItemView_State, &a0))
        {
            sipCpp->sipProtect_setState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setState, doc_QHeaderView_setState);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_scheduleDelayedItemsLayout, "scheduleDelayedItemsLayout(self)");

extern "C" {static PyObject *meth_QHeaderView_scheduleDelayedItemsLayout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_scheduleDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            sipCpp->sipProtect_scheduleDelayedItemsLayout();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_scheduleDelayedItemsLayout, doc_QHeaderView_scheduleDelayedItemsLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_executeDelayedItemsLayout, "executeDelayedItemsLayout(self)");

extern "C" {static PyObject *meth_QHeaderView_executeDelayedItemsLayout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_executeDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            sipCpp->sipProtect_executeDelayedItemsLayout();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_executeDelayedItemsLayout, doc_QHeaderView_executeDelayedItemsLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_scrollDirtyRegion, "scrollDirtyRegion(self, int, int)");

extern "C" {static PyObject *meth_QHeaderView_scrollDirtyRegion(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_scrollDirtyRegion(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bii", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_scrollDirtyRegion(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_scrollDirtyRegion, doc_QHeaderView_scrollDirtyRegion);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setDirtyRegion, "setDirtyRegion(self, QRegion)");

extern "C" {static PyObject *meth_QHeaderView_setDirtyRegion(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setDirtyRegion(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QRegion* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QRegion, &a0))
        {
            sipCpp->sipProtect_setDirtyRegion(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setDirtyRegion, doc_QHeaderView_setDirtyRegion);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_dirtyRegionOffset, "dirtyRegionOffset(self) -> QPoint");

extern "C" {static PyObject *meth_QHeaderView_dirtyRegionOffset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_dirtyRegionOffset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->sipProtect_dirtyRegionOffset());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_dirtyRegionOffset, doc_QHeaderView_dirtyRegionOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_dragEnterEvent, "dragEnterEvent(self, QDragEnterEvent)");

extern "C" {static PyObject *meth_QHeaderView_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragEnterEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_dragEnterEvent, doc_QHeaderView_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_dragMoveEvent, "dragMoveEvent(self, QDragMoveEvent)");

extern "C" {static PyObject *meth_QHeaderView_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragMoveEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_dragMoveEvent, doc_QHeaderView_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_dragLeaveEvent, "dragLeaveEvent(self, QDragLeaveEvent)");

extern "C" {static PyObject *meth_QHeaderView_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragLeaveEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_dragLeaveEvent, doc_QHeaderView_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_dropEvent, "dropEvent(self, QDropEvent)");

extern "C" {static PyObject *meth_QHeaderView_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDropEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_dropEvent, doc_QHeaderView_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QHeaderView_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_focusInEvent, doc_QHeaderView_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_focusOutEvent, "focusOutEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QHeaderView_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_focusOutEvent, doc_QHeaderView_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QHeaderView_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_keyPressEvent, doc_QHeaderView_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QHeaderView_resizeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_resizeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QResizeEvent, &a0))
        {
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_resizeEvent, doc_QHeaderView_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QHeaderView_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_timerEvent, doc_QHeaderView_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_dropIndicatorPosition, "dropIndicatorPosition(self) -> QAbstractItemView.DropIndicatorPosition");

extern "C" {static PyObject *meth_QHeaderView_dropIndicatorPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_dropIndicatorPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_dropIndicatorPosition();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractItemView_DropIndicatorPosition);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_dropIndicatorPosition, doc_QHeaderView_dropIndicatorPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_focusNextPrevChild, "focusNextPrevChild(self, bool) -> bool");

extern "C" {static PyObject *meth_QHeaderView_focusNextPrevChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_focusNextPrevChild, doc_QHeaderView_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_inputMethodEvent, "inputMethodEvent(self, QInputMethodEvent)");

extern "C" {static PyObject *meth_QHeaderView_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QInputMethodEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_inputMethodEvent, doc_QHeaderView_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_viewportSizeHint, "viewportSizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QHeaderView_viewportSizeHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_viewportSizeHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->sipProtectVirt_viewportSizeHint(sipSelfWasArg));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_viewportSizeHint, doc_QHeaderView_viewportSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setModel, "setModel(self, QAbstractItemModel)");

extern "C" {static PyObject *meth_QHeaderView_setModel(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractItemModel* a0;
        PyObject *a0Keep;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QHeaderView, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QHeaderView::setModel(a0) : sipCpp->setModel(a0));

            sipKeepReference(sipSelf, -29, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setModel, doc_QHeaderView_setModel);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_orientation, "orientation(self) -> Qt.Orientation");

extern "C" {static PyObject *meth_QHeaderView_orientation(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_orientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
             ::Qt::Orientation sipRes;

            sipRes = sipCpp->orientation();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_Orientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_orientation, doc_QHeaderView_orientation);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_offset, "offset(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_offset(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_offset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->offset();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_offset, doc_QHeaderView_offset);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_length, "length(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_length(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->length();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_length, doc_QHeaderView_length);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QHeaderView_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QHeaderView::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sizeHint, doc_QHeaderView_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionSizeHint, "sectionSizeHint(self, int) -> int");

extern "C" {static PyObject *meth_QHeaderView_sectionSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sectionSizeHint(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionSizeHint, doc_QHeaderView_sectionSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_visualIndexAt, "visualIndexAt(self, int) -> int");

extern "C" {static PyObject *meth_QHeaderView_visualIndexAt(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_visualIndexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->visualIndexAt(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_visualIndexAt, doc_QHeaderView_visualIndexAt);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_logicalIndexAt, "logicalIndexAt(self, int) -> int\n"
"logicalIndexAt(self, int, int) -> int\n"
"logicalIndexAt(self, QPoint) -> int");

extern "C" {static PyObject *meth_QHeaderView_logicalIndexAt(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_logicalIndexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->logicalIndexAt(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->logicalIndexAt(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QPoint, &a0))
        {
            int sipRes;

            sipRes = sipCpp->logicalIndexAt(*a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_logicalIndexAt, doc_QHeaderView_logicalIndexAt);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionSize, "sectionSize(self, int) -> int");

extern "C" {static PyObject *meth_QHeaderView_sectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sectionSize(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionSize, doc_QHeaderView_sectionSize);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionPosition, "sectionPosition(self, int) -> int");

extern "C" {static PyObject *meth_QHeaderView_sectionPosition(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sectionPosition(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionPosition, doc_QHeaderView_sectionPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionViewportPosition, "sectionViewportPosition(self, int) -> int");

extern "C" {static PyObject *meth_QHeaderView_sectionViewportPosition(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionViewportPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sectionViewportPosition(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionViewportPosition, doc_QHeaderView_sectionViewportPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_moveSection, "moveSection(self, int, int)");

extern "C" {static PyObject *meth_QHeaderView_moveSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_moveSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            sipCpp->moveSection(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_moveSection, doc_QHeaderView_moveSection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_resizeSection, "resizeSection(self, int, int)");

extern "C" {static PyObject *meth_QHeaderView_resizeSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_resizeSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            sipCpp->resizeSection(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_resizeSection, doc_QHeaderView_resizeSection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_isSectionHidden, "isSectionHidden(self, int) -> bool");

extern "C" {static PyObject *meth_QHeaderView_isSectionHidden(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_isSectionHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isSectionHidden(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_isSectionHidden, doc_QHeaderView_isSectionHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setSectionHidden, "setSectionHidden(self, int, bool)");

extern "C" {static PyObject *meth_QHeaderView_setSectionHidden(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setSectionHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bool a1;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            sipCpp->setSectionHidden(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setSectionHidden, doc_QHeaderView_setSectionHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_count, "count(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_count(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_count, doc_QHeaderView_count);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_visualIndex, "visualIndex(self, int) -> int");

extern "C" {static PyObject *meth_QHeaderView_visualIndex(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_visualIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->visualIndex(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_visualIndex, doc_QHeaderView_visualIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_logicalIndex, "logicalIndex(self, int) -> int");

extern "C" {static PyObject *meth_QHeaderView_logicalIndex(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_logicalIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->logicalIndex(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_logicalIndex, doc_QHeaderView_logicalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setHighlightSections, "setHighlightSections(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setHighlightSections(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setHighlightSections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setHighlightSections(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setHighlightSections, doc_QHeaderView_setHighlightSections);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_highlightSections, "highlightSections(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_highlightSections(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_highlightSections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->highlightSections();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_highlightSections, doc_QHeaderView_highlightSections);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_stretchSectionCount, "stretchSectionCount(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_stretchSectionCount(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_stretchSectionCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->stretchSectionCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_stretchSectionCount, doc_QHeaderView_stretchSectionCount);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setSortIndicatorShown, "setSortIndicatorShown(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setSortIndicatorShown(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setSortIndicatorShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setSortIndicatorShown(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setSortIndicatorShown, doc_QHeaderView_setSortIndicatorShown);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_isSortIndicatorShown, "isSortIndicatorShown(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_isSortIndicatorShown(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_isSortIndicatorShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSortIndicatorShown();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_isSortIndicatorShown, doc_QHeaderView_isSortIndicatorShown);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setSortIndicator, "setSortIndicator(self, int, Qt.SortOrder)");

extern "C" {static PyObject *meth_QHeaderView_setSortIndicator(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setSortIndicator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::Qt::SortOrder a1;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            sipCpp->setSortIndicator(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setSortIndicator, doc_QHeaderView_setSortIndicator);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sortIndicatorSection, "sortIndicatorSection(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_sortIndicatorSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sortIndicatorSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sortIndicatorSection();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sortIndicatorSection, doc_QHeaderView_sortIndicatorSection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sortIndicatorOrder, "sortIndicatorOrder(self) -> Qt.SortOrder");

extern "C" {static PyObject *meth_QHeaderView_sortIndicatorOrder(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sortIndicatorOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
             ::Qt::SortOrder sipRes;

            sipRes = sipCpp->sortIndicatorOrder();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_SortOrder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sortIndicatorOrder, doc_QHeaderView_sortIndicatorOrder);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_stretchLastSection, "stretchLastSection(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_stretchLastSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_stretchLastSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->stretchLastSection();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_stretchLastSection, doc_QHeaderView_stretchLastSection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setStretchLastSection, "setStretchLastSection(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setStretchLastSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setStretchLastSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setStretchLastSection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setStretchLastSection, doc_QHeaderView_setStretchLastSection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionsMoved, "sectionsMoved(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_sectionsMoved(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionsMoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sectionsMoved();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionsMoved, doc_QHeaderView_sectionsMoved);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setOffset, "setOffset(self, int)");

extern "C" {static PyObject *meth_QHeaderView_setOffset(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setOffset(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setOffset, doc_QHeaderView_setOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_headerDataChanged, "headerDataChanged(self, Qt.Orientation, int, int)");

extern "C" {static PyObject *meth_QHeaderView_headerDataChanged(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_headerDataChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::Orientation a0;
        int a1;
        int a2;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEii", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_Qt_Orientation, &a0, &a1, &a2))
        {
            sipCpp->headerDataChanged(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_headerDataChanged, doc_QHeaderView_headerDataChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setOffsetToSectionPosition, "setOffsetToSectionPosition(self, int)");

extern "C" {static PyObject *meth_QHeaderView_setOffsetToSectionPosition(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setOffsetToSectionPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setOffsetToSectionPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setOffsetToSectionPosition, doc_QHeaderView_setOffsetToSectionPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_updateSection, "updateSection(self, int)");

extern "C" {static PyObject *meth_QHeaderView_updateSection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_updateSection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->sipProtect_updateSection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_updateSection, doc_QHeaderView_updateSection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_resizeSections, "resizeSections(self)\n"
"resizeSections(self, QHeaderView.ResizeMode)");

extern "C" {static PyObject *meth_QHeaderView_resizeSections(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_resizeSections(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            sipCpp->sipProtect_resizeSections();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QHeaderView::ResizeMode a0;
         ::QHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QHeaderView_ResizeMode, &a0))
        {
            sipCpp->resizeSections(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_resizeSections, doc_QHeaderView_resizeSections);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionsInserted, "sectionsInserted(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QHeaderView_sectionsInserted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionsInserted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtect_sectionsInserted(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionsInserted, doc_QHeaderView_sectionsInserted);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionsAboutToBeRemoved, "sectionsAboutToBeRemoved(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QHeaderView_sectionsAboutToBeRemoved(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionsAboutToBeRemoved(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtect_sectionsAboutToBeRemoved(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionsAboutToBeRemoved, doc_QHeaderView_sectionsAboutToBeRemoved);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_initialize, "initialize(self)");

extern "C" {static PyObject *meth_QHeaderView_initialize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_initialize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            sipCpp->sipProtect_initialize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_initialize, doc_QHeaderView_initialize);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_initializeSections, "initializeSections(self)\n"
"initializeSections(self, int, int)");

extern "C" {static PyObject *meth_QHeaderView_initializeSections(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_initializeSections(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            sipCpp->sipProtect_initializeSections();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bii", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_initializeSections(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_initializeSections, doc_QHeaderView_initializeSections);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_currentChanged, "currentChanged(self, QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QHeaderView_currentChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_currentChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QModelIndex* a1;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            sipCpp->sipProtectVirt_currentChanged(sipSelfWasArg,*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_currentChanged, doc_QHeaderView_currentChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QHeaderView_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_event, doc_QHeaderView_event);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_viewportEvent, "viewportEvent(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QHeaderView_viewportEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_viewportEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_viewportEvent(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_viewportEvent, doc_QHeaderView_viewportEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QHeaderView_paintEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_paintEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QPaintEvent, &a0))
        {
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_paintEvent, doc_QHeaderView_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QHeaderView_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_mousePressEvent, doc_QHeaderView_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QHeaderView_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_mouseMoveEvent, doc_QHeaderView_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QHeaderView_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_mouseReleaseEvent, doc_QHeaderView_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QHeaderView_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_mouseDoubleClickEvent, doc_QHeaderView_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_paintSection, "paintSection(self, QPainter, QRect, int)");

extern "C" {static PyObject *meth_QHeaderView_paintSection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_paintSection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPainter* a0;
        const  ::QRect* a1;
        int a2;
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J9i", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QPainter, &a0, sipType_QRect, &a1, &a2))
        {
            sipCpp->sipProtectVirt_paintSection(sipSelfWasArg,a0,*a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_paintSection, doc_QHeaderView_paintSection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionSizeFromContents, "sectionSizeFromContents(self, int) -> QSize");

extern "C" {static PyObject *meth_QHeaderView_sectionSizeFromContents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionSizeFromContents(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->sipProtectVirt_sectionSizeFromContents(sipSelfWasArg,a0));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionSizeFromContents, doc_QHeaderView_sectionSizeFromContents);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_horizontalOffset, "horizontalOffset(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_horizontalOffset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_horizontalOffset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_horizontalOffset(sipSelfWasArg);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_horizontalOffset, doc_QHeaderView_horizontalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_verticalOffset, "verticalOffset(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_verticalOffset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_verticalOffset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_verticalOffset(sipSelfWasArg);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_verticalOffset, doc_QHeaderView_verticalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_updateGeometries, "updateGeometries(self)");

extern "C" {static PyObject *meth_QHeaderView_updateGeometries(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_updateGeometries(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            sipCpp->sipProtectVirt_updateGeometries(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_updateGeometries, doc_QHeaderView_updateGeometries);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_scrollContentsBy, "scrollContentsBy(self, int, int)");

extern "C" {static PyObject *meth_QHeaderView_scrollContentsBy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bii", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtectVirt_scrollContentsBy(sipSelfWasArg,a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_scrollContentsBy, doc_QHeaderView_scrollContentsBy);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_dataChanged, "dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = [])");

extern "C" {static PyObject *meth_QHeaderView_dataChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_dataChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QModelIndex* a1;
        const  ::QVector<int>& a2def = QVector<int>();
        const  ::QVector<int>* a2 = &a2def;
        int a2State = 0;
        sipQHeaderView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_roles,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9|J1", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1, sipType_QVector_1800,&a2, &a2State))
        {
            sipCpp->sipProtectVirt_dataChanged(sipSelfWasArg,*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QVector<int> *>(a2),sipType_QVector_1800,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_dataChanged, doc_QHeaderView_dataChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_rowsInserted, "rowsInserted(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QHeaderView_rowsInserted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_rowsInserted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtectVirt_rowsInserted(sipSelfWasArg,*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_rowsInserted, doc_QHeaderView_rowsInserted);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_visualRect, "visualRect(self, QModelIndex) -> QRect");

extern "C" {static PyObject *meth_QHeaderView_visualRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_visualRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->sipProtectVirt_visualRect(sipSelfWasArg,*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_visualRect, doc_QHeaderView_visualRect);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_scrollTo, "scrollTo(self, QModelIndex, QAbstractItemView.ScrollHint)");

extern "C" {static PyObject *meth_QHeaderView_scrollTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_scrollTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
         ::QAbstractItemView::ScrollHint a1;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9E", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_ScrollHint, &a1))
        {
            sipCpp->sipProtectVirt_scrollTo(sipSelfWasArg,*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_scrollTo, doc_QHeaderView_scrollTo);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_indexAt, "indexAt(self, QPoint) -> QModelIndex");

extern "C" {static PyObject *meth_QHeaderView_indexAt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_indexAt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPoint* a0;
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QPoint, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex(sipCpp->sipProtectVirt_indexAt(sipSelfWasArg,*a0));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_indexAt, doc_QHeaderView_indexAt);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_isIndexHidden, "isIndexHidden(self, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QHeaderView_isIndexHidden(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_isIndexHidden(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_isIndexHidden(sipSelfWasArg,*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_isIndexHidden, doc_QHeaderView_isIndexHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_moveCursor, "moveCursor(self, QAbstractItemView.CursorAction, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier]) -> QModelIndex");

extern "C" {static PyObject *meth_QHeaderView_moveCursor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_moveCursor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::KeyboardModifiers* a1;
        int a1State = 0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BEJ1", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QAbstractItemView_CursorAction, &a0, sipType_Qt_KeyboardModifiers, &a1, &a1State))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex(sipCpp->sipProtectVirt_moveCursor(sipSelfWasArg,a0,*a1));
            sipReleaseType(a1,sipType_Qt_KeyboardModifiers,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_moveCursor, doc_QHeaderView_moveCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setSelection, "setSelection(self, QRect, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag])");

extern "C" {static PyObject *meth_QHeaderView_setSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QRect* a0;
         ::QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
        sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J1", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QRect, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            sipCpp->sipProtectVirt_setSelection(sipSelfWasArg,*a0,*a1);
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setSelection, doc_QHeaderView_setSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_visualRegionForSelection, "visualRegionForSelection(self, QItemSelection) -> QRegion");

extern "C" {static PyObject *meth_QHeaderView_visualRegionForSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_visualRegionForSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QItemSelection* a0;
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QItemSelection, &a0))
        {
             ::QRegion*sipRes;

            sipRes = new  ::QRegion(sipCpp->sipProtectVirt_visualRegionForSelection(sipSelfWasArg,*a0));

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_visualRegionForSelection, doc_QHeaderView_visualRegionForSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_hideSection, "hideSection(self, int)");

extern "C" {static PyObject *meth_QHeaderView_hideSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_hideSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->hideSection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_hideSection, doc_QHeaderView_hideSection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_showSection, "showSection(self, int)");

extern "C" {static PyObject *meth_QHeaderView_showSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_showSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->showSection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_showSection, doc_QHeaderView_showSection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_hiddenSectionCount, "hiddenSectionCount(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_hiddenSectionCount(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_hiddenSectionCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->hiddenSectionCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_hiddenSectionCount, doc_QHeaderView_hiddenSectionCount);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_defaultSectionSize, "defaultSectionSize(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_defaultSectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_defaultSectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->defaultSectionSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_defaultSectionSize, doc_QHeaderView_defaultSectionSize);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setDefaultSectionSize, "setDefaultSectionSize(self, int)");

extern "C" {static PyObject *meth_QHeaderView_setDefaultSectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setDefaultSectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setDefaultSectionSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setDefaultSectionSize, doc_QHeaderView_setDefaultSectionSize);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_defaultAlignment, "defaultAlignment(self) -> Qt.Alignment");

extern "C" {static PyObject *meth_QHeaderView_defaultAlignment(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_defaultAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
             ::Qt::Alignment*sipRes;

            sipRes = new  ::Qt::Alignment(sipCpp->defaultAlignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_defaultAlignment, doc_QHeaderView_defaultAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setDefaultAlignment, "setDefaultAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag])");

extern "C" {static PyObject *meth_QHeaderView_setDefaultAlignment(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setDefaultAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::Alignment* a0;
        int a0State = 0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setDefaultAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setDefaultAlignment, doc_QHeaderView_setDefaultAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionsHidden, "sectionsHidden(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_sectionsHidden(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionsHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sectionsHidden();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionsHidden, doc_QHeaderView_sectionsHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_swapSections, "swapSections(self, int, int)");

extern "C" {static PyObject *meth_QHeaderView_swapSections(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_swapSections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            sipCpp->swapSections(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_swapSections, doc_QHeaderView_swapSections);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_cascadingSectionResizes, "cascadingSectionResizes(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_cascadingSectionResizes(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_cascadingSectionResizes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->cascadingSectionResizes();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_cascadingSectionResizes, doc_QHeaderView_cascadingSectionResizes);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setCascadingSectionResizes, "setCascadingSectionResizes(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setCascadingSectionResizes(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setCascadingSectionResizes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setCascadingSectionResizes(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setCascadingSectionResizes, doc_QHeaderView_setCascadingSectionResizes);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_minimumSectionSize, "minimumSectionSize(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_minimumSectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_minimumSectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minimumSectionSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_minimumSectionSize, doc_QHeaderView_minimumSectionSize);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setMinimumSectionSize, "setMinimumSectionSize(self, int)");

extern "C" {static PyObject *meth_QHeaderView_setMinimumSectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setMinimumSectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setMinimumSectionSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setMinimumSectionSize, doc_QHeaderView_setMinimumSectionSize);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_saveState, "saveState(self) -> QByteArray");

extern "C" {static PyObject *meth_QHeaderView_saveState(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_saveState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->saveState());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_saveState, doc_QHeaderView_saveState);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_restoreState, "restoreState(self, Union[QByteArray, bytes, bytearray]) -> bool");

extern "C" {static PyObject *meth_QHeaderView_restoreState(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_restoreState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->restoreState(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_restoreState, doc_QHeaderView_restoreState);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_reset, "reset(self)");

extern "C" {static PyObject *meth_QHeaderView_reset(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QHeaderView::reset() : sipCpp->reset());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_reset, doc_QHeaderView_reset);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setOffsetToLastSection, "setOffsetToLastSection(self)");

extern "C" {static PyObject *meth_QHeaderView_setOffsetToLastSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setOffsetToLastSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            sipCpp->setOffsetToLastSection();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setOffsetToLastSection, doc_QHeaderView_setOffsetToLastSection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_initStyleOption, "initStyleOption(self, QStyleOptionHeader)");

extern "C" {static PyObject *meth_QHeaderView_initStyleOption(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_initStyleOption(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QStyleOptionHeader* a0;
        const sipQHeaderView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QStyleOptionHeader, &a0))
        {
            sipCpp->sipProtect_initStyleOption(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_initStyleOption, doc_QHeaderView_initStyleOption);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setSectionsMovable, "setSectionsMovable(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setSectionsMovable(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setSectionsMovable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setSectionsMovable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setSectionsMovable, doc_QHeaderView_setSectionsMovable);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionsMovable, "sectionsMovable(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_sectionsMovable(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionsMovable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sectionsMovable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionsMovable, doc_QHeaderView_sectionsMovable);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setSectionsClickable, "setSectionsClickable(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setSectionsClickable(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setSectionsClickable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setSectionsClickable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setSectionsClickable, doc_QHeaderView_setSectionsClickable);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionsClickable, "sectionsClickable(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_sectionsClickable(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionsClickable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sectionsClickable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionsClickable, doc_QHeaderView_sectionsClickable);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionResizeMode, "sectionResizeMode(self, int) -> QHeaderView.ResizeMode");

extern "C" {static PyObject *meth_QHeaderView_sectionResizeMode(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionResizeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
             ::QHeaderView::ResizeMode sipRes;

            sipRes = sipCpp->sectionResizeMode(a0);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QHeaderView_ResizeMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionResizeMode, doc_QHeaderView_sectionResizeMode);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setSectionResizeMode, "setSectionResizeMode(self, int, QHeaderView.ResizeMode)\n"
"setSectionResizeMode(self, QHeaderView.ResizeMode)");

extern "C" {static PyObject *meth_QHeaderView_setSectionResizeMode(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setSectionResizeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QHeaderView::ResizeMode a1;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, sipType_QHeaderView_ResizeMode, &a1))
        {
            sipCpp->setSectionResizeMode(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QHeaderView::ResizeMode a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QHeaderView_ResizeMode, &a0))
        {
            sipCpp->setSectionResizeMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setSectionResizeMode, doc_QHeaderView_setSectionResizeMode);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setVisible, "setVisible(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QHeaderView::setVisible(a0) : sipCpp->setVisible(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setVisible, doc_QHeaderView_setVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setResizeContentsPrecision, "setResizeContentsPrecision(self, int)");

extern "C" {static PyObject *meth_QHeaderView_setResizeContentsPrecision(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setResizeContentsPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setResizeContentsPrecision(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setResizeContentsPrecision, doc_QHeaderView_setResizeContentsPrecision);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_resizeContentsPrecision, "resizeContentsPrecision(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_resizeContentsPrecision(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_resizeContentsPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->resizeContentsPrecision();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_resizeContentsPrecision, doc_QHeaderView_resizeContentsPrecision);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_maximumSectionSize, "maximumSectionSize(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_maximumSectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_maximumSectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumSectionSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_maximumSectionSize, doc_QHeaderView_maximumSectionSize);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setMaximumSectionSize, "setMaximumSectionSize(self, int)");

extern "C" {static PyObject *meth_QHeaderView_setMaximumSectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setMaximumSectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setMaximumSectionSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setMaximumSectionSize, doc_QHeaderView_setMaximumSectionSize);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_resetDefaultSectionSize, "resetDefaultSectionSize(self)");

extern "C" {static PyObject *meth_QHeaderView_resetDefaultSectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_resetDefaultSectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            sipCpp->resetDefaultSectionSize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_resetDefaultSectionSize, doc_QHeaderView_resetDefaultSectionSize);

    return NULL;
}


extern "C" {static SIP_SSIZE_T slot_QHeaderView___len__(PyObject *);}
static SIP_SSIZE_T slot_QHeaderView___len__(PyObject *sipSelf)
{
     ::QHeaderView *sipCpp = reinterpret_cast< ::QHeaderView *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHeaderView));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

            sipRes = (SIP_SSIZE_T)sipCpp->count();

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QHeaderView(void *, const sipTypeDef *);}
static void *cast_QHeaderView(void *sipCppV, const sipTypeDef *targetType)
{
     ::QHeaderView *sipCpp = reinterpret_cast< ::QHeaderView *>(sipCppV);

    if (targetType == sipType_QAbstractItemView)
        return static_cast< ::QAbstractItemView *>(sipCpp);

    if (targetType == sipType_QAbstractScrollArea)
        return static_cast< ::QAbstractScrollArea *>(sipCpp);

    if (targetType == sipType_QFrame)
        return static_cast< ::QFrame *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHeaderView(void *, int);}
static void release_QHeaderView(void *sipCppV, int)
{
     ::QHeaderView *sipCpp = reinterpret_cast< ::QHeaderView *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QHeaderView(sipSimpleWrapper *);}
static void dealloc_QHeaderView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQHeaderView *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QHeaderView(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QHeaderView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHeaderView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQHeaderView *sipCpp = 0;

    {
         ::Qt::Orientation a0;
         ::QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_Qt_Orientation, &a0, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQHeaderView(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QHeaderView[] = {{4, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QHeaderView[] = {
    {(void *)slot_QHeaderView___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QHeaderView[] = {
    {SIP_MLNAME_CAST(sipName_actionEvent), (PyCFunction)meth_QHeaderView_actionEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_cascadingSectionResizes), meth_QHeaderView_cascadingSectionResizes, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_cascadingSectionResizes)},
    {SIP_MLNAME_CAST(sipName_changeEvent), (PyCFunction)meth_QHeaderView_changeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QHeaderView_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEditor), (PyCFunction)meth_QHeaderView_closeEditor, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEvent), (PyCFunction)meth_QHeaderView_closeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_commitData), (PyCFunction)meth_QHeaderView_commitData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QHeaderView_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), (PyCFunction)meth_QHeaderView_contextMenuEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_count), meth_QHeaderView_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_count)},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QHeaderView_create, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_currentChanged), (PyCFunction)meth_QHeaderView_currentChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_currentChanged)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QHeaderView_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dataChanged), (PyCFunction)meth_QHeaderView_dataChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_dataChanged)},
    {SIP_MLNAME_CAST(sipName_defaultAlignment), meth_QHeaderView_defaultAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_defaultAlignment)},
    {SIP_MLNAME_CAST(sipName_defaultSectionSize), meth_QHeaderView_defaultSectionSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_defaultSectionSize)},
    {SIP_MLNAME_CAST(sipName_destroy), (PyCFunction)meth_QHeaderView_destroy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dirtyRegionOffset), (PyCFunction)meth_QHeaderView_dirtyRegionOffset, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QHeaderView_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QHeaderView_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QHeaderView_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QHeaderView_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawFrame), (PyCFunction)meth_QHeaderView_drawFrame, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QHeaderView_dropEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dropIndicatorPosition), (PyCFunction)meth_QHeaderView_dropIndicatorPosition, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_edit), (PyCFunction)meth_QHeaderView_edit, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_editorDestroyed), (PyCFunction)meth_QHeaderView_editorDestroyed, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_enterEvent), (PyCFunction)meth_QHeaderView_enterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QHeaderView_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_event)},
    {SIP_MLNAME_CAST(sipName_eventFilter), (PyCFunction)meth_QHeaderView_eventFilter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_executeDelayedItemsLayout), (PyCFunction)meth_QHeaderView_executeDelayedItemsLayout, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QHeaderView_focusInEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextChild), (PyCFunction)meth_QHeaderView_focusNextChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), (PyCFunction)meth_QHeaderView_focusNextPrevChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QHeaderView_focusOutEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), (PyCFunction)meth_QHeaderView_focusPreviousChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_headerDataChanged), meth_QHeaderView_headerDataChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_headerDataChanged)},
    {SIP_MLNAME_CAST(sipName_hiddenSectionCount), meth_QHeaderView_hiddenSectionCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_hiddenSectionCount)},
    {SIP_MLNAME_CAST(sipName_hideEvent), (PyCFunction)meth_QHeaderView_hideEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_hideSection), meth_QHeaderView_hideSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_hideSection)},
    {SIP_MLNAME_CAST(sipName_highlightSections), meth_QHeaderView_highlightSections, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_highlightSections)},
    {SIP_MLNAME_CAST(sipName_horizontalOffset), (PyCFunction)meth_QHeaderView_horizontalOffset, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_horizontalOffset)},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarAction), (PyCFunction)meth_QHeaderView_horizontalScrollbarAction, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarValueChanged), (PyCFunction)meth_QHeaderView_horizontalScrollbarValueChanged, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_indexAt), (PyCFunction)meth_QHeaderView_indexAt, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_indexAt)},
    {SIP_MLNAME_CAST(sipName_initPainter), (PyCFunction)meth_QHeaderView_initPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_initStyleOption), (PyCFunction)meth_QHeaderView_initStyleOption, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_initStyleOption)},
    {SIP_MLNAME_CAST(sipName_initialize), (PyCFunction)meth_QHeaderView_initialize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_initialize)},
    {SIP_MLNAME_CAST(sipName_initializeSections), (PyCFunction)meth_QHeaderView_initializeSections, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_initializeSections)},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QHeaderView_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isIndexHidden), (PyCFunction)meth_QHeaderView_isIndexHidden, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_isIndexHidden)},
    {SIP_MLNAME_CAST(sipName_isSectionHidden), meth_QHeaderView_isSectionHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_isSectionHidden)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QHeaderView_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isSortIndicatorShown), meth_QHeaderView_isSortIndicatorShown, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_isSortIndicatorShown)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QHeaderView_keyPressEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QHeaderView_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_leaveEvent), (PyCFunction)meth_QHeaderView_leaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_length), meth_QHeaderView_length, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_length)},
    {SIP_MLNAME_CAST(sipName_logicalIndex), meth_QHeaderView_logicalIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_logicalIndex)},
    {SIP_MLNAME_CAST(sipName_logicalIndexAt), meth_QHeaderView_logicalIndexAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_logicalIndexAt)},
    {SIP_MLNAME_CAST(sipName_maximumSectionSize), meth_QHeaderView_maximumSectionSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_maximumSectionSize)},
    {SIP_MLNAME_CAST(sipName_metric), (PyCFunction)meth_QHeaderView_metric, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_minimumSectionSize), meth_QHeaderView_minimumSectionSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_minimumSectionSize)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QHeaderView_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QHeaderView_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QHeaderView_mousePressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QHeaderView_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveCursor), (PyCFunction)meth_QHeaderView_moveCursor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_moveCursor)},
    {SIP_MLNAME_CAST(sipName_moveEvent), (PyCFunction)meth_QHeaderView_moveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_moveSection), meth_QHeaderView_moveSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_moveSection)},
    {SIP_MLNAME_CAST(sipName_nativeEvent), (PyCFunction)meth_QHeaderView_nativeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_offset), meth_QHeaderView_offset, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_offset)},
    {SIP_MLNAME_CAST(sipName_orientation), meth_QHeaderView_orientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_orientation)},
    {SIP_MLNAME_CAST(sipName_paintEvent), (PyCFunction)meth_QHeaderView_paintEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_paintEvent)},
    {SIP_MLNAME_CAST(sipName_paintSection), (PyCFunction)meth_QHeaderView_paintSection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_paintSection)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QHeaderView_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_reset), meth_QHeaderView_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_reset)},
    {SIP_MLNAME_CAST(sipName_resetDefaultSectionSize), meth_QHeaderView_resetDefaultSectionSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_resetDefaultSectionSize)},
    {SIP_MLNAME_CAST(sipName_resizeContentsPrecision), meth_QHeaderView_resizeContentsPrecision, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_resizeContentsPrecision)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), (PyCFunction)meth_QHeaderView_resizeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeSection), meth_QHeaderView_resizeSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_resizeSection)},
    {SIP_MLNAME_CAST(sipName_resizeSections), (PyCFunction)meth_QHeaderView_resizeSections, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_resizeSections)},
    {SIP_MLNAME_CAST(sipName_restoreState), meth_QHeaderView_restoreState, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_restoreState)},
    {SIP_MLNAME_CAST(sipName_rowsAboutToBeRemoved), (PyCFunction)meth_QHeaderView_rowsAboutToBeRemoved, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_rowsInserted), (PyCFunction)meth_QHeaderView_rowsInserted, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_rowsInserted)},
    {SIP_MLNAME_CAST(sipName_saveState), meth_QHeaderView_saveState, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_saveState)},
    {SIP_MLNAME_CAST(sipName_scheduleDelayedItemsLayout), (PyCFunction)meth_QHeaderView_scheduleDelayedItemsLayout, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), (PyCFunction)meth_QHeaderView_scrollContentsBy, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_scrollContentsBy)},
    {SIP_MLNAME_CAST(sipName_scrollDirtyRegion), (PyCFunction)meth_QHeaderView_scrollDirtyRegion, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollTo), (PyCFunction)meth_QHeaderView_scrollTo, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_scrollTo)},
    {SIP_MLNAME_CAST(sipName_sectionPosition), meth_QHeaderView_sectionPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sectionPosition)},
    {SIP_MLNAME_CAST(sipName_sectionResizeMode), meth_QHeaderView_sectionResizeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sectionResizeMode)},
    {SIP_MLNAME_CAST(sipName_sectionSize), meth_QHeaderView_sectionSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sectionSize)},
    {SIP_MLNAME_CAST(sipName_sectionSizeFromContents), (PyCFunction)meth_QHeaderView_sectionSizeFromContents, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_sectionSizeFromContents)},
    {SIP_MLNAME_CAST(sipName_sectionSizeHint), meth_QHeaderView_sectionSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sectionSizeHint)},
    {SIP_MLNAME_CAST(sipName_sectionViewportPosition), meth_QHeaderView_sectionViewportPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sectionViewportPosition)},
    {SIP_MLNAME_CAST(sipName_sectionsAboutToBeRemoved), (PyCFunction)meth_QHeaderView_sectionsAboutToBeRemoved, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_sectionsAboutToBeRemoved)},
    {SIP_MLNAME_CAST(sipName_sectionsClickable), meth_QHeaderView_sectionsClickable, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sectionsClickable)},
    {SIP_MLNAME_CAST(sipName_sectionsHidden), meth_QHeaderView_sectionsHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sectionsHidden)},
    {SIP_MLNAME_CAST(sipName_sectionsInserted), (PyCFunction)meth_QHeaderView_sectionsInserted, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_sectionsInserted)},
    {SIP_MLNAME_CAST(sipName_sectionsMovable), meth_QHeaderView_sectionsMovable, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sectionsMovable)},
    {SIP_MLNAME_CAST(sipName_sectionsMoved), meth_QHeaderView_sectionsMoved, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sectionsMoved)},
    {SIP_MLNAME_CAST(sipName_selectedIndexes), (PyCFunction)meth_QHeaderView_selectedIndexes, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_selectionChanged), (PyCFunction)meth_QHeaderView_selectionChanged, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_selectionCommand), (PyCFunction)meth_QHeaderView_selectionCommand, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QHeaderView_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QHeaderView_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setCascadingSectionResizes), meth_QHeaderView_setCascadingSectionResizes, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setCascadingSectionResizes)},
    {SIP_MLNAME_CAST(sipName_setDefaultAlignment), meth_QHeaderView_setDefaultAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setDefaultAlignment)},
    {SIP_MLNAME_CAST(sipName_setDefaultSectionSize), meth_QHeaderView_setDefaultSectionSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setDefaultSectionSize)},
    {SIP_MLNAME_CAST(sipName_setDirtyRegion), (PyCFunction)meth_QHeaderView_setDirtyRegion, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setHighlightSections), meth_QHeaderView_setHighlightSections, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setHighlightSections)},
    {SIP_MLNAME_CAST(sipName_setMaximumSectionSize), meth_QHeaderView_setMaximumSectionSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setMaximumSectionSize)},
    {SIP_MLNAME_CAST(sipName_setMinimumSectionSize), meth_QHeaderView_setMinimumSectionSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setMinimumSectionSize)},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QHeaderView_setModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setModel)},
    {SIP_MLNAME_CAST(sipName_setOffset), meth_QHeaderView_setOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setOffset)},
    {SIP_MLNAME_CAST(sipName_setOffsetToLastSection), meth_QHeaderView_setOffsetToLastSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setOffsetToLastSection)},
    {SIP_MLNAME_CAST(sipName_setOffsetToSectionPosition), meth_QHeaderView_setOffsetToSectionPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setOffsetToSectionPosition)},
    {SIP_MLNAME_CAST(sipName_setResizeContentsPrecision), meth_QHeaderView_setResizeContentsPrecision, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setResizeContentsPrecision)},
    {SIP_MLNAME_CAST(sipName_setSectionHidden), meth_QHeaderView_setSectionHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setSectionHidden)},
    {SIP_MLNAME_CAST(sipName_setSectionResizeMode), meth_QHeaderView_setSectionResizeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setSectionResizeMode)},
    {SIP_MLNAME_CAST(sipName_setSectionsClickable), meth_QHeaderView_setSectionsClickable, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setSectionsClickable)},
    {SIP_MLNAME_CAST(sipName_setSectionsMovable), meth_QHeaderView_setSectionsMovable, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setSectionsMovable)},
    {SIP_MLNAME_CAST(sipName_setSelection), (PyCFunction)meth_QHeaderView_setSelection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_setSelection)},
    {SIP_MLNAME_CAST(sipName_setSortIndicator), meth_QHeaderView_setSortIndicator, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setSortIndicator)},
    {SIP_MLNAME_CAST(sipName_setSortIndicatorShown), meth_QHeaderView_setSortIndicatorShown, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setSortIndicatorShown)},
    {SIP_MLNAME_CAST(sipName_setState), (PyCFunction)meth_QHeaderView_setState, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setStretchLastSection), meth_QHeaderView_setStretchLastSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setStretchLastSection)},
    {SIP_MLNAME_CAST(sipName_setViewportMargins), (PyCFunction)meth_QHeaderView_setViewportMargins, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setVisible), meth_QHeaderView_setVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setVisible)},
    {SIP_MLNAME_CAST(sipName_sharedPainter), (PyCFunction)meth_QHeaderView_sharedPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), (PyCFunction)meth_QHeaderView_showEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_showSection), meth_QHeaderView_showSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_showSection)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QHeaderView_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sizeHint)},
    {SIP_MLNAME_CAST(sipName_sortIndicatorOrder), meth_QHeaderView_sortIndicatorOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sortIndicatorOrder)},
    {SIP_MLNAME_CAST(sipName_sortIndicatorSection), meth_QHeaderView_sortIndicatorSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sortIndicatorSection)},
    {SIP_MLNAME_CAST(sipName_startDrag), (PyCFunction)meth_QHeaderView_startDrag, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_state), (PyCFunction)meth_QHeaderView_state, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_stretchLastSection), meth_QHeaderView_stretchLastSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_stretchLastSection)},
    {SIP_MLNAME_CAST(sipName_stretchSectionCount), meth_QHeaderView_stretchSectionCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_stretchSectionCount)},
    {SIP_MLNAME_CAST(sipName_swapSections), meth_QHeaderView_swapSections, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_swapSections)},
    {SIP_MLNAME_CAST(sipName_tabletEvent), (PyCFunction)meth_QHeaderView_tabletEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QHeaderView_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateEditorData), (PyCFunction)meth_QHeaderView_updateEditorData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateEditorGeometries), (PyCFunction)meth_QHeaderView_updateEditorGeometries, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateGeometries), (PyCFunction)meth_QHeaderView_updateGeometries, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_updateGeometries)},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), (PyCFunction)meth_QHeaderView_updateMicroFocus, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateSection), (PyCFunction)meth_QHeaderView_updateSection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_updateSection)},
    {SIP_MLNAME_CAST(sipName_verticalOffset), (PyCFunction)meth_QHeaderView_verticalOffset, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_verticalOffset)},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarAction), (PyCFunction)meth_QHeaderView_verticalScrollbarAction, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarValueChanged), (PyCFunction)meth_QHeaderView_verticalScrollbarValueChanged, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_viewOptions), (PyCFunction)meth_QHeaderView_viewOptions, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_viewportEvent), (PyCFunction)meth_QHeaderView_viewportEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_viewportEvent)},
    {SIP_MLNAME_CAST(sipName_viewportMargins), (PyCFunction)meth_QHeaderView_viewportMargins, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_viewportSizeHint), (PyCFunction)meth_QHeaderView_viewportSizeHint, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_visualIndex), meth_QHeaderView_visualIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_visualIndex)},
    {SIP_MLNAME_CAST(sipName_visualIndexAt), meth_QHeaderView_visualIndexAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_visualIndexAt)},
    {SIP_MLNAME_CAST(sipName_visualRect), (PyCFunction)meth_QHeaderView_visualRect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_visualRect)},
    {SIP_MLNAME_CAST(sipName_visualRegionForSelection), (PyCFunction)meth_QHeaderView_visualRegionForSelection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_visualRegionForSelection)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QHeaderView_wheelEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};

static sipEnumMemberDef enummembers_QHeaderView[] = {
    {sipName_Custom, static_cast<int>( ::QHeaderView::Custom), 173},
    {sipName_Fixed, static_cast<int>( ::QHeaderView::Fixed), 173},
    {sipName_Interactive, static_cast<int>( ::QHeaderView::Interactive), 173},
    {sipName_ResizeToContents, static_cast<int>( ::QHeaderView::ResizeToContents), 173},
    {sipName_Stretch, static_cast<int>( ::QHeaderView::Stretch), 173},
};

PyDoc_STRVAR(doc_QHeaderView, "\1QHeaderView(Qt.Orientation, parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QHeaderView[] = {
    {"sortIndicatorChanged(int,SortOrder)", "\1sortIndicatorChanged(self, int, Qt.SortOrder)", 0, 0},
    {"sectionEntered(int)", "\1sectionEntered(self, int)", 0, 0},
    {"sectionHandleDoubleClicked(int)", "\1sectionHandleDoubleClicked(self, int)", 0, 0},
    {"sectionCountChanged(int,int)", "\1sectionCountChanged(self, int, int)", 0, 0},
    {"sectionDoubleClicked(int)", "\1sectionDoubleClicked(self, int)", 0, 0},
    {"sectionClicked(int)", "\1sectionClicked(self, int)", 0, 0},
    {"sectionPressed(int)", "\1sectionPressed(self, int)", 0, 0},
    {"sectionResized(int,int,int)", "\1sectionResized(self, int, int, int)", 0, 0},
    {"sectionMoved(int,int,int)", "\1sectionMoved(self, int, int, int)", 0, 0},
    {"geometriesChanged()", "\1geometriesChanged(self)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QHeaderView = {
    & ::QHeaderView::staticMetaObject,
    0,
    signals_QHeaderView,
    0
};


sipClassTypeDef sipTypeDef_QtWidgets_QHeaderView = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QHeaderView,
        {0},
        &plugin_QHeaderView
    },
    {
        sipNameNr_QHeaderView,
        {0, 0, 1},
        160, methods_QHeaderView,
        5, enummembers_QHeaderView,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QHeaderView,
    -1,
    -1,
    supers_QHeaderView,
    slots_QHeaderView,
    init_type_QHeaderView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QHeaderView,
    0,
    0,
    0,
    release_QHeaderView,
    cast_QHeaderView,
    0,
    0,
    0,
    0,
    0,
    0
};
