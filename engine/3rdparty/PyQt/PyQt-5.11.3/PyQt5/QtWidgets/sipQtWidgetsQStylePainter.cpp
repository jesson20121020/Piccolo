/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#include <qstylepainter.h>

#include <qwidget.h>
#include <qpaintdevice.h>
#include <qrect.h>
#include <qpixmap.h>
#include <qpalette.h>
#include <qstring.h>
#include <qstyle.h>
#include <qstyleoption.h>
#include <qstyleoption.h>
#include <qpoint.h>
#include <qglyphrun.h>
#include <qrect.h>
#include <qstatictext.h>
#include <qpoint.h>
#include <qpainter.h>
#include <qnamespace.h>
#include <qpainter.h>
#include <qtransform.h>
#include <qimage.h>
#include <qnamespace.h>
#include <qline.h>
#include <qline.h>
#include <qpaintengine.h>
#include <qpainter.h>
#include <qbrush.h>
#include <qcolor.h>
#include <qtextoption.h>
#include <qpicture.h>
#include <qpolygon.h>
#include <qpolygon.h>
#include <qvector.h>
#include <qvector.h>
#include <qvector.h>
#include <qvector.h>
#include <qvector.h>
#include <qvector.h>
#include <qpainterpath.h>
#include <qpen.h>
#include <qregion.h>
#include <qfontinfo.h>
#include <qfontmetrics.h>
#include <qfont.h>


PyDoc_STRVAR(doc_QStylePainter_begin, "begin(self, QWidget) -> bool\n"
"begin(self, QPaintDevice, QWidget) -> bool");

extern "C" {static PyObject *meth_QStylePainter_begin(PyObject *, PyObject *);}
static PyObject *meth_QStylePainter_begin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0;
         ::QStylePainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QStylePainter, &sipCpp, sipType_QWidget, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->begin(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QPaintDevice* a0;
         ::QWidget* a1;
         ::QStylePainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QStylePainter, &sipCpp, sipType_QPaintDevice, &a0, sipType_QWidget, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->begin(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStylePainter, sipName_begin, doc_QStylePainter_begin);

    return NULL;
}


PyDoc_STRVAR(doc_QStylePainter_style, "style(self) -> QStyle");

extern "C" {static PyObject *meth_QStylePainter_style(PyObject *, PyObject *);}
static PyObject *meth_QStylePainter_style(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QStylePainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStylePainter, &sipCpp))
        {
             ::QStyle*sipRes;

            sipRes = sipCpp->style();

            return sipConvertFromType(sipRes,sipType_QStyle,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStylePainter, sipName_style, doc_QStylePainter_style);

    return NULL;
}


PyDoc_STRVAR(doc_QStylePainter_drawPrimitive, "drawPrimitive(self, QStyle.PrimitiveElement, QStyleOption)");

extern "C" {static PyObject *meth_QStylePainter_drawPrimitive(PyObject *, PyObject *);}
static PyObject *meth_QStylePainter_drawPrimitive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QStyle::PrimitiveElement a0;
        const  ::QStyleOption* a1;
         ::QStylePainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_QStylePainter, &sipCpp, sipType_QStyle_PrimitiveElement, &a0, sipType_QStyleOption, &a1))
        {
            sipCpp->drawPrimitive(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStylePainter, sipName_drawPrimitive, doc_QStylePainter_drawPrimitive);

    return NULL;
}


PyDoc_STRVAR(doc_QStylePainter_drawControl, "drawControl(self, QStyle.ControlElement, QStyleOption)");

extern "C" {static PyObject *meth_QStylePainter_drawControl(PyObject *, PyObject *);}
static PyObject *meth_QStylePainter_drawControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QStyle::ControlElement a0;
        const  ::QStyleOption* a1;
         ::QStylePainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_QStylePainter, &sipCpp, sipType_QStyle_ControlElement, &a0, sipType_QStyleOption, &a1))
        {
            sipCpp->drawControl(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStylePainter, sipName_drawControl, doc_QStylePainter_drawControl);

    return NULL;
}


PyDoc_STRVAR(doc_QStylePainter_drawComplexControl, "drawComplexControl(self, QStyle.ComplexControl, QStyleOptionComplex)");

extern "C" {static PyObject *meth_QStylePainter_drawComplexControl(PyObject *, PyObject *);}
static PyObject *meth_QStylePainter_drawComplexControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QStyle::ComplexControl a0;
        const  ::QStyleOptionComplex* a1;
         ::QStylePainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_QStylePainter, &sipCpp, sipType_QStyle_ComplexControl, &a0, sipType_QStyleOptionComplex, &a1))
        {
            sipCpp->drawComplexControl(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStylePainter, sipName_drawComplexControl, doc_QStylePainter_drawComplexControl);

    return NULL;
}


PyDoc_STRVAR(doc_QStylePainter_drawItemText, "drawItemText(self, QRect, int, QPalette, bool, str, textRole: QPalette.ColorRole = QPalette.NoRole)");

extern "C" {static PyObject *meth_QStylePainter_drawItemText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStylePainter_drawItemText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QRect* a0;
        int a1;
        const  ::QPalette* a2;
        bool a3;
        const  ::QString* a4;
        int a4State = 0;
         ::QPalette::ColorRole a5 = QPalette::NoRole;
         ::QStylePainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_textRole,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9iJ9bJ1|E", &sipSelf, sipType_QStylePainter, &sipCpp, sipType_QRect, &a0, &a1, sipType_QPalette, &a2, &a3, sipType_QString,&a4, &a4State, sipType_QPalette_ColorRole, &a5))
        {
            sipCpp->drawItemText(*a0,a1,*a2,a3,*a4,a5);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStylePainter, sipName_drawItemText, doc_QStylePainter_drawItemText);

    return NULL;
}


PyDoc_STRVAR(doc_QStylePainter_drawItemPixmap, "drawItemPixmap(self, QRect, int, QPixmap)");

extern "C" {static PyObject *meth_QStylePainter_drawItemPixmap(PyObject *, PyObject *);}
static PyObject *meth_QStylePainter_drawItemPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QRect* a0;
        int a1;
        const  ::QPixmap* a2;
         ::QStylePainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9iJ9", &sipSelf, sipType_QStylePainter, &sipCpp, sipType_QRect, &a0, &a1, sipType_QPixmap, &a2))
        {
            sipCpp->drawItemPixmap(*a0,a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStylePainter, sipName_drawItemPixmap, doc_QStylePainter_drawItemPixmap);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QStylePainter(void *, const sipTypeDef *);}
static void *cast_QStylePainter(void *sipCppV, const sipTypeDef *targetType)
{
     ::QStylePainter *sipCpp = reinterpret_cast< ::QStylePainter *>(sipCppV);

    if (targetType == sipType_QPainter)
        return static_cast< ::QPainter *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStylePainter(void *, int);}
static void release_QStylePainter(void *sipCppV, int)
{
    delete reinterpret_cast< ::QStylePainter *>(sipCppV);
}


extern "C" {static void dealloc_QStylePainter(sipSimpleWrapper *);}
static void dealloc_QStylePainter(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QStylePainter(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QStylePainter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStylePainter(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QStylePainter *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::QStylePainter();

            return sipCpp;
        }
    }

    {
         ::QWidget* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QWidget, &a0))
        {
            sipCpp = new  ::QStylePainter(a0);

            return sipCpp;
        }
    }

    {
         ::QPaintDevice* a0;
         ::QWidget* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8J8", sipType_QPaintDevice, &a0, sipType_QWidget, &a1))
        {
            sipCpp = new  ::QStylePainter(a0,a1);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QStylePainter[] = {{39, 1, 1}};


static PyMethodDef methods_QStylePainter[] = {
    {SIP_MLNAME_CAST(sipName_begin), meth_QStylePainter_begin, METH_VARARGS, SIP_MLDOC_CAST(doc_QStylePainter_begin)},
    {SIP_MLNAME_CAST(sipName_drawComplexControl), meth_QStylePainter_drawComplexControl, METH_VARARGS, SIP_MLDOC_CAST(doc_QStylePainter_drawComplexControl)},
    {SIP_MLNAME_CAST(sipName_drawControl), meth_QStylePainter_drawControl, METH_VARARGS, SIP_MLDOC_CAST(doc_QStylePainter_drawControl)},
    {SIP_MLNAME_CAST(sipName_drawItemPixmap), meth_QStylePainter_drawItemPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QStylePainter_drawItemPixmap)},
    {SIP_MLNAME_CAST(sipName_drawItemText), (PyCFunction)meth_QStylePainter_drawItemText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStylePainter_drawItemText)},
    {SIP_MLNAME_CAST(sipName_drawPrimitive), meth_QStylePainter_drawPrimitive, METH_VARARGS, SIP_MLDOC_CAST(doc_QStylePainter_drawPrimitive)},
    {SIP_MLNAME_CAST(sipName_style), meth_QStylePainter_style, METH_VARARGS, SIP_MLDOC_CAST(doc_QStylePainter_style)}
};

PyDoc_STRVAR(doc_QStylePainter, "\1QStylePainter()\n"
"QStylePainter(QWidget)\n"
"QStylePainter(QPaintDevice, QWidget)");


static pyqt5ClassPluginDef plugin_QStylePainter = {
    0,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtWidgets_QStylePainter = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QStylePainter,
        {0},
        &plugin_QStylePainter
    },
    {
        sipNameNr_QStylePainter,
        {0, 0, 1},
        7, methods_QStylePainter,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QStylePainter,
    -1,
    -1,
    supers_QStylePainter,
    0,
    init_type_QStylePainter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QStylePainter,
    0,
    0,
    0,
    release_QStylePainter,
    cast_QStylePainter,
    0,
    0,
    0,
    0,
    0,
    0
};
