/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#include <qgraphicseffect.h>

#include <qobject.h>
#include <qpainter.h>
#include <qcolor.h>
#include <qpixmap.h>
#include <qnamespace.h>
#include <qpoint.h>
#include <qgraphicseffect.h>
#include <qrect.h>
#include <qgraphicseffect.h>
#include <qmetaobject.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qstring.h>
#include <qvariant.h>
#include <qlist.h>
#include <qbytearray.h>
#include <qlist.h>
#include <qthread.h>
#include <qnamespace.h>
#include <qregexp.h>
#include <qregularexpression.h>
#include <qobjectdefs.h>


class sipQGraphicsColorizeEffect : public  ::QGraphicsColorizeEffect
{
public:
    sipQGraphicsColorizeEffect( ::QObject*);
    virtual ~sipQGraphicsColorizeEffect();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const  ::QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const  ::QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const  ::QMetaMethod&) const;
    void sipProtectVirt_sourceChanged(bool, ::QGraphicsEffect::ChangeFlags);
    void sipProtect_updateBoundingRect();
    bool sipProtect_sourceIsPixmap() const;
     ::QRectF sipProtect_sourceBoundingRect( ::Qt::CoordinateSystem) const;
    void sipProtect_drawSource( ::QPainter*);
     ::QPixmap sipProtect_sourcePixmap( ::Qt::CoordinateSystem, ::QPoint*, ::QGraphicsEffect::PixmapPadMode) const;
    void sipProtectVirt_draw(bool, ::QPainter*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&);
    void connectNotify(const  ::QMetaMethod&);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
     ::QRectF boundingRectFor(const  ::QRectF&) const;
    void draw( ::QPainter*);
    void sourceChanged( ::QGraphicsEffect::ChangeFlags);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGraphicsColorizeEffect(const sipQGraphicsColorizeEffect &);
    sipQGraphicsColorizeEffect &operator = (const sipQGraphicsColorizeEffect &);

    char sipPyMethods[10];
};

sipQGraphicsColorizeEffect::sipQGraphicsColorizeEffect( ::QObject*a0):  ::QGraphicsColorizeEffect(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGraphicsColorizeEffect::~sipQGraphicsColorizeEffect()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQGraphicsColorizeEffect::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QGraphicsColorizeEffect);

    return  ::QGraphicsColorizeEffect::metaObject();
}

int sipQGraphicsColorizeEffect::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QGraphicsColorizeEffect::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QGraphicsColorizeEffect,_c,_id,_a);

    return _id;
}

void *sipQGraphicsColorizeEffect::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QGraphicsColorizeEffect, _clname, &sipCpp) ? sipCpp :  ::QGraphicsColorizeEffect::qt_metacast(_clname));
}

void sipQGraphicsColorizeEffect::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QGraphicsColorizeEffect::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGraphicsColorizeEffect::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QGraphicsColorizeEffect::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGraphicsColorizeEffect::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QGraphicsColorizeEffect::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGraphicsColorizeEffect::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QGraphicsColorizeEffect::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGraphicsColorizeEffect::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QGraphicsColorizeEffect::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQGraphicsColorizeEffect::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QGraphicsColorizeEffect::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQGraphicsColorizeEffect::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QGraphicsColorizeEffect::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QRectF sipQGraphicsColorizeEffect::boundingRectFor(const  ::QRectF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_boundingRectFor);

    if (!sipMeth)
        return  ::QGraphicsColorizeEffect::boundingRectFor(a0);

    extern  ::QRectF sipVH_QtWidgets_142(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRectF&);

    return sipVH_QtWidgets_142(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGraphicsColorizeEffect::draw( ::QPainter*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_draw);

    if (!sipMeth)
    {
         ::QGraphicsColorizeEffect::draw(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQGraphicsColorizeEffect::sourceChanged( ::QGraphicsEffect::ChangeFlags a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_sourceChanged);

    if (!sipMeth)
    {
         ::QGraphicsColorizeEffect::sourceChanged(a0);
        return;
    }

    extern void sipVH_QtWidgets_143(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsEffect::ChangeFlags);

    sipVH_QtWidgets_143(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQGraphicsColorizeEffect::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipQGraphicsColorizeEffect::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipQGraphicsColorizeEffect::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQGraphicsColorizeEffect::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipQGraphicsColorizeEffect::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipQGraphicsColorizeEffect::sipProtectVirt_connectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQGraphicsColorizeEffect::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQGraphicsColorizeEffect::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}

bool sipQGraphicsColorizeEffect::sipProtect_isSignalConnected(const  ::QMetaMethod& a0) const
{
    return  ::QObject::isSignalConnected(a0);
}

void sipQGraphicsColorizeEffect::sipProtectVirt_sourceChanged(bool sipSelfWasArg, ::QGraphicsEffect::ChangeFlags a0)
{
    (sipSelfWasArg ?  ::QGraphicsEffect::sourceChanged(a0) : sourceChanged(a0));
}

void sipQGraphicsColorizeEffect::sipProtect_updateBoundingRect()
{
     ::QGraphicsEffect::updateBoundingRect();
}

bool sipQGraphicsColorizeEffect::sipProtect_sourceIsPixmap() const
{
    return  ::QGraphicsEffect::sourceIsPixmap();
}

 ::QRectF sipQGraphicsColorizeEffect::sipProtect_sourceBoundingRect( ::Qt::CoordinateSystem a0) const
{
    return  ::QGraphicsEffect::sourceBoundingRect(a0);
}

void sipQGraphicsColorizeEffect::sipProtect_drawSource( ::QPainter*a0)
{
     ::QGraphicsEffect::drawSource(a0);
}

 ::QPixmap sipQGraphicsColorizeEffect::sipProtect_sourcePixmap( ::Qt::CoordinateSystem a0, ::QPoint*a1, ::QGraphicsEffect::PixmapPadMode a2) const
{
    return  ::QGraphicsEffect::sourcePixmap(a0,a1,a2);
}

void sipQGraphicsColorizeEffect::sipProtectVirt_draw(bool sipSelfWasArg, ::QPainter*a0)
{
    (sipSelfWasArg ?  ::QGraphicsColorizeEffect::draw(a0) : draw(a0));
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_sender, "sender(self) -> QObject");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQGraphicsColorizeEffect *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp))
        {
             ::QObject*sipRes = 0;

        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_sender, doc_QGraphicsColorizeEffect_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_receivers, "receivers(self, PYQT_SIGNAL) -> int");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQGraphicsColorizeEffect *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_receivers, doc_QGraphicsColorizeEffect_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipQGraphicsColorizeEffect *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_timerEvent, doc_QGraphicsColorizeEffect_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_childEvent, "childEvent(self, QChildEvent)");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipQGraphicsColorizeEffect *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_childEvent, doc_QGraphicsColorizeEffect_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_customEvent, "customEvent(self, QEvent)");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQGraphicsColorizeEffect *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_customEvent, doc_QGraphicsColorizeEffect_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_connectNotify, "connectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQGraphicsColorizeEffect *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_connectNotify, doc_QGraphicsColorizeEffect_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_disconnectNotify, "disconnectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQGraphicsColorizeEffect *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_disconnectNotify, doc_QGraphicsColorizeEffect_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_senderSignalIndex, "senderSignalIndex(self) -> int");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQGraphicsColorizeEffect *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_senderSignalIndex, doc_QGraphicsColorizeEffect_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_isSignalConnected, "isSignalConnected(self, QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMetaMethod* a0;
        const sipQGraphicsColorizeEffect *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_isSignalConnected, doc_QGraphicsColorizeEffect_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_sourceChanged, "sourceChanged(self, Union[QGraphicsEffect.ChangeFlags, QGraphicsEffect.ChangeFlag])");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_sourceChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_sourceChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGraphicsEffect::ChangeFlags* a0;
        int a0State = 0;
        sipQGraphicsColorizeEffect *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp, sipType_QGraphicsEffect_ChangeFlags, &a0, &a0State))
        {
            sipCpp->sipProtectVirt_sourceChanged(sipSelfWasArg,*a0);
            sipReleaseType(a0,sipType_QGraphicsEffect_ChangeFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_sourceChanged, doc_QGraphicsColorizeEffect_sourceChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_updateBoundingRect, "updateBoundingRect(self)");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_updateBoundingRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_updateBoundingRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQGraphicsColorizeEffect *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp))
        {
            sipCpp->sipProtect_updateBoundingRect();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_updateBoundingRect, doc_QGraphicsColorizeEffect_updateBoundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_sourceIsPixmap, "sourceIsPixmap(self) -> bool");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_sourceIsPixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_sourceIsPixmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQGraphicsColorizeEffect *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_sourceIsPixmap();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_sourceIsPixmap, doc_QGraphicsColorizeEffect_sourceIsPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_sourceBoundingRect, "sourceBoundingRect(self, system: Qt.CoordinateSystem = Qt.LogicalCoordinates) -> QRectF");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_sourceBoundingRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_sourceBoundingRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::CoordinateSystem a0 = Qt::LogicalCoordinates;
        const sipQGraphicsColorizeEffect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_system,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp, sipType_Qt_CoordinateSystem, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->sipProtect_sourceBoundingRect(a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_sourceBoundingRect, doc_QGraphicsColorizeEffect_sourceBoundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_drawSource, "drawSource(self, QPainter)");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_drawSource(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_drawSource(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPainter* a0;
        sipQGraphicsColorizeEffect *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtect_drawSource(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_drawSource, doc_QGraphicsColorizeEffect_drawSource);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_sourcePixmap, "sourcePixmap(self, system: Qt.CoordinateSystem = Qt.LogicalCoordinates, mode: QGraphicsEffect.PixmapPadMode = QGraphicsEffect.PadToEffectiveBoundingRect) -> Tuple[QPixmap, QPoint]");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_sourcePixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_sourcePixmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::CoordinateSystem a0 = Qt::LogicalCoordinates;
         ::QPoint* a1;
         ::QGraphicsEffect::PixmapPadMode a2 = QGraphicsEffect::PadToEffectiveBoundingRect;
        const sipQGraphicsColorizeEffect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_system,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|EE", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp, sipType_Qt_CoordinateSystem, &a0, sipType_QGraphicsEffect_PixmapPadMode, &a2))
        {
             ::QPixmap*sipRes;
            a1 = new  ::QPoint();

            sipRes = new  ::QPixmap(sipCpp->sipProtect_sourcePixmap(a0,a1,a2));

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
            return sipBuildResult(0,"(RN)",sipResObj,a1,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_sourcePixmap, doc_QGraphicsColorizeEffect_sourcePixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_color, "color(self) -> QColor");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_color(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGraphicsColorizeEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp))
        {
             ::QColor*sipRes;

            sipRes = new  ::QColor(sipCpp->color());

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_color, doc_QGraphicsColorizeEffect_color);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_strength, "strength(self) -> float");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_strength(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_strength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGraphicsColorizeEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->strength();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_strength, doc_QGraphicsColorizeEffect_strength);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_setColor, "setColor(self, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_setColor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_setColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QGraphicsColorizeEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_setColor, doc_QGraphicsColorizeEffect_setColor);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_setStrength, "setStrength(self, float)");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_setStrength(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_setStrength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QGraphicsColorizeEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp, &a0))
        {
            sipCpp->setStrength(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_setStrength, doc_QGraphicsColorizeEffect_setStrength);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsColorizeEffect_draw, "draw(self, QPainter)");

extern "C" {static PyObject *meth_QGraphicsColorizeEffect_draw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsColorizeEffect_draw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPainter* a0;
        sipQGraphicsColorizeEffect *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsColorizeEffect, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtectVirt_draw(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsColorizeEffect, sipName_draw, doc_QGraphicsColorizeEffect_draw);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QGraphicsColorizeEffect(void *, const sipTypeDef *);}
static void *cast_QGraphicsColorizeEffect(void *sipCppV, const sipTypeDef *targetType)
{
     ::QGraphicsColorizeEffect *sipCpp = reinterpret_cast< ::QGraphicsColorizeEffect *>(sipCppV);

    if (targetType == sipType_QGraphicsEffect)
        return static_cast< ::QGraphicsEffect *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGraphicsColorizeEffect(void *, int);}
static void release_QGraphicsColorizeEffect(void *sipCppV, int)
{
     ::QGraphicsColorizeEffect *sipCpp = reinterpret_cast< ::QGraphicsColorizeEffect *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QGraphicsColorizeEffect(sipSimpleWrapper *);}
static void dealloc_QGraphicsColorizeEffect(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQGraphicsColorizeEffect *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGraphicsColorizeEffect(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QGraphicsColorizeEffect(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGraphicsColorizeEffect(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGraphicsColorizeEffect *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQGraphicsColorizeEffect(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGraphicsColorizeEffect[] = {{116, 255, 1}};


static PyMethodDef methods_QGraphicsColorizeEffect[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QGraphicsColorizeEffect_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_color), meth_QGraphicsColorizeEffect_color, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsColorizeEffect_color)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QGraphicsColorizeEffect_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QGraphicsColorizeEffect_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QGraphicsColorizeEffect_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_draw), (PyCFunction)meth_QGraphicsColorizeEffect_draw, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsColorizeEffect_draw)},
    {SIP_MLNAME_CAST(sipName_drawSource), (PyCFunction)meth_QGraphicsColorizeEffect_drawSource, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QGraphicsColorizeEffect_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QGraphicsColorizeEffect_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QGraphicsColorizeEffect_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QGraphicsColorizeEffect_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setColor), meth_QGraphicsColorizeEffect_setColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsColorizeEffect_setColor)},
    {SIP_MLNAME_CAST(sipName_setStrength), meth_QGraphicsColorizeEffect_setStrength, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsColorizeEffect_setStrength)},
    {SIP_MLNAME_CAST(sipName_sourceBoundingRect), (PyCFunction)meth_QGraphicsColorizeEffect_sourceBoundingRect, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sourceChanged), (PyCFunction)meth_QGraphicsColorizeEffect_sourceChanged, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sourceIsPixmap), (PyCFunction)meth_QGraphicsColorizeEffect_sourceIsPixmap, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sourcePixmap), (PyCFunction)meth_QGraphicsColorizeEffect_sourcePixmap, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_strength), meth_QGraphicsColorizeEffect_strength, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsColorizeEffect_strength)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QGraphicsColorizeEffect_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateBoundingRect), (PyCFunction)meth_QGraphicsColorizeEffect_updateBoundingRect, METH_VARARGS|METH_KEYWORDS, NULL}
};

PyDoc_STRVAR(doc_QGraphicsColorizeEffect, "\1QGraphicsColorizeEffect(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QGraphicsColorizeEffect[] = {
    {"strengthChanged(qreal)", "\1strengthChanged(self, float)", 0, 0},
    {"colorChanged(QColor)", "\1colorChanged(self, Union[QColor, Qt.GlobalColor, QGradient])", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QGraphicsColorizeEffect = {
    & ::QGraphicsColorizeEffect::staticMetaObject,
    0,
    signals_QGraphicsColorizeEffect,
    0
};


sipClassTypeDef sipTypeDef_QtWidgets_QGraphicsColorizeEffect = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QGraphicsColorizeEffect,
        {0},
        &plugin_QGraphicsColorizeEffect
    },
    {
        sipNameNr_QGraphicsColorizeEffect,
        {0, 0, 1},
        20, methods_QGraphicsColorizeEffect,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGraphicsColorizeEffect,
    -1,
    -1,
    supers_QGraphicsColorizeEffect,
    0,
    init_type_QGraphicsColorizeEffect,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGraphicsColorizeEffect,
    0,
    0,
    0,
    release_QGraphicsColorizeEffect,
    cast_QGraphicsColorizeEffect,
    0,
    0,
    0,
    0,
    0,
    0
};
