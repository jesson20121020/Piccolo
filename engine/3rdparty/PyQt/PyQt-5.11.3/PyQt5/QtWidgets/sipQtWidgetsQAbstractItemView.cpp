/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#include <qabstractitemview.h>

#include <qwidget.h>
#include <qabstractitemmodel.h>
#include <qnamespace.h>
#include <qsize.h>
#include <qevent.h>
#include <qvariant.h>
#include <qabstractitemdelegate.h>
#include <qcoreevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qcoreevent.h>
#include <qpoint.h>
#include <qregion.h>
#include <qstyleoption.h>
#include <qnamespace.h>
#include <qitemselectionmodel.h>
#include <qlist.h>
#include <qitemselectionmodel.h>
#include <qrect.h>
#include <qnamespace.h>
#include <qobject.h>
#include <qvector.h>
#include <qstring.h>
#include <qabstractitemview.h>
#include <qitemselectionmodel.h>
#include <qabstractitemmodel.h>
#include <qabstractscrollarea.h>
#include <qlist.h>
#include <qnamespace.h>
#include <qscrollbar.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qmargins.h>
#include <qstyleoption.h>
#include <qpainter.h>
#include <qframe.h>
#include <qicon.h>
#include <qbytearray.h>
#include <qwindow.h>
#include <qnamespace.h>
#include <qpixmap.h>
#include <qnamespace.h>
#include <qnamespace.h>
#include <qgraphicseffect.h>
#include <qgraphicsproxywidget.h>
#include <QtGlobal>
#include <qlocale.h>
#include <qpaintdevice.h>
#include <qwidget.h>
#include <qfontinfo.h>
#include <qfontmetrics.h>
#include <qfont.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qevent.h>
#include <qpaintengine.h>
#include <qlist.h>
#include <qaction.h>
#include <qlayout.h>
#include <qsizepolicy.h>
#include <qnamespace.h>
#include <qkeysequence.h>
#include <qcursor.h>
#include <qbitmap.h>
#include <qpalette.h>
#include <qstyle.h>
#include <qmetaobject.h>
#include <qcoreevent.h>
#include <qlist.h>
#include <qlist.h>
#include <qthread.h>
#include <qnamespace.h>
#include <qregexp.h>
#include <qregularexpression.h>
#include <qobjectdefs.h>


class sipQAbstractItemView : public  ::QAbstractItemView
{
public:
    sipQAbstractItemView( ::QWidget*);
    virtual ~sipQAbstractItemView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /* Expose this protected enum. */
    enum sipDropIndicatorPosition {
        OnItem =  ::QAbstractItemView::OnItem,
        AboveItem =  ::QAbstractItemView::AboveItem,
        BelowItem =  ::QAbstractItemView::BelowItem,
        OnViewport =  ::QAbstractItemView::OnViewport
    };

    /* Expose this protected enum. */
    enum sipState {
        NoState =  ::QAbstractItemView::NoState,
        DraggingState =  ::QAbstractItemView::DraggingState,
        DragSelectingState =  ::QAbstractItemView::DragSelectingState,
        EditingState =  ::QAbstractItemView::EditingState,
        ExpandingState =  ::QAbstractItemView::ExpandingState,
        CollapsingState =  ::QAbstractItemView::CollapsingState,
        AnimatingState =  ::QAbstractItemView::AnimatingState
    };

    /* Expose this protected enum. */
    enum sipCursorAction {
        MoveUp =  ::QAbstractItemView::MoveUp,
        MoveDown =  ::QAbstractItemView::MoveDown,
        MoveLeft =  ::QAbstractItemView::MoveLeft,
        MoveRight =  ::QAbstractItemView::MoveRight,
        MoveHome =  ::QAbstractItemView::MoveHome,
        MoveEnd =  ::QAbstractItemView::MoveEnd,
        MovePageUp =  ::QAbstractItemView::MovePageUp,
        MovePageDown =  ::QAbstractItemView::MovePageDown,
        MoveNext =  ::QAbstractItemView::MoveNext,
        MovePrevious =  ::QAbstractItemView::MovePrevious
    };

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const  ::QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const  ::QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const  ::QMetaMethod&) const;
    void sipProtectVirt_keyReleaseEvent(bool, ::QKeyEvent*);
    void sipProtectVirt_enterEvent(bool, ::QEvent*);
    void sipProtectVirt_leaveEvent(bool, ::QEvent*);
    void sipProtectVirt_moveEvent(bool, ::QMoveEvent*);
    void sipProtectVirt_closeEvent(bool, ::QCloseEvent*);
    void sipProtectVirt_tabletEvent(bool, ::QTabletEvent*);
    void sipProtectVirt_actionEvent(bool, ::QActionEvent*);
    void sipProtectVirt_showEvent(bool, ::QShowEvent*);
    void sipProtectVirt_hideEvent(bool, ::QHideEvent*);
    int sipProtectVirt_metric(bool, ::QPaintDevice::PaintDeviceMetric) const;
    void sipProtect_updateMicroFocus();
    void sipProtect_create( ::WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    bool sipProtectVirt_nativeEvent(bool,const  ::QByteArray&,void*,long*);
     ::QPainter* sipProtectVirt_sharedPainter(bool) const;
    void sipProtectVirt_initPainter(bool, ::QPainter*) const;
    void sipProtectVirt_changeEvent(bool, ::QEvent*);
    void sipProtect_drawFrame( ::QPainter*);
    void sipProtect_initStyleOption( ::QStyleOptionFrame*) const;
    void sipProtect_setViewportMargins(int,int,int,int);
    void sipProtect_setViewportMargins(const  ::QMargins&);
     ::QMargins sipProtect_viewportMargins() const;
    void sipProtectVirt_paintEvent(bool, ::QPaintEvent*);
    void sipProtectVirt_wheelEvent(bool, ::QWheelEvent*);
    void sipProtectVirt_contextMenuEvent(bool, ::QContextMenuEvent*);
    bool sipProtectVirt_eventFilter(bool, ::QObject*, ::QEvent*);
    void sipProtectVirt_scrollContentsBy(bool,int,int);
    bool sipProtectVirt_edit(bool,const  ::QModelIndex&, ::QAbstractItemView::EditTrigger, ::QEvent*);
    void sipProtectVirt_dataChanged(bool,const  ::QModelIndex&,const  ::QModelIndex&,const  ::QVector<int>&);
    void sipProtectVirt_rowsInserted(bool,const  ::QModelIndex&,int,int);
    void sipProtectVirt_rowsAboutToBeRemoved(bool,const  ::QModelIndex&,int,int);
    void sipProtectVirt_selectionChanged(bool,const  ::QItemSelection&,const  ::QItemSelection&);
    void sipProtectVirt_currentChanged(bool,const  ::QModelIndex&,const  ::QModelIndex&);
    void sipProtectVirt_updateEditorData(bool);
    void sipProtectVirt_updateEditorGeometries(bool);
    void sipProtectVirt_updateGeometries(bool);
    void sipProtectVirt_verticalScrollbarAction(bool,int);
    void sipProtectVirt_horizontalScrollbarAction(bool,int);
    void sipProtectVirt_verticalScrollbarValueChanged(bool,int);
    void sipProtectVirt_horizontalScrollbarValueChanged(bool,int);
    void sipProtectVirt_closeEditor(bool, ::QWidget*, ::QAbstractItemDelegate::EndEditHint);
    void sipProtectVirt_commitData(bool, ::QWidget*);
    void sipProtectVirt_editorDestroyed(bool, ::QObject*);
     ::QModelIndex sipProtect_moveCursor(int, ::Qt::KeyboardModifiers);
    int sipProtect_horizontalOffset() const;
    int sipProtect_verticalOffset() const;
    bool sipProtect_isIndexHidden(const  ::QModelIndex&) const;
    void sipProtect_setSelection(const  ::QRect&, ::QItemSelectionModel::SelectionFlags);
     ::QRegion sipProtect_visualRegionForSelection(const  ::QItemSelection&) const;
     ::QModelIndexList sipProtectVirt_selectedIndexes(bool) const;
     ::QItemSelectionModel::SelectionFlags sipProtectVirt_selectionCommand(bool,const  ::QModelIndex&,const  ::QEvent*) const;
    void sipProtectVirt_startDrag(bool, ::Qt::DropActions);
     ::QStyleOptionViewItem sipProtectVirt_viewOptions(bool) const;
    int sipProtect_state() const;
    void sipProtect_setState(int);
    void sipProtect_scheduleDelayedItemsLayout();
    void sipProtect_executeDelayedItemsLayout();
    void sipProtect_scrollDirtyRegion(int,int);
    void sipProtect_setDirtyRegion(const  ::QRegion&);
     ::QPoint sipProtect_dirtyRegionOffset() const;
    bool sipProtectVirt_event(bool, ::QEvent*);
    bool sipProtectVirt_viewportEvent(bool, ::QEvent*);
    void sipProtectVirt_mousePressEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_mouseMoveEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_mouseDoubleClickEvent(bool, ::QMouseEvent*);
    void sipProtectVirt_dragEnterEvent(bool, ::QDragEnterEvent*);
    void sipProtectVirt_dragMoveEvent(bool, ::QDragMoveEvent*);
    void sipProtectVirt_dragLeaveEvent(bool, ::QDragLeaveEvent*);
    void sipProtectVirt_dropEvent(bool, ::QDropEvent*);
    void sipProtectVirt_focusInEvent(bool, ::QFocusEvent*);
    void sipProtectVirt_focusOutEvent(bool, ::QFocusEvent*);
    void sipProtectVirt_keyPressEvent(bool, ::QKeyEvent*);
    void sipProtectVirt_resizeEvent(bool, ::QResizeEvent*);
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    int sipProtect_dropIndicatorPosition() const;
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    void sipProtectVirt_inputMethodEvent(bool, ::QInputMethodEvent*);
     ::QSize sipProtectVirt_viewportSizeHint(bool) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QStyleOptionViewItem viewOptions() const;
    void startDrag( ::Qt::DropActions);
     ::QItemSelectionModel::SelectionFlags selectionCommand(const  ::QModelIndex&,const  ::QEvent*) const;
    bool edit(const  ::QModelIndex&, ::QAbstractItemView::EditTrigger, ::QEvent*);
     ::QModelIndexList selectedIndexes() const;
     ::QRegion visualRegionForSelection(const  ::QItemSelection&) const;
    void setSelection(const  ::QRect&, ::QItemSelectionModel::SelectionFlags);
    bool isIndexHidden(const  ::QModelIndex&) const;
    int verticalOffset() const;
    int horizontalOffset() const;
     ::QModelIndex moveCursor( ::QAbstractItemView::CursorAction, ::Qt::KeyboardModifiers);
    void editorDestroyed( ::QObject*);
    void commitData( ::QWidget*);
    void closeEditor( ::QWidget*, ::QAbstractItemDelegate::EndEditHint);
    void horizontalScrollbarValueChanged(int);
    void verticalScrollbarValueChanged(int);
    void horizontalScrollbarAction(int);
    void verticalScrollbarAction(int);
    void updateGeometries();
    void updateEditorGeometries();
    void updateEditorData();
    void currentChanged(const  ::QModelIndex&,const  ::QModelIndex&);
    void selectionChanged(const  ::QItemSelection&,const  ::QItemSelection&);
    void rowsAboutToBeRemoved(const  ::QModelIndex&,int,int);
    void rowsInserted(const  ::QModelIndex&,int,int);
    void dataChanged(const  ::QModelIndex&,const  ::QModelIndex&,const  ::QVector<int>&);
    void selectAll();
    void setRootIndex(const  ::QModelIndex&);
    void reset();
    int sizeHintForColumn(int) const;
    int sizeHintForRow(int) const;
     ::QModelIndex indexAt(const  ::QPoint&) const;
    void scrollTo(const  ::QModelIndex&, ::QAbstractItemView::ScrollHint);
     ::QRect visualRect(const  ::QModelIndex&) const;
    void keyboardSearch(const  ::QString&);
    void setSelectionModel( ::QItemSelectionModel*);
    void setModel( ::QAbstractItemModel*);
    void disconnectNotify(const  ::QMetaMethod&);
    void connectNotify(const  ::QMetaMethod&);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
    int metric( ::QPaintDevice::PaintDeviceMetric) const;
     ::QPaintEngine* paintEngine() const;
    int devType() const;
    void setVisible(bool);
     ::QSize sizeHint() const;
     ::QSize minimumSizeHint() const;
    int heightForWidth(int) const;
    void mousePressEvent( ::QMouseEvent*);
    void mouseReleaseEvent( ::QMouseEvent*);
    void mouseDoubleClickEvent( ::QMouseEvent*);
    void mouseMoveEvent( ::QMouseEvent*);
    void wheelEvent( ::QWheelEvent*);
    void keyPressEvent( ::QKeyEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void focusInEvent( ::QFocusEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void enterEvent( ::QEvent*);
    void leaveEvent( ::QEvent*);
    void paintEvent( ::QPaintEvent*);
    void moveEvent( ::QMoveEvent*);
    void resizeEvent( ::QResizeEvent*);
    void closeEvent( ::QCloseEvent*);
    void contextMenuEvent( ::QContextMenuEvent*);
    void tabletEvent( ::QTabletEvent*);
    void actionEvent( ::QActionEvent*);
    void dragEnterEvent( ::QDragEnterEvent*);
    void dragMoveEvent( ::QDragMoveEvent*);
    void dragLeaveEvent( ::QDragLeaveEvent*);
    void dropEvent( ::QDropEvent*);
    void showEvent( ::QShowEvent*);
    void hideEvent( ::QHideEvent*);
    void changeEvent( ::QEvent*);
    void inputMethodEvent( ::QInputMethodEvent*);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    bool hasHeightForWidth() const;
    bool nativeEvent(const  ::QByteArray&,void*,long*);
     ::QPainter* sharedPainter() const;
    void initPainter( ::QPainter*) const;
     ::QSize viewportSizeHint() const;
    bool viewportEvent( ::QEvent*);
    void scrollContentsBy(int,int);
    void setupViewport( ::QWidget*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractItemView(const sipQAbstractItemView &);
    sipQAbstractItemView &operator = (const sipQAbstractItemView &);

    char sipPyMethods[87];
};

sipQAbstractItemView::sipQAbstractItemView( ::QWidget*a0):  ::QAbstractItemView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractItemView::~sipQAbstractItemView()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAbstractItemView::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QAbstractItemView);

    return  ::QAbstractItemView::metaObject();
}

int sipQAbstractItemView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAbstractItemView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QAbstractItemView,_c,_id,_a);

    return _id;
}

void *sipQAbstractItemView::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QAbstractItemView, _clname, &sipCpp) ? sipCpp :  ::QAbstractItemView::qt_metacast(_clname));
}

 ::QStyleOptionViewItem sipQAbstractItemView::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_viewOptions);

    if (!sipMeth)
        return  ::QAbstractItemView::viewOptions();

    extern  ::QStyleOptionViewItem sipVH_QtWidgets_70(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_70(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQAbstractItemView::startDrag( ::Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_startDrag);

    if (!sipMeth)
    {
         ::QAbstractItemView::startDrag(a0);
        return;
    }

    extern void sipVH_QtWidgets_69(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::DropActions);

    sipVH_QtWidgets_69(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QItemSelectionModel::SelectionFlags sipQAbstractItemView::selectionCommand(const  ::QModelIndex& a0,const  ::QEvent*a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_selectionCommand);

    if (!sipMeth)
        return  ::QAbstractItemView::selectionCommand(a0,a1);

    extern  ::QItemSelectionModel::SelectionFlags sipVH_QtWidgets_68(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QEvent*);

    return sipVH_QtWidgets_68(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractItemView::edit(const  ::QModelIndex& a0, ::QAbstractItemView::EditTrigger a1, ::QEvent*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_edit);

    if (!sipMeth)
        return  ::QAbstractItemView::edit(a0,a1,a2);

    extern bool sipVH_QtWidgets_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&, ::QAbstractItemView::EditTrigger, ::QEvent*);

    return sipVH_QtWidgets_67(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QModelIndexList sipQAbstractItemView::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_selectedIndexes);

    if (!sipMeth)
        return  ::QAbstractItemView::selectedIndexes();

    extern  ::QModelIndexList sipVH_QtWidgets_66(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_66(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QRegion sipQAbstractItemView::visualRegionForSelection(const  ::QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,sipName_QAbstractItemView,sipName_visualRegionForSelection);

    if (!sipMeth)
        return  ::QRegion();

    extern  ::QRegion sipVH_QtWidgets_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QItemSelection&);

    return sipVH_QtWidgets_65(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::setSelection(const  ::QRect& a0, ::QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,sipName_QAbstractItemView,sipName_setSelection);

    if (!sipMeth)
        return;

    extern void sipVH_QtWidgets_64(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRect&, ::QItemSelectionModel::SelectionFlags);

    sipVH_QtWidgets_64(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractItemView::isIndexHidden(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,sipName_QAbstractItemView,sipName_isIndexHidden);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtWidgets_63(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtWidgets_63(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQAbstractItemView::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,sipName_QAbstractItemView,sipName_verticalOffset);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQAbstractItemView::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,sipName_QAbstractItemView,sipName_horizontalOffset);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QModelIndex sipQAbstractItemView::moveCursor( ::QAbstractItemView::CursorAction a0, ::Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,sipName_QAbstractItemView,sipName_moveCursor);

    if (!sipMeth)
        return  ::QModelIndex();

    extern  ::QModelIndex sipVH_QtWidgets_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::KeyboardModifiers);

    return sipVH_QtWidgets_62(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, (int)a0, a1);
}

void sipQAbstractItemView::editorDestroyed( ::QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_editorDestroyed);

    if (!sipMeth)
    {
         ::QAbstractItemView::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtWidgets_61(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*);

    sipVH_QtWidgets_61(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::commitData( ::QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_commitData);

    if (!sipMeth)
    {
         ::QAbstractItemView::commitData(a0);
        return;
    }

    extern void sipVH_QtWidgets_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    sipVH_QtWidgets_47(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::closeEditor( ::QWidget*a0, ::QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_closeEditor);

    if (!sipMeth)
    {
         ::QAbstractItemView::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*, ::QAbstractItemDelegate::EndEditHint);

    sipVH_QtWidgets_60(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractItemView::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_horizontalScrollbarValueChanged);

    if (!sipMeth)
    {
         ::QAbstractItemView::horizontalScrollbarValueChanged(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_verticalScrollbarValueChanged);

    if (!sipMeth)
    {
         ::QAbstractItemView::verticalScrollbarValueChanged(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_horizontalScrollbarAction);

    if (!sipMeth)
    {
         ::QAbstractItemView::horizontalScrollbarAction(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_verticalScrollbarAction);

    if (!sipMeth)
    {
         ::QAbstractItemView::verticalScrollbarAction(a0);
        return;
    }

    extern void sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWidgets_59(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_updateGeometries);

    if (!sipMeth)
    {
         ::QAbstractItemView::updateGeometries();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQAbstractItemView::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_updateEditorGeometries);

    if (!sipMeth)
    {
         ::QAbstractItemView::updateEditorGeometries();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQAbstractItemView::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_updateEditorData);

    if (!sipMeth)
    {
         ::QAbstractItemView::updateEditorData();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQAbstractItemView::currentChanged(const  ::QModelIndex& a0,const  ::QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_currentChanged);

    if (!sipMeth)
    {
         ::QAbstractItemView::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QModelIndex&);

    sipVH_QtWidgets_58(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractItemView::selectionChanged(const  ::QItemSelection& a0,const  ::QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_selectionChanged);

    if (!sipMeth)
    {
         ::QAbstractItemView::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QItemSelection&,const  ::QItemSelection&);

    sipVH_QtWidgets_57(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractItemView::rowsAboutToBeRemoved(const  ::QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_rowsAboutToBeRemoved);

    if (!sipMeth)
    {
         ::QAbstractItemView::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int);

    sipVH_QtWidgets_56(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQAbstractItemView::rowsInserted(const  ::QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_rowsInserted);

    if (!sipMeth)
    {
         ::QAbstractItemView::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int);

    sipVH_QtWidgets_56(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQAbstractItemView::dataChanged(const  ::QModelIndex& a0,const  ::QModelIndex& a1,const  ::QVector<int>& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_dataChanged);

    if (!sipMeth)
    {
         ::QAbstractItemView::dataChanged(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QModelIndex&,const  ::QVector<int>&);

    sipVH_QtWidgets_55(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQAbstractItemView::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_selectAll);

    if (!sipMeth)
    {
         ::QAbstractItemView::selectAll();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQAbstractItemView::setRootIndex(const  ::QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_setRootIndex);

    if (!sipMeth)
    {
         ::QAbstractItemView::setRootIndex(a0);
        return;
    }

    extern void sipVH_QtWidgets_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    sipVH_QtWidgets_54(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
    {
         ::QAbstractItemView::reset();
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWidgets_37(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQAbstractItemView::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_sizeHintForColumn);

    if (!sipMeth)
        return  ::QAbstractItemView::sizeHintForColumn(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQAbstractItemView::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_sizeHintForRow);

    if (!sipMeth)
        return  ::QAbstractItemView::sizeHintForRow(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQAbstractItemView::indexAt(const  ::QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,sipName_QAbstractItemView,sipName_indexAt);

    if (!sipMeth)
        return  ::QModelIndex();

    extern  ::QModelIndex sipVH_QtWidgets_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPoint&);

    return sipVH_QtWidgets_53(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::scrollTo(const  ::QModelIndex& a0, ::QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,sipName_QAbstractItemView,sipName_scrollTo);

    if (!sipMeth)
        return;

    extern void sipVH_QtWidgets_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&, ::QAbstractItemView::ScrollHint);

    sipVH_QtWidgets_52(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::QRect sipQAbstractItemView::visualRect(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,sipName_QAbstractItemView,sipName_visualRect);

    if (!sipMeth)
        return  ::QRect();

    extern  ::QRect sipVH_QtWidgets_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtWidgets_51(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::keyboardSearch(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_keyboardSearch);

    if (!sipMeth)
    {
         ::QAbstractItemView::keyboardSearch(a0);
        return;
    }

    extern void sipVH_QtWidgets_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    sipVH_QtWidgets_50(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::setSelectionModel( ::QItemSelectionModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_setSelectionModel);

    if (!sipMeth)
    {
         ::QAbstractItemView::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtWidgets_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QItemSelectionModel*);

    sipVH_QtWidgets_49(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::setModel( ::QAbstractItemModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_setModel);

    if (!sipMeth)
    {
         ::QAbstractItemView::setModel(a0);
        return;
    }

    extern void sipVH_QtWidgets_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractItemModel*);

    sipVH_QtWidgets_48(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QAbstractItemView::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QAbstractItemView::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::customEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::childEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQAbstractItemView::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QAbstractItemView::eventFilter(a0,a1);

    extern bool sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractItemView::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QAbstractItemView::event(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQAbstractItemView::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return  ::QAbstractItemView::metric(a0);

    extern int sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQAbstractItemView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return  ::QAbstractItemView::paintEngine();

    extern  ::QPaintEngine* sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQAbstractItemView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return  ::QAbstractItemView::devType();

    extern int sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQAbstractItemView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
         ::QAbstractItemView::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQAbstractItemView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[48]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::QAbstractItemView::sizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQAbstractItemView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[49]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::QAbstractItemView::minimumSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQAbstractItemView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[50]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QAbstractItemView::heightForWidth(a0);

    extern int sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[58],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[59],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[60],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::enterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[61],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[62],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtWidgets_16(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[63],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtWidgets_17(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[64],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtWidgets_18(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[65],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWidgets_19(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[66],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtWidgets_20(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[67],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[68],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[69],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtWidgets_23(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[70],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[71],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtWidgets_25(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[72],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[73],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::showEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWidgets_27(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[74],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWidgets_28(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[75],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[76],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QAbstractItemView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWidgets_29(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQAbstractItemView::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[77]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QAbstractItemView::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWidgets_30(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQAbstractItemView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[78],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QAbstractItemView::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_31(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQAbstractItemView::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[79]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return  ::QAbstractItemView::hasHeightForWidth();

    extern bool sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQAbstractItemView::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[80],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return  ::QAbstractItemView::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtWidgets_33(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QPainter* sipQAbstractItemView::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[81]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return  ::QAbstractItemView::sharedPainter();

    extern  ::QPainter* sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_34(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQAbstractItemView::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[82]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
         ::QAbstractItemView::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQAbstractItemView::viewportSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[83]),sipPySelf,NULL,sipName_viewportSizeHint);

    if (!sipMeth)
        return  ::QAbstractItemView::viewportSizeHint();

    extern  ::QSize sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQAbstractItemView::viewportEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[84],sipPySelf,NULL,sipName_viewportEvent);

    if (!sipMeth)
        return  ::QAbstractItemView::viewportEvent(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[85],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!sipMeth)
    {
         ::QAbstractItemView::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_QtWidgets_46(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractItemView::setupViewport( ::QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[86],sipPySelf,NULL,sipName_setupViewport);

    if (!sipMeth)
    {
         ::QAbstractItemView::setupViewport(a0);
        return;
    }

    extern void sipVH_QtWidgets_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    sipVH_QtWidgets_47(sipGILState, sipImportedVirtErrorHandlers_QtWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQAbstractItemView::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipQAbstractItemView::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipQAbstractItemView::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_connectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQAbstractItemView::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQAbstractItemView::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}

bool sipQAbstractItemView::sipProtect_isSignalConnected(const  ::QMetaMethod& a0) const
{
    return  ::QObject::isSignalConnected(a0);
}

void sipQAbstractItemView::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg, ::QKeyEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_enterEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_leaveEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_moveEvent(bool sipSelfWasArg, ::QMoveEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_closeEvent(bool sipSelfWasArg, ::QCloseEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_tabletEvent(bool sipSelfWasArg, ::QTabletEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_actionEvent(bool sipSelfWasArg, ::QActionEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_showEvent(bool sipSelfWasArg, ::QShowEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::showEvent(a0) : showEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_hideEvent(bool sipSelfWasArg, ::QHideEvent*a0)
{
    (sipSelfWasArg ?  ::QWidget::hideEvent(a0) : hideEvent(a0));
}

int sipQAbstractItemView::sipProtectVirt_metric(bool sipSelfWasArg, ::QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ?  ::QWidget::metric(a0) : metric(a0));
}

void sipQAbstractItemView::sipProtect_updateMicroFocus()
{
     ::QWidget::updateMicroFocus();
}

void sipQAbstractItemView::sipProtect_create( ::WId a0,bool a1,bool a2)
{
     ::QWidget::create(a0,a1,a2);
}

void sipQAbstractItemView::sipProtect_destroy(bool a0,bool a1)
{
     ::QWidget::destroy(a0,a1);
}

bool sipQAbstractItemView::sipProtect_focusNextChild()
{
    return  ::QWidget::focusNextChild();
}

bool sipQAbstractItemView::sipProtect_focusPreviousChild()
{
    return  ::QWidget::focusPreviousChild();
}

bool sipQAbstractItemView::sipProtectVirt_nativeEvent(bool sipSelfWasArg,const  ::QByteArray& a0,void*a1,long*a2)
{
    return (sipSelfWasArg ?  ::QWidget::nativeEvent(a0,a1,a2) : nativeEvent(a0,a1,a2));
}

 ::QPainter* sipQAbstractItemView::sipProtectVirt_sharedPainter(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::QWidget::sharedPainter() : sharedPainter());
}

void sipQAbstractItemView::sipProtectVirt_initPainter(bool sipSelfWasArg, ::QPainter*a0) const
{
    (sipSelfWasArg ?  ::QWidget::initPainter(a0) : initPainter(a0));
}

void sipQAbstractItemView::sipProtectVirt_changeEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QFrame::changeEvent(a0) : changeEvent(a0));
}

void sipQAbstractItemView::sipProtect_drawFrame( ::QPainter*a0)
{
     ::QFrame::drawFrame(a0);
}

void sipQAbstractItemView::sipProtect_initStyleOption( ::QStyleOptionFrame*a0) const
{
     ::QFrame::initStyleOption(a0);
}

void sipQAbstractItemView::sipProtect_setViewportMargins(int a0,int a1,int a2,int a3)
{
     ::QAbstractScrollArea::setViewportMargins(a0,a1,a2,a3);
}

void sipQAbstractItemView::sipProtect_setViewportMargins(const  ::QMargins& a0)
{
     ::QAbstractScrollArea::setViewportMargins(a0);
}

 ::QMargins sipQAbstractItemView::sipProtect_viewportMargins() const
{
    return  ::QAbstractScrollArea::viewportMargins();
}

void sipQAbstractItemView::sipProtectVirt_paintEvent(bool sipSelfWasArg, ::QPaintEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractScrollArea::paintEvent(a0) : paintEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_wheelEvent(bool sipSelfWasArg, ::QWheelEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractScrollArea::wheelEvent(a0) : wheelEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg, ::QContextMenuEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractScrollArea::contextMenuEvent(a0) : contextMenuEvent(a0));
}

bool sipQAbstractItemView::sipProtectVirt_eventFilter(bool sipSelfWasArg, ::QObject*a0, ::QEvent*a1)
{
    return (sipSelfWasArg ?  ::QAbstractScrollArea::eventFilter(a0,a1) : eventFilter(a0,a1));
}

void sipQAbstractItemView::sipProtectVirt_scrollContentsBy(bool sipSelfWasArg,int a0,int a1)
{
    (sipSelfWasArg ?  ::QAbstractScrollArea::scrollContentsBy(a0,a1) : scrollContentsBy(a0,a1));
}

bool sipQAbstractItemView::sipProtectVirt_edit(bool sipSelfWasArg,const  ::QModelIndex& a0, ::QAbstractItemView::EditTrigger a1, ::QEvent*a2)
{
    return (sipSelfWasArg ?  ::QAbstractItemView::edit(a0,a1,a2) : edit(a0,a1,a2));
}

void sipQAbstractItemView::sipProtectVirt_dataChanged(bool sipSelfWasArg,const  ::QModelIndex& a0,const  ::QModelIndex& a1,const  ::QVector<int>& a2)
{
    (sipSelfWasArg ?  ::QAbstractItemView::dataChanged(a0,a1,a2) : dataChanged(a0,a1,a2));
}

void sipQAbstractItemView::sipProtectVirt_rowsInserted(bool sipSelfWasArg,const  ::QModelIndex& a0,int a1,int a2)
{
    (sipSelfWasArg ?  ::QAbstractItemView::rowsInserted(a0,a1,a2) : rowsInserted(a0,a1,a2));
}

void sipQAbstractItemView::sipProtectVirt_rowsAboutToBeRemoved(bool sipSelfWasArg,const  ::QModelIndex& a0,int a1,int a2)
{
    (sipSelfWasArg ?  ::QAbstractItemView::rowsAboutToBeRemoved(a0,a1,a2) : rowsAboutToBeRemoved(a0,a1,a2));
}

void sipQAbstractItemView::sipProtectVirt_selectionChanged(bool sipSelfWasArg,const  ::QItemSelection& a0,const  ::QItemSelection& a1)
{
    (sipSelfWasArg ?  ::QAbstractItemView::selectionChanged(a0,a1) : selectionChanged(a0,a1));
}

void sipQAbstractItemView::sipProtectVirt_currentChanged(bool sipSelfWasArg,const  ::QModelIndex& a0,const  ::QModelIndex& a1)
{
    (sipSelfWasArg ?  ::QAbstractItemView::currentChanged(a0,a1) : currentChanged(a0,a1));
}

void sipQAbstractItemView::sipProtectVirt_updateEditorData(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::QAbstractItemView::updateEditorData() : updateEditorData());
}

void sipQAbstractItemView::sipProtectVirt_updateEditorGeometries(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::QAbstractItemView::updateEditorGeometries() : updateEditorGeometries());
}

void sipQAbstractItemView::sipProtectVirt_updateGeometries(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::QAbstractItemView::updateGeometries() : updateGeometries());
}

void sipQAbstractItemView::sipProtectVirt_verticalScrollbarAction(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::verticalScrollbarAction(a0) : verticalScrollbarAction(a0));
}

void sipQAbstractItemView::sipProtectVirt_horizontalScrollbarAction(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::horizontalScrollbarAction(a0) : horizontalScrollbarAction(a0));
}

void sipQAbstractItemView::sipProtectVirt_verticalScrollbarValueChanged(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::verticalScrollbarValueChanged(a0) : verticalScrollbarValueChanged(a0));
}

void sipQAbstractItemView::sipProtectVirt_horizontalScrollbarValueChanged(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::horizontalScrollbarValueChanged(a0) : horizontalScrollbarValueChanged(a0));
}

void sipQAbstractItemView::sipProtectVirt_closeEditor(bool sipSelfWasArg, ::QWidget*a0, ::QAbstractItemDelegate::EndEditHint a1)
{
    (sipSelfWasArg ?  ::QAbstractItemView::closeEditor(a0,a1) : closeEditor(a0,a1));
}

void sipQAbstractItemView::sipProtectVirt_commitData(bool sipSelfWasArg, ::QWidget*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::commitData(a0) : commitData(a0));
}

void sipQAbstractItemView::sipProtectVirt_editorDestroyed(bool sipSelfWasArg, ::QObject*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::editorDestroyed(a0) : editorDestroyed(a0));
}

 ::QModelIndex sipQAbstractItemView::sipProtect_moveCursor(int a0, ::Qt::KeyboardModifiers a1)
{
    return moveCursor(( ::QAbstractItemView::CursorAction)a0,a1);
}

int sipQAbstractItemView::sipProtect_horizontalOffset() const
{
    return horizontalOffset();
}

int sipQAbstractItemView::sipProtect_verticalOffset() const
{
    return verticalOffset();
}

bool sipQAbstractItemView::sipProtect_isIndexHidden(const  ::QModelIndex& a0) const
{
    return isIndexHidden(a0);
}

void sipQAbstractItemView::sipProtect_setSelection(const  ::QRect& a0, ::QItemSelectionModel::SelectionFlags a1)
{
    setSelection(a0,a1);
}

 ::QRegion sipQAbstractItemView::sipProtect_visualRegionForSelection(const  ::QItemSelection& a0) const
{
    return visualRegionForSelection(a0);
}

 ::QModelIndexList sipQAbstractItemView::sipProtectVirt_selectedIndexes(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::QAbstractItemView::selectedIndexes() : selectedIndexes());
}

 ::QItemSelectionModel::SelectionFlags sipQAbstractItemView::sipProtectVirt_selectionCommand(bool sipSelfWasArg,const  ::QModelIndex& a0,const  ::QEvent*a1) const
{
    return (sipSelfWasArg ?  ::QAbstractItemView::selectionCommand(a0,a1) : selectionCommand(a0,a1));
}

void sipQAbstractItemView::sipProtectVirt_startDrag(bool sipSelfWasArg, ::Qt::DropActions a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::startDrag(a0) : startDrag(a0));
}

 ::QStyleOptionViewItem sipQAbstractItemView::sipProtectVirt_viewOptions(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::QAbstractItemView::viewOptions() : viewOptions());
}

int sipQAbstractItemView::sipProtect_state() const
{
    return (int) ::QAbstractItemView::state();
}

void sipQAbstractItemView::sipProtect_setState(int a0)
{
     ::QAbstractItemView::setState(( ::QAbstractItemView::State)a0);
}

void sipQAbstractItemView::sipProtect_scheduleDelayedItemsLayout()
{
     ::QAbstractItemView::scheduleDelayedItemsLayout();
}

void sipQAbstractItemView::sipProtect_executeDelayedItemsLayout()
{
     ::QAbstractItemView::executeDelayedItemsLayout();
}

void sipQAbstractItemView::sipProtect_scrollDirtyRegion(int a0,int a1)
{
     ::QAbstractItemView::scrollDirtyRegion(a0,a1);
}

void sipQAbstractItemView::sipProtect_setDirtyRegion(const  ::QRegion& a0)
{
     ::QAbstractItemView::setDirtyRegion(a0);
}

 ::QPoint sipQAbstractItemView::sipProtect_dirtyRegionOffset() const
{
    return  ::QAbstractItemView::dirtyRegionOffset();
}

bool sipQAbstractItemView::sipProtectVirt_event(bool sipSelfWasArg, ::QEvent*a0)
{
    return (sipSelfWasArg ?  ::QAbstractItemView::event(a0) : event(a0));
}

bool sipQAbstractItemView::sipProtectVirt_viewportEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    return (sipSelfWasArg ?  ::QAbstractItemView::viewportEvent(a0) : viewportEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_mousePressEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg, ::QMouseEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg, ::QDragEnterEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg, ::QDragMoveEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg, ::QDragLeaveEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_dropEvent(bool sipSelfWasArg, ::QDropEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::dropEvent(a0) : dropEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_focusInEvent(bool sipSelfWasArg, ::QFocusEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::focusInEvent(a0) : focusInEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_focusOutEvent(bool sipSelfWasArg, ::QFocusEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_keyPressEvent(bool sipSelfWasArg, ::QKeyEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_resizeEvent(bool sipSelfWasArg, ::QResizeEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::resizeEvent(a0) : resizeEvent(a0));
}

void sipQAbstractItemView::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::timerEvent(a0) : timerEvent(a0));
}

int sipQAbstractItemView::sipProtect_dropIndicatorPosition() const
{
    return (int) ::QAbstractItemView::dropIndicatorPosition();
}

bool sipQAbstractItemView::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ?  ::QAbstractItemView::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

void sipQAbstractItemView::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg, ::QInputMethodEvent*a0)
{
    (sipSelfWasArg ?  ::QAbstractItemView::inputMethodEvent(a0) : inputMethodEvent(a0));
}

 ::QSize sipQAbstractItemView::sipProtectVirt_viewportSizeHint(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::QAbstractItemView::viewportSizeHint() : viewportSizeHint());
}


PyDoc_STRVAR(doc_QAbstractItemView_sender, "sender(self) -> QObject");

extern "C" {static PyObject *meth_QAbstractItemView_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
             ::QObject*sipRes = 0;

        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_sender, doc_QAbstractItemView_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_receivers, "receivers(self, PYQT_SIGNAL) -> int");

extern "C" {static PyObject *meth_QAbstractItemView_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_receivers, doc_QAbstractItemView_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_childEvent, "childEvent(self, QChildEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_childEvent, doc_QAbstractItemView_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_customEvent, "customEvent(self, QEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_customEvent, doc_QAbstractItemView_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_connectNotify, "connectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QAbstractItemView_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_connectNotify, doc_QAbstractItemView_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_disconnectNotify, "disconnectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QAbstractItemView_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_disconnectNotify, doc_QAbstractItemView_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_senderSignalIndex, "senderSignalIndex(self) -> int");

extern "C" {static PyObject *meth_QAbstractItemView_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_senderSignalIndex, doc_QAbstractItemView_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_isSignalConnected, "isSignalConnected(self, QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMetaMethod* a0;
        const sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_isSignalConnected, doc_QAbstractItemView_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_keyReleaseEvent, "keyReleaseEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_keyReleaseEvent, doc_QAbstractItemView_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_enterEvent, "enterEvent(self, QEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_enterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_enterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_enterEvent, doc_QAbstractItemView_enterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_leaveEvent, "leaveEvent(self, QEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_leaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_leaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_leaveEvent, doc_QAbstractItemView_leaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_moveEvent, "moveEvent(self, QMoveEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_moveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_moveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMoveEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_moveEvent, doc_QAbstractItemView_moveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_closeEvent, "closeEvent(self, QCloseEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_closeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_closeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QCloseEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QCloseEvent, &a0))
        {
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_closeEvent, doc_QAbstractItemView_closeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_tabletEvent, "tabletEvent(self, QTabletEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_tabletEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_tabletEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTabletEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QTabletEvent, &a0))
        {
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_tabletEvent, doc_QAbstractItemView_tabletEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_actionEvent, "actionEvent(self, QActionEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_actionEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_actionEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QActionEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QActionEvent, &a0))
        {
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_actionEvent, doc_QAbstractItemView_actionEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_showEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_showEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QShowEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QShowEvent, &a0))
        {
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_showEvent, doc_QAbstractItemView_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_hideEvent, "hideEvent(self, QHideEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_hideEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_hideEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QHideEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QHideEvent, &a0))
        {
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_hideEvent, doc_QAbstractItemView_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_metric, "metric(self, QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QAbstractItemView_metric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_metric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintDevice::PaintDeviceMetric a0;
        const sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_metric, doc_QAbstractItemView_metric);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_updateMicroFocus, "updateMicroFocus(self)");

extern "C" {static PyObject *meth_QAbstractItemView_updateMicroFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            sipCpp->sipProtect_updateMicroFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_updateMicroFocus, doc_QAbstractItemView_updateMicroFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_create, "create(self, window: sip.voidptr = 0, initializeWindow: bool = True, destroyOldWindow: bool = True)");

extern "C" {static PyObject *meth_QAbstractItemView_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::WId a0def = 0;
         ::WId* a0 = &a0def;
        int a0State = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQAbstractItemView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_initializeWindow,
            sipName_destroyOldWindow,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1bb", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_quintptr,&a0, &a0State, &a1, &a2))
        {
            sipCpp->sipProtect_create(*a0,a1,a2);
            sipReleaseType(a0,sipType_quintptr,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_create, doc_QAbstractItemView_create);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_destroy, "destroy(self, destroyWindow: bool = True, destroySubWindows: bool = True)");

extern "C" {static PyObject *meth_QAbstractItemView_destroy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_destroy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQAbstractItemView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_destroyWindow,
            sipName_destroySubWindows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|bb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_destroy(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_destroy, doc_QAbstractItemView_destroy);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_focusNextChild, "focusNextChild(self) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_focusNextChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_focusNextChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusNextChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_focusNextChild, doc_QAbstractItemView_focusNextChild);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_focusPreviousChild, "focusPreviousChild(self) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_focusPreviousChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusPreviousChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_focusPreviousChild, doc_QAbstractItemView_focusPreviousChild);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_nativeEvent, "nativeEvent(self, Union[QByteArray, bytes, bytearray], sip.voidptr) -> Tuple[bool, int]");

extern "C" {static PyObject *meth_QAbstractItemView_nativeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_nativeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        void* a1;
        long a2;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1v", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_nativeEvent(sipSelfWasArg,*a0,a1,&a2);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bl)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_nativeEvent, doc_QAbstractItemView_nativeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_sharedPainter, "sharedPainter(self) -> QPainter");

extern "C" {static PyObject *meth_QAbstractItemView_sharedPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_sharedPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
             ::QPainter*sipRes;

            sipRes = sipCpp->sipProtectVirt_sharedPainter(sipSelfWasArg);

            return sipConvertFromType(sipRes,sipType_QPainter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_sharedPainter, doc_QAbstractItemView_sharedPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_initPainter, "initPainter(self, QPainter)");

extern "C" {static PyObject *meth_QAbstractItemView_initPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_initPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPainter* a0;
        const sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtectVirt_initPainter(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_initPainter, doc_QAbstractItemView_initPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_changeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_changeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_changeEvent, doc_QAbstractItemView_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_drawFrame, "drawFrame(self, QPainter)");

extern "C" {static PyObject *meth_QAbstractItemView_drawFrame(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_drawFrame(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPainter* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtect_drawFrame(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_drawFrame, doc_QAbstractItemView_drawFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_initStyleOption, "initStyleOption(self, QStyleOptionFrame)");

extern "C" {static PyObject *meth_QAbstractItemView_initStyleOption(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_initStyleOption(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QStyleOptionFrame* a0;
        const sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QStyleOptionFrame, &a0))
        {
            sipCpp->sipProtect_initStyleOption(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_initStyleOption, doc_QAbstractItemView_initStyleOption);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setViewportMargins, "setViewportMargins(self, int, int, int, int)\n"
"setViewportMargins(self, QMargins)");

extern "C" {static PyObject *meth_QAbstractItemView_setViewportMargins(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setViewportMargins(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Biiii", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->sipProtect_setViewportMargins(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QMargins* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QMargins, &a0))
        {
            sipCpp->sipProtect_setViewportMargins(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setViewportMargins, doc_QAbstractItemView_setViewportMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_viewportMargins, "viewportMargins(self) -> QMargins");

extern "C" {static PyObject *meth_QAbstractItemView_viewportMargins(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_viewportMargins(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins(sipCpp->sipProtect_viewportMargins());

            return sipConvertFromNewType(sipRes,sipType_QMargins,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_viewportMargins, doc_QAbstractItemView_viewportMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_paintEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_paintEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QPaintEvent, &a0))
        {
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_paintEvent, doc_QAbstractItemView_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_wheelEvent, "wheelEvent(self, QWheelEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWheelEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_wheelEvent, doc_QAbstractItemView_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_contextMenuEvent, "contextMenuEvent(self, QContextMenuEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_contextMenuEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QContextMenuEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_contextMenuEvent, doc_QAbstractItemView_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_eventFilter, "eventFilter(self, QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_eventFilter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_eventFilter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QObject* a0;
         ::QEvent* a1;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_eventFilter(sipSelfWasArg,a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_eventFilter, doc_QAbstractItemView_eventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_scrollContentsBy, "scrollContentsBy(self, int, int)");

extern "C" {static PyObject *meth_QAbstractItemView_scrollContentsBy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bii", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtectVirt_scrollContentsBy(sipSelfWasArg,a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_scrollContentsBy, doc_QAbstractItemView_scrollContentsBy);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setModel, "setModel(self, QAbstractItemModel)");

extern "C" {static PyObject *meth_QAbstractItemView_setModel(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractItemModel* a0;
        PyObject *a0Keep;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractItemView::setModel(a0) : sipCpp->setModel(a0));

            sipKeepReference(sipSelf, -2, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setModel, doc_QAbstractItemView_setModel);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_model, "model(self) -> QAbstractItemModel");

extern "C" {static PyObject *meth_QAbstractItemView_model(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_model(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
             ::QAbstractItemModel*sipRes;

            sipRes = sipCpp->model();

            return sipConvertFromType(sipRes,sipType_QAbstractItemModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_model, doc_QAbstractItemView_model);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setSelectionModel, "setSelectionModel(self, QItemSelectionModel)");

extern "C" {static PyObject *meth_QAbstractItemView_setSelectionModel(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setSelectionModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QItemSelectionModel* a0;
        PyObject *a0Keep;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0Keep, sipType_QItemSelectionModel, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractItemView::setSelectionModel(a0) : sipCpp->setSelectionModel(a0));

            sipKeepReference(sipSelf, -3, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setSelectionModel, doc_QAbstractItemView_setSelectionModel);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_selectionModel, "selectionModel(self) -> QItemSelectionModel");

extern "C" {static PyObject *meth_QAbstractItemView_selectionModel(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_selectionModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
             ::QItemSelectionModel*sipRes;

            sipRes = sipCpp->selectionModel();

            return sipConvertFromType(sipRes,sipType_QItemSelectionModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_selectionModel, doc_QAbstractItemView_selectionModel);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setItemDelegate, "setItemDelegate(self, QAbstractItemDelegate)");

extern "C" {static PyObject *meth_QAbstractItemView_setItemDelegate(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setItemDelegate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractItemDelegate* a0;
        PyObject *a0Keep;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0Keep, sipType_QAbstractItemDelegate, &a0))
        {
            sipCpp->setItemDelegate(a0);

            sipKeepReference(sipSelf, -4, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setItemDelegate, doc_QAbstractItemView_setItemDelegate);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_itemDelegate, "itemDelegate(self) -> QAbstractItemDelegate\n"
"itemDelegate(self, QModelIndex) -> QAbstractItemDelegate");

extern "C" {static PyObject *meth_QAbstractItemView_itemDelegate(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_itemDelegate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
             ::QAbstractItemDelegate*sipRes;

            sipRes = sipCpp->itemDelegate();

            return sipConvertFromType(sipRes,sipType_QAbstractItemDelegate,NULL);
        }
    }

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QAbstractItemDelegate*sipRes;

            sipRes = sipCpp->itemDelegate(*a0);

            return sipConvertFromType(sipRes,sipType_QAbstractItemDelegate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_itemDelegate, doc_QAbstractItemView_itemDelegate);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setSelectionMode, "setSelectionMode(self, QAbstractItemView.SelectionMode)");

extern "C" {static PyObject *meth_QAbstractItemView_setSelectionMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setSelectionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractItemView::SelectionMode a0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_SelectionMode, &a0))
        {
            sipCpp->setSelectionMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setSelectionMode, doc_QAbstractItemView_setSelectionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_selectionMode, "selectionMode(self) -> QAbstractItemView.SelectionMode");

extern "C" {static PyObject *meth_QAbstractItemView_selectionMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_selectionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
             ::QAbstractItemView::SelectionMode sipRes;

            sipRes = sipCpp->selectionMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractItemView_SelectionMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_selectionMode, doc_QAbstractItemView_selectionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setSelectionBehavior, "setSelectionBehavior(self, QAbstractItemView.SelectionBehavior)");

extern "C" {static PyObject *meth_QAbstractItemView_setSelectionBehavior(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setSelectionBehavior(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractItemView::SelectionBehavior a0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_SelectionBehavior, &a0))
        {
            sipCpp->setSelectionBehavior(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setSelectionBehavior, doc_QAbstractItemView_setSelectionBehavior);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_selectionBehavior, "selectionBehavior(self) -> QAbstractItemView.SelectionBehavior");

extern "C" {static PyObject *meth_QAbstractItemView_selectionBehavior(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_selectionBehavior(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
             ::QAbstractItemView::SelectionBehavior sipRes;

            sipRes = sipCpp->selectionBehavior();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractItemView_SelectionBehavior);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_selectionBehavior, doc_QAbstractItemView_selectionBehavior);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_currentIndex, "currentIndex(self) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractItemView_currentIndex(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_currentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex(sipCpp->currentIndex());

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_currentIndex, doc_QAbstractItemView_currentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_rootIndex, "rootIndex(self) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractItemView_rootIndex(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_rootIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex(sipCpp->rootIndex());

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_rootIndex, doc_QAbstractItemView_rootIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setEditTriggers, "setEditTriggers(self, Union[QAbstractItemView.EditTriggers, QAbstractItemView.EditTrigger])");

extern "C" {static PyObject *meth_QAbstractItemView_setEditTriggers(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setEditTriggers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractItemView::EditTriggers* a0;
        int a0State = 0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_EditTriggers, &a0, &a0State))
        {
            sipCpp->setEditTriggers(*a0);
            sipReleaseType(a0,sipType_QAbstractItemView_EditTriggers,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setEditTriggers, doc_QAbstractItemView_setEditTriggers);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_editTriggers, "editTriggers(self) -> QAbstractItemView.EditTriggers");

extern "C" {static PyObject *meth_QAbstractItemView_editTriggers(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_editTriggers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
             ::QAbstractItemView::EditTriggers*sipRes;

            sipRes = new  ::QAbstractItemView::EditTriggers(sipCpp->editTriggers());

            return sipConvertFromNewType(sipRes,sipType_QAbstractItemView_EditTriggers,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_editTriggers, doc_QAbstractItemView_editTriggers);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setAutoScroll, "setAutoScroll(self, bool)");

extern "C" {static PyObject *meth_QAbstractItemView_setAutoScroll(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setAutoScroll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            sipCpp->setAutoScroll(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setAutoScroll, doc_QAbstractItemView_setAutoScroll);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_hasAutoScroll, "hasAutoScroll(self) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_hasAutoScroll(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_hasAutoScroll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasAutoScroll();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_hasAutoScroll, doc_QAbstractItemView_hasAutoScroll);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setTabKeyNavigation, "setTabKeyNavigation(self, bool)");

extern "C" {static PyObject *meth_QAbstractItemView_setTabKeyNavigation(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setTabKeyNavigation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            sipCpp->setTabKeyNavigation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setTabKeyNavigation, doc_QAbstractItemView_setTabKeyNavigation);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_tabKeyNavigation, "tabKeyNavigation(self) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_tabKeyNavigation(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_tabKeyNavigation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->tabKeyNavigation();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_tabKeyNavigation, doc_QAbstractItemView_tabKeyNavigation);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setDropIndicatorShown, "setDropIndicatorShown(self, bool)");

extern "C" {static PyObject *meth_QAbstractItemView_setDropIndicatorShown(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setDropIndicatorShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            sipCpp->setDropIndicatorShown(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setDropIndicatorShown, doc_QAbstractItemView_setDropIndicatorShown);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_showDropIndicator, "showDropIndicator(self) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_showDropIndicator(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_showDropIndicator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->showDropIndicator();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_showDropIndicator, doc_QAbstractItemView_showDropIndicator);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setDragEnabled, "setDragEnabled(self, bool)");

extern "C" {static PyObject *meth_QAbstractItemView_setDragEnabled(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setDragEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            sipCpp->setDragEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setDragEnabled, doc_QAbstractItemView_setDragEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dragEnabled, "dragEnabled(self) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_dragEnabled(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dragEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->dragEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dragEnabled, doc_QAbstractItemView_dragEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setAlternatingRowColors, "setAlternatingRowColors(self, bool)");

extern "C" {static PyObject *meth_QAbstractItemView_setAlternatingRowColors(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setAlternatingRowColors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            sipCpp->setAlternatingRowColors(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setAlternatingRowColors, doc_QAbstractItemView_setAlternatingRowColors);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_alternatingRowColors, "alternatingRowColors(self) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_alternatingRowColors(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_alternatingRowColors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->alternatingRowColors();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_alternatingRowColors, doc_QAbstractItemView_alternatingRowColors);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setIconSize, "setIconSize(self, QSize)");

extern "C" {static PyObject *meth_QAbstractItemView_setIconSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setIconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSize* a0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setIconSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setIconSize, doc_QAbstractItemView_setIconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_iconSize, "iconSize(self) -> QSize");

extern "C" {static PyObject *meth_QAbstractItemView_iconSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_iconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->iconSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_iconSize, doc_QAbstractItemView_iconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setTextElideMode, "setTextElideMode(self, Qt.TextElideMode)");

extern "C" {static PyObject *meth_QAbstractItemView_setTextElideMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setTextElideMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::TextElideMode a0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_Qt_TextElideMode, &a0))
        {
            sipCpp->setTextElideMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setTextElideMode, doc_QAbstractItemView_setTextElideMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_textElideMode, "textElideMode(self) -> Qt.TextElideMode");

extern "C" {static PyObject *meth_QAbstractItemView_textElideMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_textElideMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
             ::Qt::TextElideMode sipRes;

            sipRes = sipCpp->textElideMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_TextElideMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_textElideMode, doc_QAbstractItemView_textElideMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_keyboardSearch, "keyboardSearch(self, str)");

extern "C" {static PyObject *meth_QAbstractItemView_keyboardSearch(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_keyboardSearch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QString,&a0, &a0State))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractItemView::keyboardSearch(*a0) : sipCpp->keyboardSearch(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_keyboardSearch, doc_QAbstractItemView_keyboardSearch);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_visualRect, "visualRect(self, QModelIndex) -> QRect");

extern "C" {static PyObject *meth_QAbstractItemView_visualRect(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_visualRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QRect*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_visualRect);
                return NULL;
            }

            sipRes = new  ::QRect(sipCpp->visualRect(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_visualRect, doc_QAbstractItemView_visualRect);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_scrollTo, "scrollTo(self, QModelIndex, hint: QAbstractItemView.ScrollHint = QAbstractItemView.EnsureVisible)");

extern "C" {static PyObject *meth_QAbstractItemView_scrollTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_scrollTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QModelIndex* a0;
         ::QAbstractItemView::ScrollHint a1 = QAbstractItemView::EnsureVisible;
         ::QAbstractItemView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_hint,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_ScrollHint, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_scrollTo);
                return NULL;
            }

            sipCpp->scrollTo(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_scrollTo, doc_QAbstractItemView_scrollTo);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_indexAt, "indexAt(self, QPoint) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractItemView_indexAt(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_indexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QPoint* a0;
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QPoint, &a0))
        {
             ::QModelIndex*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_indexAt);
                return NULL;
            }

            sipRes = new  ::QModelIndex(sipCpp->indexAt(*a0));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_indexAt, doc_QAbstractItemView_indexAt);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_sizeHintForIndex, "sizeHintForIndex(self, QModelIndex) -> QSize");

extern "C" {static PyObject *meth_QAbstractItemView_sizeHintForIndex(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_sizeHintForIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->sizeHintForIndex(*a0));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_sizeHintForIndex, doc_QAbstractItemView_sizeHintForIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_sizeHintForRow, "sizeHintForRow(self, int) -> int");

extern "C" {static PyObject *meth_QAbstractItemView_sizeHintForRow(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_sizeHintForRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemView::sizeHintForRow(a0) : sipCpp->sizeHintForRow(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_sizeHintForRow, doc_QAbstractItemView_sizeHintForRow);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_sizeHintForColumn, "sizeHintForColumn(self, int) -> int");

extern "C" {static PyObject *meth_QAbstractItemView_sizeHintForColumn(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_sizeHintForColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemView::sizeHintForColumn(a0) : sipCpp->sizeHintForColumn(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_sizeHintForColumn, doc_QAbstractItemView_sizeHintForColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_openPersistentEditor, "openPersistentEditor(self, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemView_openPersistentEditor(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_openPersistentEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QModelIndex* a0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            sipCpp->openPersistentEditor(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_openPersistentEditor, doc_QAbstractItemView_openPersistentEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_closePersistentEditor, "closePersistentEditor(self, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemView_closePersistentEditor(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_closePersistentEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QModelIndex* a0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            sipCpp->closePersistentEditor(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_closePersistentEditor, doc_QAbstractItemView_closePersistentEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setIndexWidget, "setIndexWidget(self, QModelIndex, QWidget)");

extern "C" {static PyObject *meth_QAbstractItemView_setIndexWidget(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setIndexWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QModelIndex* a0;
         ::QWidget* a1;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J:", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, sipType_QWidget, &a1))
        {
        // We have to break the association with any existing widget.
        QWidget *w = sipCpp->indexWidget(*a0);
        
        if (w)
        {
            PyObject *wo = sipGetPyObject(w, sipType_QWidget);
        
            if (wo)
                sipTransferTo(wo, 0);
        }
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setIndexWidget(*a0, a1);
        Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setIndexWidget, doc_QAbstractItemView_setIndexWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_indexWidget, "indexWidget(self, QModelIndex) -> QWidget");

extern "C" {static PyObject *meth_QAbstractItemView_indexWidget(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_indexWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QWidget*sipRes;

            sipRes = sipCpp->indexWidget(*a0);

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_indexWidget, doc_QAbstractItemView_indexWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_reset, "reset(self)");

extern "C" {static PyObject *meth_QAbstractItemView_reset(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractItemView::reset() : sipCpp->reset());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_reset, doc_QAbstractItemView_reset);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setRootIndex, "setRootIndex(self, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemView_setRootIndex(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setRootIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractItemView::setRootIndex(*a0) : sipCpp->setRootIndex(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setRootIndex, doc_QAbstractItemView_setRootIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_selectAll, "selectAll(self)");

extern "C" {static PyObject *meth_QAbstractItemView_selectAll(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_selectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractItemView::selectAll() : sipCpp->selectAll());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_selectAll, doc_QAbstractItemView_selectAll);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_edit, "edit(self, QModelIndex)\n"
"edit(self, QModelIndex, QAbstractItemView.EditTrigger, QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_edit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_edit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
         ::QAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            sipCpp->edit(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QModelIndex* a0;
         ::QAbstractItemView::EditTrigger a1;
         ::QEvent* a2;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9EJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_EditTrigger, &a1, sipType_QEvent, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_edit(sipSelfWasArg,*a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_edit, doc_QAbstractItemView_edit);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_clearSelection, "clearSelection(self)");

extern "C" {static PyObject *meth_QAbstractItemView_clearSelection(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_clearSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            sipCpp->clearSelection();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_clearSelection, doc_QAbstractItemView_clearSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setCurrentIndex, "setCurrentIndex(self, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemView_setCurrentIndex(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setCurrentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QModelIndex* a0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            sipCpp->setCurrentIndex(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setCurrentIndex, doc_QAbstractItemView_setCurrentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_scrollToTop, "scrollToTop(self)");

extern "C" {static PyObject *meth_QAbstractItemView_scrollToTop(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_scrollToTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            sipCpp->scrollToTop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_scrollToTop, doc_QAbstractItemView_scrollToTop);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_scrollToBottom, "scrollToBottom(self)");

extern "C" {static PyObject *meth_QAbstractItemView_scrollToBottom(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_scrollToBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            sipCpp->scrollToBottom();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_scrollToBottom, doc_QAbstractItemView_scrollToBottom);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_update, "update(self)\n"
"update(self, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemView_update(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            sipCpp->update();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QModelIndex* a0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            sipCpp->update(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_update, doc_QAbstractItemView_update);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dataChanged, "dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = [])");

extern "C" {static PyObject *meth_QAbstractItemView_dataChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dataChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QModelIndex* a1;
        const  ::QVector<int>& a2def = QVector<int>();
        const  ::QVector<int>* a2 = &a2def;
        int a2State = 0;
        sipQAbstractItemView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_roles,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9|J1", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1, sipType_QVector_1800,&a2, &a2State))
        {
            sipCpp->sipProtectVirt_dataChanged(sipSelfWasArg,*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QVector<int> *>(a2),sipType_QVector_1800,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dataChanged, doc_QAbstractItemView_dataChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_rowsInserted, "rowsInserted(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QAbstractItemView_rowsInserted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_rowsInserted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtectVirt_rowsInserted(sipSelfWasArg,*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_rowsInserted, doc_QAbstractItemView_rowsInserted);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_rowsAboutToBeRemoved, "rowsAboutToBeRemoved(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QAbstractItemView_rowsAboutToBeRemoved(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_rowsAboutToBeRemoved(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtectVirt_rowsAboutToBeRemoved(sipSelfWasArg,*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_rowsAboutToBeRemoved, doc_QAbstractItemView_rowsAboutToBeRemoved);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_selectionChanged, "selectionChanged(self, QItemSelection, QItemSelection)");

extern "C" {static PyObject *meth_QAbstractItemView_selectionChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_selectionChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QItemSelection* a0;
        const  ::QItemSelection* a1;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelection, &a1))
        {
            sipCpp->sipProtectVirt_selectionChanged(sipSelfWasArg,*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_selectionChanged, doc_QAbstractItemView_selectionChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_currentChanged, "currentChanged(self, QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemView_currentChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_currentChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QModelIndex* a1;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            sipCpp->sipProtectVirt_currentChanged(sipSelfWasArg,*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_currentChanged, doc_QAbstractItemView_currentChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_updateEditorData, "updateEditorData(self)");

extern "C" {static PyObject *meth_QAbstractItemView_updateEditorData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_updateEditorData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            sipCpp->sipProtectVirt_updateEditorData(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_updateEditorData, doc_QAbstractItemView_updateEditorData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_updateEditorGeometries, "updateEditorGeometries(self)");

extern "C" {static PyObject *meth_QAbstractItemView_updateEditorGeometries(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_updateEditorGeometries(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            sipCpp->sipProtectVirt_updateEditorGeometries(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_updateEditorGeometries, doc_QAbstractItemView_updateEditorGeometries);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_updateGeometries, "updateGeometries(self)");

extern "C" {static PyObject *meth_QAbstractItemView_updateGeometries(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_updateGeometries(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            sipCpp->sipProtectVirt_updateGeometries(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_updateGeometries, doc_QAbstractItemView_updateGeometries);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_verticalScrollbarAction, "verticalScrollbarAction(self, int)");

extern "C" {static PyObject *meth_QAbstractItemView_verticalScrollbarAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_verticalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_verticalScrollbarAction(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_verticalScrollbarAction, doc_QAbstractItemView_verticalScrollbarAction);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_horizontalScrollbarAction, "horizontalScrollbarAction(self, int)");

extern "C" {static PyObject *meth_QAbstractItemView_horizontalScrollbarAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_horizontalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_horizontalScrollbarAction(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_horizontalScrollbarAction, doc_QAbstractItemView_horizontalScrollbarAction);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_verticalScrollbarValueChanged, "verticalScrollbarValueChanged(self, int)");

extern "C" {static PyObject *meth_QAbstractItemView_verticalScrollbarValueChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_verticalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_verticalScrollbarValueChanged(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_verticalScrollbarValueChanged, doc_QAbstractItemView_verticalScrollbarValueChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_horizontalScrollbarValueChanged, "horizontalScrollbarValueChanged(self, int)");

extern "C" {static PyObject *meth_QAbstractItemView_horizontalScrollbarValueChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_horizontalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_horizontalScrollbarValueChanged(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_horizontalScrollbarValueChanged, doc_QAbstractItemView_horizontalScrollbarValueChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_closeEditor, "closeEditor(self, QWidget, QAbstractItemDelegate.EndEditHint)");

extern "C" {static PyObject *meth_QAbstractItemView_closeEditor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_closeEditor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWidget* a0;
         ::QAbstractItemDelegate::EndEditHint a1;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8E", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QWidget, &a0, sipType_QAbstractItemDelegate_EndEditHint, &a1))
        {
            sipCpp->sipProtectVirt_closeEditor(sipSelfWasArg,a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_closeEditor, doc_QAbstractItemView_closeEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_commitData, "commitData(self, QWidget)");

extern "C" {static PyObject *meth_QAbstractItemView_commitData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_commitData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWidget* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->sipProtectVirt_commitData(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_commitData, doc_QAbstractItemView_commitData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_editorDestroyed, "editorDestroyed(self, QObject)");

extern "C" {static PyObject *meth_QAbstractItemView_editorDestroyed(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_editorDestroyed(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QObject* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QObject, &a0))
        {
            sipCpp->sipProtectVirt_editorDestroyed(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_editorDestroyed, doc_QAbstractItemView_editorDestroyed);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_moveCursor, "moveCursor(self, QAbstractItemView.CursorAction, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier]) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractItemView_moveCursor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_moveCursor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::Qt::KeyboardModifiers* a1;
        int a1State = 0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BEJ1", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_CursorAction, &a0, sipType_Qt_KeyboardModifiers, &a1, &a1State))
        {
             ::QModelIndex*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_moveCursor);
                return NULL;
            }

            sipRes = new  ::QModelIndex(sipCpp->sipProtect_moveCursor(a0,*a1));
            sipReleaseType(a1,sipType_Qt_KeyboardModifiers,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_moveCursor, doc_QAbstractItemView_moveCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_horizontalOffset, "horizontalOffset(self) -> int");

extern "C" {static PyObject *meth_QAbstractItemView_horizontalOffset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_horizontalOffset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_horizontalOffset);
                return NULL;
            }

            sipRes = sipCpp->sipProtect_horizontalOffset();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_horizontalOffset, doc_QAbstractItemView_horizontalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_verticalOffset, "verticalOffset(self) -> int");

extern "C" {static PyObject *meth_QAbstractItemView_verticalOffset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_verticalOffset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_verticalOffset);
                return NULL;
            }

            sipRes = sipCpp->sipProtect_verticalOffset();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_verticalOffset, doc_QAbstractItemView_verticalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_isIndexHidden, "isIndexHidden(self, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_isIndexHidden(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_isIndexHidden(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QModelIndex* a0;
        const sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_isIndexHidden);
                return NULL;
            }

            sipRes = sipCpp->sipProtect_isIndexHidden(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_isIndexHidden, doc_QAbstractItemView_isIndexHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setSelection, "setSelection(self, QRect, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag])");

extern "C" {static PyObject *meth_QAbstractItemView_setSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QRect* a0;
         ::QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J1", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QRect, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_setSelection);
                return NULL;
            }

            sipCpp->sipProtect_setSelection(*a0,*a1);
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setSelection, doc_QAbstractItemView_setSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_visualRegionForSelection, "visualRegionForSelection(self, QItemSelection) -> QRegion");

extern "C" {static PyObject *meth_QAbstractItemView_visualRegionForSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_visualRegionForSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QItemSelection* a0;
        const sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QItemSelection, &a0))
        {
             ::QRegion*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_visualRegionForSelection);
                return NULL;
            }

            sipRes = new  ::QRegion(sipCpp->sipProtect_visualRegionForSelection(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_visualRegionForSelection, doc_QAbstractItemView_visualRegionForSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_selectedIndexes, "selectedIndexes(self) -> object");

extern "C" {static PyObject *meth_QAbstractItemView_selectedIndexes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_selectedIndexes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
             ::QModelIndexList*sipRes;

            sipRes = new  ::QModelIndexList(sipCpp->sipProtectVirt_selectedIndexes(sipSelfWasArg));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_selectedIndexes, doc_QAbstractItemView_selectedIndexes);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_selectionCommand, "selectionCommand(self, QModelIndex, event: QEvent = None) -> QItemSelectionModel.SelectionFlags");

extern "C" {static PyObject *meth_QAbstractItemView_selectionCommand(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_selectionCommand(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QEvent* a1 = 0;
        const sipQAbstractItemView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, sipType_QEvent, &a1))
        {
             ::QItemSelectionModel::SelectionFlags*sipRes;

            sipRes = new  ::QItemSelectionModel::SelectionFlags(sipCpp->sipProtectVirt_selectionCommand(sipSelfWasArg,*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionModel_SelectionFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_selectionCommand, doc_QAbstractItemView_selectionCommand);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_startDrag, "startDrag(self, Union[Qt.DropActions, Qt.DropAction])");

extern "C" {static PyObject *meth_QAbstractItemView_startDrag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_startDrag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::Qt::DropActions* a0;
        int a0State = 0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_Qt_DropActions, &a0, &a0State))
        {
            sipCpp->sipProtectVirt_startDrag(sipSelfWasArg,*a0);
            sipReleaseType(a0,sipType_Qt_DropActions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_startDrag, doc_QAbstractItemView_startDrag);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_viewOptions, "viewOptions(self) -> QStyleOptionViewItem");

extern "C" {static PyObject *meth_QAbstractItemView_viewOptions(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_viewOptions(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
             ::QStyleOptionViewItem*sipRes;

            sipRes = new  ::QStyleOptionViewItem(sipCpp->sipProtectVirt_viewOptions(sipSelfWasArg));

            return sipConvertFromNewType(sipRes,sipType_QStyleOptionViewItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_viewOptions, doc_QAbstractItemView_viewOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_state, "state(self) -> QAbstractItemView.State");

extern "C" {static PyObject *meth_QAbstractItemView_state(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_state(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_state();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractItemView_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_state, doc_QAbstractItemView_state);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setState, "setState(self, QAbstractItemView.State)");

extern "C" {static PyObject *meth_QAbstractItemView_setState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_State, &a0))
        {
            sipCpp->sipProtect_setState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setState, doc_QAbstractItemView_setState);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_scheduleDelayedItemsLayout, "scheduleDelayedItemsLayout(self)");

extern "C" {static PyObject *meth_QAbstractItemView_scheduleDelayedItemsLayout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_scheduleDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            sipCpp->sipProtect_scheduleDelayedItemsLayout();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_scheduleDelayedItemsLayout, doc_QAbstractItemView_scheduleDelayedItemsLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_executeDelayedItemsLayout, "executeDelayedItemsLayout(self)");

extern "C" {static PyObject *meth_QAbstractItemView_executeDelayedItemsLayout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_executeDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            sipCpp->sipProtect_executeDelayedItemsLayout();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_executeDelayedItemsLayout, doc_QAbstractItemView_executeDelayedItemsLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_scrollDirtyRegion, "scrollDirtyRegion(self, int, int)");

extern "C" {static PyObject *meth_QAbstractItemView_scrollDirtyRegion(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_scrollDirtyRegion(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bii", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_scrollDirtyRegion(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_scrollDirtyRegion, doc_QAbstractItemView_scrollDirtyRegion);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setDirtyRegion, "setDirtyRegion(self, QRegion)");

extern "C" {static PyObject *meth_QAbstractItemView_setDirtyRegion(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setDirtyRegion(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QRegion* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QRegion, &a0))
        {
            sipCpp->sipProtect_setDirtyRegion(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setDirtyRegion, doc_QAbstractItemView_setDirtyRegion);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dirtyRegionOffset, "dirtyRegionOffset(self) -> QPoint");

extern "C" {static PyObject *meth_QAbstractItemView_dirtyRegionOffset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dirtyRegionOffset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->sipProtect_dirtyRegionOffset());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dirtyRegionOffset, doc_QAbstractItemView_dirtyRegionOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_event, doc_QAbstractItemView_event);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_viewportEvent, "viewportEvent(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_viewportEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_viewportEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_viewportEvent(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_viewportEvent, doc_QAbstractItemView_viewportEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_mousePressEvent, doc_QAbstractItemView_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_mouseMoveEvent, doc_QAbstractItemView_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_mouseReleaseEvent, doc_QAbstractItemView_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_mouseDoubleClickEvent, doc_QAbstractItemView_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dragEnterEvent, "dragEnterEvent(self, QDragEnterEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragEnterEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dragEnterEvent, doc_QAbstractItemView_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dragMoveEvent, "dragMoveEvent(self, QDragMoveEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragMoveEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dragMoveEvent, doc_QAbstractItemView_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dragLeaveEvent, "dragLeaveEvent(self, QDragLeaveEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragLeaveEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dragLeaveEvent, doc_QAbstractItemView_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dropEvent, "dropEvent(self, QDropEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDropEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dropEvent, doc_QAbstractItemView_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_focusInEvent, doc_QAbstractItemView_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_focusOutEvent, "focusOutEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_focusOutEvent, doc_QAbstractItemView_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_keyPressEvent, doc_QAbstractItemView_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_resizeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_resizeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QResizeEvent, &a0))
        {
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_resizeEvent, doc_QAbstractItemView_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_timerEvent, doc_QAbstractItemView_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dropIndicatorPosition, "dropIndicatorPosition(self) -> QAbstractItemView.DropIndicatorPosition");

extern "C" {static PyObject *meth_QAbstractItemView_dropIndicatorPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dropIndicatorPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_dropIndicatorPosition();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractItemView_DropIndicatorPosition);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dropIndicatorPosition, doc_QAbstractItemView_dropIndicatorPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setVerticalScrollMode, "setVerticalScrollMode(self, QAbstractItemView.ScrollMode)");

extern "C" {static PyObject *meth_QAbstractItemView_setVerticalScrollMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setVerticalScrollMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractItemView::ScrollMode a0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_ScrollMode, &a0))
        {
            sipCpp->setVerticalScrollMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setVerticalScrollMode, doc_QAbstractItemView_setVerticalScrollMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_verticalScrollMode, "verticalScrollMode(self) -> QAbstractItemView.ScrollMode");

extern "C" {static PyObject *meth_QAbstractItemView_verticalScrollMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_verticalScrollMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
             ::QAbstractItemView::ScrollMode sipRes;

            sipRes = sipCpp->verticalScrollMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractItemView_ScrollMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_verticalScrollMode, doc_QAbstractItemView_verticalScrollMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setHorizontalScrollMode, "setHorizontalScrollMode(self, QAbstractItemView.ScrollMode)");

extern "C" {static PyObject *meth_QAbstractItemView_setHorizontalScrollMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setHorizontalScrollMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractItemView::ScrollMode a0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_ScrollMode, &a0))
        {
            sipCpp->setHorizontalScrollMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setHorizontalScrollMode, doc_QAbstractItemView_setHorizontalScrollMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_horizontalScrollMode, "horizontalScrollMode(self) -> QAbstractItemView.ScrollMode");

extern "C" {static PyObject *meth_QAbstractItemView_horizontalScrollMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_horizontalScrollMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
             ::QAbstractItemView::ScrollMode sipRes;

            sipRes = sipCpp->horizontalScrollMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractItemView_ScrollMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_horizontalScrollMode, doc_QAbstractItemView_horizontalScrollMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setDragDropOverwriteMode, "setDragDropOverwriteMode(self, bool)");

extern "C" {static PyObject *meth_QAbstractItemView_setDragDropOverwriteMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setDragDropOverwriteMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            sipCpp->setDragDropOverwriteMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setDragDropOverwriteMode, doc_QAbstractItemView_setDragDropOverwriteMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dragDropOverwriteMode, "dragDropOverwriteMode(self) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_dragDropOverwriteMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dragDropOverwriteMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->dragDropOverwriteMode();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dragDropOverwriteMode, doc_QAbstractItemView_dragDropOverwriteMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setDragDropMode, "setDragDropMode(self, QAbstractItemView.DragDropMode)");

extern "C" {static PyObject *meth_QAbstractItemView_setDragDropMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setDragDropMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractItemView::DragDropMode a0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_DragDropMode, &a0))
        {
            sipCpp->setDragDropMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setDragDropMode, doc_QAbstractItemView_setDragDropMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dragDropMode, "dragDropMode(self) -> QAbstractItemView.DragDropMode");

extern "C" {static PyObject *meth_QAbstractItemView_dragDropMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dragDropMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
             ::QAbstractItemView::DragDropMode sipRes;

            sipRes = sipCpp->dragDropMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractItemView_DragDropMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dragDropMode, doc_QAbstractItemView_dragDropMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setItemDelegateForRow, "setItemDelegateForRow(self, int, QAbstractItemDelegate)");

extern "C" {static PyObject *meth_QAbstractItemView_setItemDelegateForRow(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setItemDelegateForRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QAbstractItemDelegate* a1;
        PyObject *a1Keep;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi@J8", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0, &a1Keep, sipType_QAbstractItemDelegate, &a1))
        {
            sipCpp->setItemDelegateForRow(a0,a1);

            sipKeepReference(sipSelf, -5, a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setItemDelegateForRow, doc_QAbstractItemView_setItemDelegateForRow);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_itemDelegateForRow, "itemDelegateForRow(self, int) -> QAbstractItemDelegate");

extern "C" {static PyObject *meth_QAbstractItemView_itemDelegateForRow(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_itemDelegateForRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
             ::QAbstractItemDelegate*sipRes;

            sipRes = sipCpp->itemDelegateForRow(a0);

            return sipConvertFromType(sipRes,sipType_QAbstractItemDelegate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_itemDelegateForRow, doc_QAbstractItemView_itemDelegateForRow);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setItemDelegateForColumn, "setItemDelegateForColumn(self, int, QAbstractItemDelegate)");

extern "C" {static PyObject *meth_QAbstractItemView_setItemDelegateForColumn(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setItemDelegateForColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QAbstractItemDelegate* a1;
        PyObject *a1Keep;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi@J8", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0, &a1Keep, sipType_QAbstractItemDelegate, &a1))
        {
            sipCpp->setItemDelegateForColumn(a0,a1);

            sipKeepReference(sipSelf, -6, a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setItemDelegateForColumn, doc_QAbstractItemView_setItemDelegateForColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_itemDelegateForColumn, "itemDelegateForColumn(self, int) -> QAbstractItemDelegate");

extern "C" {static PyObject *meth_QAbstractItemView_itemDelegateForColumn(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_itemDelegateForColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
             ::QAbstractItemDelegate*sipRes;

            sipRes = sipCpp->itemDelegateForColumn(a0);

            return sipConvertFromType(sipRes,sipType_QAbstractItemDelegate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_itemDelegateForColumn, doc_QAbstractItemView_itemDelegateForColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_inputMethodQuery, "inputMethodQuery(self, Qt.InputMethodQuery) -> Any");

extern "C" {static PyObject *meth_QAbstractItemView_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::Qt::InputMethodQuery a0;
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QAbstractItemView::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_inputMethodQuery, doc_QAbstractItemView_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setAutoScrollMargin, "setAutoScrollMargin(self, int)");

extern "C" {static PyObject *meth_QAbstractItemView_setAutoScrollMargin(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setAutoScrollMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            sipCpp->setAutoScrollMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setAutoScrollMargin, doc_QAbstractItemView_setAutoScrollMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_autoScrollMargin, "autoScrollMargin(self) -> int");

extern "C" {static PyObject *meth_QAbstractItemView_autoScrollMargin(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_autoScrollMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->autoScrollMargin();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_autoScrollMargin, doc_QAbstractItemView_autoScrollMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_focusNextPrevChild, "focusNextPrevChild(self, bool) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_focusNextPrevChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_focusNextPrevChild, doc_QAbstractItemView_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_inputMethodEvent, "inputMethodEvent(self, QInputMethodEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QInputMethodEvent* a0;
        sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_inputMethodEvent, doc_QAbstractItemView_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_viewportSizeHint, "viewportSizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QAbstractItemView_viewportSizeHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_viewportSizeHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipQAbstractItemView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->sipProtectVirt_viewportSizeHint(sipSelfWasArg));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_viewportSizeHint, doc_QAbstractItemView_viewportSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setDefaultDropAction, "setDefaultDropAction(self, Qt.DropAction)");

extern "C" {static PyObject *meth_QAbstractItemView_setDefaultDropAction(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setDefaultDropAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::DropAction a0;
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_Qt_DropAction, &a0))
        {
            sipCpp->setDefaultDropAction(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setDefaultDropAction, doc_QAbstractItemView_setDefaultDropAction);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_defaultDropAction, "defaultDropAction(self) -> Qt.DropAction");

extern "C" {static PyObject *meth_QAbstractItemView_defaultDropAction(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_defaultDropAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
             ::Qt::DropAction sipRes;

            sipRes = sipCpp->defaultDropAction();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_DropAction);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_defaultDropAction, doc_QAbstractItemView_defaultDropAction);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_resetVerticalScrollMode, "resetVerticalScrollMode(self)");

extern "C" {static PyObject *meth_QAbstractItemView_resetVerticalScrollMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_resetVerticalScrollMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            sipCpp->resetVerticalScrollMode();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_resetVerticalScrollMode, doc_QAbstractItemView_resetVerticalScrollMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_resetHorizontalScrollMode, "resetHorizontalScrollMode(self)");

extern "C" {static PyObject *meth_QAbstractItemView_resetHorizontalScrollMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_resetHorizontalScrollMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            sipCpp->resetHorizontalScrollMode();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_resetHorizontalScrollMode, doc_QAbstractItemView_resetHorizontalScrollMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_isPersistentEditorOpen, "isPersistentEditorOpen(self, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_isPersistentEditorOpen(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_isPersistentEditorOpen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isPersistentEditorOpen(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_isPersistentEditorOpen, doc_QAbstractItemView_isPersistentEditorOpen);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractItemView(void *, const sipTypeDef *);}
static void *cast_QAbstractItemView(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractItemView *sipCpp = reinterpret_cast< ::QAbstractItemView *>(sipCppV);

    if (targetType == sipType_QAbstractScrollArea)
        return static_cast< ::QAbstractScrollArea *>(sipCpp);

    if (targetType == sipType_QFrame)
        return static_cast< ::QFrame *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractItemView(void *, int);}
static void release_QAbstractItemView(void *sipCppV, int)
{
     ::QAbstractItemView *sipCpp = reinterpret_cast< ::QAbstractItemView *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractItemView(sipSimpleWrapper *);}
static void dealloc_QAbstractItemView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractItemView *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractItemView(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractItemView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractItemView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractItemView *sipCpp = 0;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractItemView(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractItemView[] = {{15, 255, 1}};


static PyMethodDef methods_QAbstractItemView[] = {
    {SIP_MLNAME_CAST(sipName_actionEvent), (PyCFunction)meth_QAbstractItemView_actionEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_alternatingRowColors), meth_QAbstractItemView_alternatingRowColors, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_alternatingRowColors)},
    {SIP_MLNAME_CAST(sipName_autoScrollMargin), meth_QAbstractItemView_autoScrollMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_autoScrollMargin)},
    {SIP_MLNAME_CAST(sipName_changeEvent), (PyCFunction)meth_QAbstractItemView_changeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QAbstractItemView_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_clearSelection), meth_QAbstractItemView_clearSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_clearSelection)},
    {SIP_MLNAME_CAST(sipName_closeEditor), (PyCFunction)meth_QAbstractItemView_closeEditor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_closeEditor)},
    {SIP_MLNAME_CAST(sipName_closeEvent), (PyCFunction)meth_QAbstractItemView_closeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_closePersistentEditor), meth_QAbstractItemView_closePersistentEditor, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_closePersistentEditor)},
    {SIP_MLNAME_CAST(sipName_commitData), (PyCFunction)meth_QAbstractItemView_commitData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_commitData)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QAbstractItemView_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), (PyCFunction)meth_QAbstractItemView_contextMenuEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QAbstractItemView_create, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_currentChanged), (PyCFunction)meth_QAbstractItemView_currentChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_currentChanged)},
    {SIP_MLNAME_CAST(sipName_currentIndex), meth_QAbstractItemView_currentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_currentIndex)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QAbstractItemView_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dataChanged), (PyCFunction)meth_QAbstractItemView_dataChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_dataChanged)},
    {SIP_MLNAME_CAST(sipName_defaultDropAction), meth_QAbstractItemView_defaultDropAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_defaultDropAction)},
    {SIP_MLNAME_CAST(sipName_destroy), (PyCFunction)meth_QAbstractItemView_destroy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dirtyRegionOffset), (PyCFunction)meth_QAbstractItemView_dirtyRegionOffset, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_dirtyRegionOffset)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QAbstractItemView_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragDropMode), meth_QAbstractItemView_dragDropMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dragDropMode)},
    {SIP_MLNAME_CAST(sipName_dragDropOverwriteMode), meth_QAbstractItemView_dragDropOverwriteMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dragDropOverwriteMode)},
    {SIP_MLNAME_CAST(sipName_dragEnabled), meth_QAbstractItemView_dragEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dragEnabled)},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QAbstractItemView_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QAbstractItemView_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QAbstractItemView_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_drawFrame), (PyCFunction)meth_QAbstractItemView_drawFrame, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QAbstractItemView_dropEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_dropEvent)},
    {SIP_MLNAME_CAST(sipName_dropIndicatorPosition), (PyCFunction)meth_QAbstractItemView_dropIndicatorPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_dropIndicatorPosition)},
    {SIP_MLNAME_CAST(sipName_edit), (PyCFunction)meth_QAbstractItemView_edit, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_edit)},
    {SIP_MLNAME_CAST(sipName_editTriggers), meth_QAbstractItemView_editTriggers, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_editTriggers)},
    {SIP_MLNAME_CAST(sipName_editorDestroyed), (PyCFunction)meth_QAbstractItemView_editorDestroyed, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_editorDestroyed)},
    {SIP_MLNAME_CAST(sipName_enterEvent), (PyCFunction)meth_QAbstractItemView_enterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QAbstractItemView_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_event)},
    {SIP_MLNAME_CAST(sipName_eventFilter), (PyCFunction)meth_QAbstractItemView_eventFilter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_executeDelayedItemsLayout), (PyCFunction)meth_QAbstractItemView_executeDelayedItemsLayout, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_executeDelayedItemsLayout)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QAbstractItemView_focusInEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusNextChild), (PyCFunction)meth_QAbstractItemView_focusNextChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), (PyCFunction)meth_QAbstractItemView_focusNextPrevChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QAbstractItemView_focusOutEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), (PyCFunction)meth_QAbstractItemView_focusPreviousChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_hasAutoScroll), meth_QAbstractItemView_hasAutoScroll, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_hasAutoScroll)},
    {SIP_MLNAME_CAST(sipName_hideEvent), (PyCFunction)meth_QAbstractItemView_hideEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalOffset), (PyCFunction)meth_QAbstractItemView_horizontalOffset, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_horizontalOffset)},
    {SIP_MLNAME_CAST(sipName_horizontalScrollMode), meth_QAbstractItemView_horizontalScrollMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_horizontalScrollMode)},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarAction), (PyCFunction)meth_QAbstractItemView_horizontalScrollbarAction, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_horizontalScrollbarAction)},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarValueChanged), (PyCFunction)meth_QAbstractItemView_horizontalScrollbarValueChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_horizontalScrollbarValueChanged)},
    {SIP_MLNAME_CAST(sipName_iconSize), meth_QAbstractItemView_iconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_iconSize)},
    {SIP_MLNAME_CAST(sipName_indexAt), meth_QAbstractItemView_indexAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_indexAt)},
    {SIP_MLNAME_CAST(sipName_indexWidget), meth_QAbstractItemView_indexWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_indexWidget)},
    {SIP_MLNAME_CAST(sipName_initPainter), (PyCFunction)meth_QAbstractItemView_initPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_initStyleOption), (PyCFunction)meth_QAbstractItemView_initStyleOption, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QAbstractItemView_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_inputMethodEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QAbstractItemView_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_isIndexHidden), (PyCFunction)meth_QAbstractItemView_isIndexHidden, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_isIndexHidden)},
    {SIP_MLNAME_CAST(sipName_isPersistentEditorOpen), meth_QAbstractItemView_isPersistentEditorOpen, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_isPersistentEditorOpen)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QAbstractItemView_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_itemDelegate), meth_QAbstractItemView_itemDelegate, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_itemDelegate)},
    {SIP_MLNAME_CAST(sipName_itemDelegateForColumn), meth_QAbstractItemView_itemDelegateForColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_itemDelegateForColumn)},
    {SIP_MLNAME_CAST(sipName_itemDelegateForRow), meth_QAbstractItemView_itemDelegateForRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_itemDelegateForRow)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QAbstractItemView_keyPressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QAbstractItemView_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyboardSearch), meth_QAbstractItemView_keyboardSearch, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_keyboardSearch)},
    {SIP_MLNAME_CAST(sipName_leaveEvent), (PyCFunction)meth_QAbstractItemView_leaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), (PyCFunction)meth_QAbstractItemView_metric, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_model), meth_QAbstractItemView_model, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_model)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QAbstractItemView_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QAbstractItemView_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QAbstractItemView_mousePressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QAbstractItemView_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveCursor), (PyCFunction)meth_QAbstractItemView_moveCursor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_moveCursor)},
    {SIP_MLNAME_CAST(sipName_moveEvent), (PyCFunction)meth_QAbstractItemView_moveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_nativeEvent), (PyCFunction)meth_QAbstractItemView_nativeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_openPersistentEditor), meth_QAbstractItemView_openPersistentEditor, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_openPersistentEditor)},
    {SIP_MLNAME_CAST(sipName_paintEvent), (PyCFunction)meth_QAbstractItemView_paintEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QAbstractItemView_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_reset), meth_QAbstractItemView_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_reset)},
    {SIP_MLNAME_CAST(sipName_resetHorizontalScrollMode), meth_QAbstractItemView_resetHorizontalScrollMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_resetHorizontalScrollMode)},
    {SIP_MLNAME_CAST(sipName_resetVerticalScrollMode), meth_QAbstractItemView_resetVerticalScrollMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_resetVerticalScrollMode)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), (PyCFunction)meth_QAbstractItemView_resizeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_rootIndex), meth_QAbstractItemView_rootIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_rootIndex)},
    {SIP_MLNAME_CAST(sipName_rowsAboutToBeRemoved), (PyCFunction)meth_QAbstractItemView_rowsAboutToBeRemoved, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_rowsAboutToBeRemoved)},
    {SIP_MLNAME_CAST(sipName_rowsInserted), (PyCFunction)meth_QAbstractItemView_rowsInserted, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_rowsInserted)},
    {SIP_MLNAME_CAST(sipName_scheduleDelayedItemsLayout), (PyCFunction)meth_QAbstractItemView_scheduleDelayedItemsLayout, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_scheduleDelayedItemsLayout)},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), (PyCFunction)meth_QAbstractItemView_scrollContentsBy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollDirtyRegion), (PyCFunction)meth_QAbstractItemView_scrollDirtyRegion, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_scrollDirtyRegion)},
    {SIP_MLNAME_CAST(sipName_scrollTo), (PyCFunction)meth_QAbstractItemView_scrollTo, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_scrollTo)},
    {SIP_MLNAME_CAST(sipName_scrollToBottom), meth_QAbstractItemView_scrollToBottom, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_scrollToBottom)},
    {SIP_MLNAME_CAST(sipName_scrollToTop), meth_QAbstractItemView_scrollToTop, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_scrollToTop)},
    {SIP_MLNAME_CAST(sipName_selectAll), meth_QAbstractItemView_selectAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_selectAll)},
    {SIP_MLNAME_CAST(sipName_selectedIndexes), (PyCFunction)meth_QAbstractItemView_selectedIndexes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_selectedIndexes)},
    {SIP_MLNAME_CAST(sipName_selectionBehavior), meth_QAbstractItemView_selectionBehavior, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_selectionBehavior)},
    {SIP_MLNAME_CAST(sipName_selectionChanged), (PyCFunction)meth_QAbstractItemView_selectionChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_selectionChanged)},
    {SIP_MLNAME_CAST(sipName_selectionCommand), (PyCFunction)meth_QAbstractItemView_selectionCommand, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_selectionCommand)},
    {SIP_MLNAME_CAST(sipName_selectionMode), meth_QAbstractItemView_selectionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_selectionMode)},
    {SIP_MLNAME_CAST(sipName_selectionModel), meth_QAbstractItemView_selectionModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_selectionModel)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QAbstractItemView_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QAbstractItemView_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setAlternatingRowColors), meth_QAbstractItemView_setAlternatingRowColors, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setAlternatingRowColors)},
    {SIP_MLNAME_CAST(sipName_setAutoScroll), meth_QAbstractItemView_setAutoScroll, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setAutoScroll)},
    {SIP_MLNAME_CAST(sipName_setAutoScrollMargin), meth_QAbstractItemView_setAutoScrollMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setAutoScrollMargin)},
    {SIP_MLNAME_CAST(sipName_setCurrentIndex), meth_QAbstractItemView_setCurrentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setCurrentIndex)},
    {SIP_MLNAME_CAST(sipName_setDefaultDropAction), meth_QAbstractItemView_setDefaultDropAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setDefaultDropAction)},
    {SIP_MLNAME_CAST(sipName_setDirtyRegion), (PyCFunction)meth_QAbstractItemView_setDirtyRegion, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_setDirtyRegion)},
    {SIP_MLNAME_CAST(sipName_setDragDropMode), meth_QAbstractItemView_setDragDropMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setDragDropMode)},
    {SIP_MLNAME_CAST(sipName_setDragDropOverwriteMode), meth_QAbstractItemView_setDragDropOverwriteMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setDragDropOverwriteMode)},
    {SIP_MLNAME_CAST(sipName_setDragEnabled), meth_QAbstractItemView_setDragEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setDragEnabled)},
    {SIP_MLNAME_CAST(sipName_setDropIndicatorShown), meth_QAbstractItemView_setDropIndicatorShown, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setDropIndicatorShown)},
    {SIP_MLNAME_CAST(sipName_setEditTriggers), meth_QAbstractItemView_setEditTriggers, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setEditTriggers)},
    {SIP_MLNAME_CAST(sipName_setHorizontalScrollMode), meth_QAbstractItemView_setHorizontalScrollMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setHorizontalScrollMode)},
    {SIP_MLNAME_CAST(sipName_setIconSize), meth_QAbstractItemView_setIconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setIconSize)},
    {SIP_MLNAME_CAST(sipName_setIndexWidget), meth_QAbstractItemView_setIndexWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setIndexWidget)},
    {SIP_MLNAME_CAST(sipName_setItemDelegate), meth_QAbstractItemView_setItemDelegate, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setItemDelegate)},
    {SIP_MLNAME_CAST(sipName_setItemDelegateForColumn), meth_QAbstractItemView_setItemDelegateForColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setItemDelegateForColumn)},
    {SIP_MLNAME_CAST(sipName_setItemDelegateForRow), meth_QAbstractItemView_setItemDelegateForRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setItemDelegateForRow)},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QAbstractItemView_setModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setModel)},
    {SIP_MLNAME_CAST(sipName_setRootIndex), meth_QAbstractItemView_setRootIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setRootIndex)},
    {SIP_MLNAME_CAST(sipName_setSelection), (PyCFunction)meth_QAbstractItemView_setSelection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_setSelection)},
    {SIP_MLNAME_CAST(sipName_setSelectionBehavior), meth_QAbstractItemView_setSelectionBehavior, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setSelectionBehavior)},
    {SIP_MLNAME_CAST(sipName_setSelectionMode), meth_QAbstractItemView_setSelectionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setSelectionMode)},
    {SIP_MLNAME_CAST(sipName_setSelectionModel), meth_QAbstractItemView_setSelectionModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setSelectionModel)},
    {SIP_MLNAME_CAST(sipName_setState), (PyCFunction)meth_QAbstractItemView_setState, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_setState)},
    {SIP_MLNAME_CAST(sipName_setTabKeyNavigation), meth_QAbstractItemView_setTabKeyNavigation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setTabKeyNavigation)},
    {SIP_MLNAME_CAST(sipName_setTextElideMode), meth_QAbstractItemView_setTextElideMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setTextElideMode)},
    {SIP_MLNAME_CAST(sipName_setVerticalScrollMode), meth_QAbstractItemView_setVerticalScrollMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setVerticalScrollMode)},
    {SIP_MLNAME_CAST(sipName_setViewportMargins), (PyCFunction)meth_QAbstractItemView_setViewportMargins, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sharedPainter), (PyCFunction)meth_QAbstractItemView_sharedPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_showDropIndicator), meth_QAbstractItemView_showDropIndicator, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_showDropIndicator)},
    {SIP_MLNAME_CAST(sipName_showEvent), (PyCFunction)meth_QAbstractItemView_showEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeHintForColumn), meth_QAbstractItemView_sizeHintForColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_sizeHintForColumn)},
    {SIP_MLNAME_CAST(sipName_sizeHintForIndex), meth_QAbstractItemView_sizeHintForIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_sizeHintForIndex)},
    {SIP_MLNAME_CAST(sipName_sizeHintForRow), meth_QAbstractItemView_sizeHintForRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_sizeHintForRow)},
    {SIP_MLNAME_CAST(sipName_startDrag), (PyCFunction)meth_QAbstractItemView_startDrag, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_startDrag)},
    {SIP_MLNAME_CAST(sipName_state), (PyCFunction)meth_QAbstractItemView_state, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_state)},
    {SIP_MLNAME_CAST(sipName_tabKeyNavigation), meth_QAbstractItemView_tabKeyNavigation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_tabKeyNavigation)},
    {SIP_MLNAME_CAST(sipName_tabletEvent), (PyCFunction)meth_QAbstractItemView_tabletEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_textElideMode), meth_QAbstractItemView_textElideMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_textElideMode)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QAbstractItemView_timerEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_timerEvent)},
    {SIP_MLNAME_CAST(sipName_update), meth_QAbstractItemView_update, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_update)},
    {SIP_MLNAME_CAST(sipName_updateEditorData), (PyCFunction)meth_QAbstractItemView_updateEditorData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_updateEditorData)},
    {SIP_MLNAME_CAST(sipName_updateEditorGeometries), (PyCFunction)meth_QAbstractItemView_updateEditorGeometries, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_updateEditorGeometries)},
    {SIP_MLNAME_CAST(sipName_updateGeometries), (PyCFunction)meth_QAbstractItemView_updateGeometries, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_updateGeometries)},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), (PyCFunction)meth_QAbstractItemView_updateMicroFocus, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalOffset), (PyCFunction)meth_QAbstractItemView_verticalOffset, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_verticalOffset)},
    {SIP_MLNAME_CAST(sipName_verticalScrollMode), meth_QAbstractItemView_verticalScrollMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_verticalScrollMode)},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarAction), (PyCFunction)meth_QAbstractItemView_verticalScrollbarAction, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_verticalScrollbarAction)},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarValueChanged), (PyCFunction)meth_QAbstractItemView_verticalScrollbarValueChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_verticalScrollbarValueChanged)},
    {SIP_MLNAME_CAST(sipName_viewOptions), (PyCFunction)meth_QAbstractItemView_viewOptions, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_viewOptions)},
    {SIP_MLNAME_CAST(sipName_viewportEvent), (PyCFunction)meth_QAbstractItemView_viewportEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_viewportEvent)},
    {SIP_MLNAME_CAST(sipName_viewportMargins), (PyCFunction)meth_QAbstractItemView_viewportMargins, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_viewportSizeHint), (PyCFunction)meth_QAbstractItemView_viewportSizeHint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_viewportSizeHint)},
    {SIP_MLNAME_CAST(sipName_visualRect), meth_QAbstractItemView_visualRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_visualRect)},
    {SIP_MLNAME_CAST(sipName_visualRegionForSelection), (PyCFunction)meth_QAbstractItemView_visualRegionForSelection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_visualRegionForSelection)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QAbstractItemView_wheelEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};

static sipEnumMemberDef enummembers_QAbstractItemView[] = {
    {sipName_AboveItem, static_cast<int>(sipQAbstractItemView::AboveItem), 7},
    {sipName_AllEditTriggers, static_cast<int>( ::QAbstractItemView::AllEditTriggers), 8},
    {sipName_AnimatingState, static_cast<int>(sipQAbstractItemView::AnimatingState), 14},
    {sipName_AnyKeyPressed, static_cast<int>( ::QAbstractItemView::AnyKeyPressed), 8},
    {sipName_BelowItem, static_cast<int>(sipQAbstractItemView::BelowItem), 7},
    {sipName_CollapsingState, static_cast<int>(sipQAbstractItemView::CollapsingState), 14},
    {sipName_ContiguousSelection, static_cast<int>( ::QAbstractItemView::ContiguousSelection), 13},
    {sipName_CurrentChanged, static_cast<int>( ::QAbstractItemView::CurrentChanged), 8},
    {sipName_DoubleClicked, static_cast<int>( ::QAbstractItemView::DoubleClicked), 8},
    {sipName_DragDrop, static_cast<int>( ::QAbstractItemView::DragDrop), 6},
    {sipName_DragOnly, static_cast<int>( ::QAbstractItemView::DragOnly), 6},
    {sipName_DragSelectingState, static_cast<int>(sipQAbstractItemView::DragSelectingState), 14},
    {sipName_DraggingState, static_cast<int>(sipQAbstractItemView::DraggingState), 14},
    {sipName_DropOnly, static_cast<int>( ::QAbstractItemView::DropOnly), 6},
    {sipName_EditKeyPressed, static_cast<int>( ::QAbstractItemView::EditKeyPressed), 8},
    {sipName_EditingState, static_cast<int>(sipQAbstractItemView::EditingState), 14},
    {sipName_EnsureVisible, static_cast<int>( ::QAbstractItemView::EnsureVisible), 10},
    {sipName_ExpandingState, static_cast<int>(sipQAbstractItemView::ExpandingState), 14},
    {sipName_ExtendedSelection, static_cast<int>( ::QAbstractItemView::ExtendedSelection), 13},
    {sipName_InternalMove, static_cast<int>( ::QAbstractItemView::InternalMove), 6},
    {sipName_MoveDown, static_cast<int>(sipQAbstractItemView::MoveDown), 5},
    {sipName_MoveEnd, static_cast<int>(sipQAbstractItemView::MoveEnd), 5},
    {sipName_MoveHome, static_cast<int>(sipQAbstractItemView::MoveHome), 5},
    {sipName_MoveLeft, static_cast<int>(sipQAbstractItemView::MoveLeft), 5},
    {sipName_MoveNext, static_cast<int>(sipQAbstractItemView::MoveNext), 5},
    {sipName_MovePageDown, static_cast<int>(sipQAbstractItemView::MovePageDown), 5},
    {sipName_MovePageUp, static_cast<int>(sipQAbstractItemView::MovePageUp), 5},
    {sipName_MovePrevious, static_cast<int>(sipQAbstractItemView::MovePrevious), 5},
    {sipName_MoveRight, static_cast<int>(sipQAbstractItemView::MoveRight), 5},
    {sipName_MoveUp, static_cast<int>(sipQAbstractItemView::MoveUp), 5},
    {sipName_MultiSelection, static_cast<int>( ::QAbstractItemView::MultiSelection), 13},
    {sipName_NoDragDrop, static_cast<int>( ::QAbstractItemView::NoDragDrop), 6},
    {sipName_NoEditTriggers, static_cast<int>( ::QAbstractItemView::NoEditTriggers), 8},
    {sipName_NoSelection, static_cast<int>( ::QAbstractItemView::NoSelection), 13},
    {sipName_NoState, static_cast<int>(sipQAbstractItemView::NoState), 14},
    {sipName_OnItem, static_cast<int>(sipQAbstractItemView::OnItem), 7},
    {sipName_OnViewport, static_cast<int>(sipQAbstractItemView::OnViewport), 7},
    {sipName_PositionAtBottom, static_cast<int>( ::QAbstractItemView::PositionAtBottom), 10},
    {sipName_PositionAtCenter, static_cast<int>( ::QAbstractItemView::PositionAtCenter), 10},
    {sipName_PositionAtTop, static_cast<int>( ::QAbstractItemView::PositionAtTop), 10},
    {sipName_ScrollPerItem, static_cast<int>( ::QAbstractItemView::ScrollPerItem), 11},
    {sipName_ScrollPerPixel, static_cast<int>( ::QAbstractItemView::ScrollPerPixel), 11},
    {sipName_SelectColumns, static_cast<int>( ::QAbstractItemView::SelectColumns), 12},
    {sipName_SelectItems, static_cast<int>( ::QAbstractItemView::SelectItems), 12},
    {sipName_SelectRows, static_cast<int>( ::QAbstractItemView::SelectRows), 12},
    {sipName_SelectedClicked, static_cast<int>( ::QAbstractItemView::SelectedClicked), 8},
    {sipName_SingleSelection, static_cast<int>( ::QAbstractItemView::SingleSelection), 13},
};

PyDoc_STRVAR(doc_QAbstractItemView, "\1QAbstractItemView(parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractItemView[] = {
    {"iconSizeChanged(QSize)", "\1iconSizeChanged(self, QSize)", 0, 0},
    {"viewportEntered()", "\1viewportEntered(self)", 0, 0},
    {"entered(QModelIndex)", "\1entered(self, QModelIndex)", 0, 0},
    {"activated(QModelIndex)", "\1activated(self, QModelIndex)", 0, 0},
    {"doubleClicked(QModelIndex)", "\1doubleClicked(self, QModelIndex)", 0, 0},
    {"clicked(QModelIndex)", "\1clicked(self, QModelIndex)", 0, 0},
    {"pressed(QModelIndex)", "\1pressed(self, QModelIndex)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QAbstractItemView = {
    & ::QAbstractItemView::staticMetaObject,
    0,
    signals_QAbstractItemView,
    0
};


sipClassTypeDef sipTypeDef_QtWidgets_QAbstractItemView = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractItemView,
        {0},
        &plugin_QAbstractItemView
    },
    {
        sipNameNr_QAbstractItemView,
        {0, 0, 1},
        155, methods_QAbstractItemView,
        47, enummembers_QAbstractItemView,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractItemView,
    -1,
    -1,
    supers_QAbstractItemView,
    0,
    init_type_QAbstractItemView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractItemView,
    0,
    0,
    0,
    release_QAbstractItemView,
    cast_QAbstractItemView,
    0,
    0,
    0,
    0,
    0,
    0
};
