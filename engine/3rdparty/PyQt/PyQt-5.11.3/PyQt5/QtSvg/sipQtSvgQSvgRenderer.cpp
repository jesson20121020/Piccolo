/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSvg.h"

#include <qsvgrenderer.h>

#include <qobject.h>
#include <qstring.h>
#include <qbytearray.h>
#include <qxmlstream.h>
#include <qpainter.h>
#include <qrect.h>
#include <qrect.h>
#include <qsize.h>
#include <qmetaobject.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qvariant.h>
#include <qlist.h>
#include <qlist.h>
#include <qnamespace.h>
#include <qthread.h>
#include <qnamespace.h>
#include <qregexp.h>
#include <qregularexpression.h>
#include <qobjectdefs.h>


class sipQSvgRenderer : public  ::QSvgRenderer
{
public:
    sipQSvgRenderer( ::QObject*);
    sipQSvgRenderer(const  ::QString&, ::QObject*);
    sipQSvgRenderer(const  ::QByteArray&, ::QObject*);
    sipQSvgRenderer( ::QXmlStreamReader*, ::QObject*);
    virtual ~sipQSvgRenderer();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const  ::QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const  ::QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const  ::QMetaMethod&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSvgRenderer(const sipQSvgRenderer &);
    sipQSvgRenderer &operator = (const sipQSvgRenderer &);

    char sipPyMethods[7];
};

sipQSvgRenderer::sipQSvgRenderer( ::QObject*a0):  ::QSvgRenderer(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSvgRenderer::sipQSvgRenderer(const  ::QString& a0, ::QObject*a1):  ::QSvgRenderer(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSvgRenderer::sipQSvgRenderer(const  ::QByteArray& a0, ::QObject*a1):  ::QSvgRenderer(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSvgRenderer::sipQSvgRenderer( ::QXmlStreamReader*a0, ::QObject*a1):  ::QSvgRenderer(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSvgRenderer::~sipQSvgRenderer()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSvgRenderer::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtSvg_qt_metaobject(sipPySelf,sipType_QSvgRenderer);

    return  ::QSvgRenderer::metaObject();
}

int sipQSvgRenderer::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSvgRenderer::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtSvg_qt_metacall(sipPySelf,sipType_QSvgRenderer,_c,_id,_a);

    return _id;
}

void *sipQSvgRenderer::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtSvg_qt_metacast(sipPySelf, sipType_QSvgRenderer, _clname, &sipCpp) ? sipCpp :  ::QSvgRenderer::qt_metacast(_clname));
}

bool sipQSvgRenderer::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QSvgRenderer::event(a0);

    extern bool sipVH_QtSvg_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtSvg_18(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSvgRenderer::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSvgRenderer::eventFilter(a0,a1);

    extern bool sipVH_QtSvg_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtSvg_21(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQSvgRenderer::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSvgRenderer::timerEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtSvg_22(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgRenderer::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSvgRenderer::childEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtSvg_23(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgRenderer::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSvgRenderer::customEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtSvg_24(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgRenderer::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSvgRenderer::connectNotify(a0);
        return;
    }

    extern void sipVH_QtSvg_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtSvg_25(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgRenderer::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSvgRenderer::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtSvg_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtSvg_25(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQSvgRenderer::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipQSvgRenderer::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipQSvgRenderer::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQSvgRenderer::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipQSvgRenderer::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipQSvgRenderer::sipProtectVirt_connectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQSvgRenderer::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQSvgRenderer::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}

bool sipQSvgRenderer::sipProtect_isSignalConnected(const  ::QMetaMethod& a0) const
{
    return  ::QObject::isSignalConnected(a0);
}


PyDoc_STRVAR(doc_QSvgRenderer_sender, "sender(self) -> QObject");

extern "C" {static PyObject *meth_QSvgRenderer_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSvgRenderer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
             ::QObject*sipRes = 0;

        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_sender, doc_QSvgRenderer_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_receivers, "receivers(self, PYQT_SIGNAL) -> int");

extern "C" {static PyObject *meth_QSvgRenderer_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQSvgRenderer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QSvgRenderer, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_receivers, doc_QSvgRenderer_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QSvgRenderer_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipQSvgRenderer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_timerEvent, doc_QSvgRenderer_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_childEvent, "childEvent(self, QChildEvent)");

extern "C" {static PyObject *meth_QSvgRenderer_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipQSvgRenderer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_childEvent, doc_QSvgRenderer_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_customEvent, "customEvent(self, QEvent)");

extern "C" {static PyObject *meth_QSvgRenderer_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQSvgRenderer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_customEvent, doc_QSvgRenderer_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_connectNotify, "connectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QSvgRenderer_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQSvgRenderer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_connectNotify, doc_QSvgRenderer_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_disconnectNotify, "disconnectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QSvgRenderer_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQSvgRenderer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_disconnectNotify, doc_QSvgRenderer_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_senderSignalIndex, "senderSignalIndex(self) -> int");

extern "C" {static PyObject *meth_QSvgRenderer_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSvgRenderer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_senderSignalIndex, doc_QSvgRenderer_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_isSignalConnected, "isSignalConnected(self, QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QSvgRenderer_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMetaMethod* a0;
        const sipQSvgRenderer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_isSignalConnected, doc_QSvgRenderer_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QSvgRenderer_isValid(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_isValid, doc_QSvgRenderer_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_defaultSize, "defaultSize(self) -> QSize");

extern "C" {static PyObject *meth_QSvgRenderer_defaultSize(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_defaultSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->defaultSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_defaultSize, doc_QSvgRenderer_defaultSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_elementExists, "elementExists(self, str) -> bool");

extern "C" {static PyObject *meth_QSvgRenderer_elementExists(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_elementExists(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->elementExists(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_elementExists, doc_QSvgRenderer_elementExists);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_viewBox, "viewBox(self) -> QRect");

extern "C" {static PyObject *meth_QSvgRenderer_viewBox(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_viewBox(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->viewBox());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_viewBox, doc_QSvgRenderer_viewBox);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_viewBoxF, "viewBoxF(self) -> QRectF");

extern "C" {static PyObject *meth_QSvgRenderer_viewBoxF(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_viewBoxF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->viewBoxF());

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_viewBoxF, doc_QSvgRenderer_viewBoxF);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_setViewBox, "setViewBox(self, QRect)\n"
"setViewBox(self, QRectF)");

extern "C" {static PyObject *meth_QSvgRenderer_setViewBox(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_setViewBox(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QRect* a0;
         ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setViewBox(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRectF* a0;
         ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->setViewBox(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_setViewBox, doc_QSvgRenderer_setViewBox);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_animated, "animated(self) -> bool");

extern "C" {static PyObject *meth_QSvgRenderer_animated(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_animated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->animated();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_animated, doc_QSvgRenderer_animated);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_boundsOnElement, "boundsOnElement(self, str) -> QRectF");

extern "C" {static PyObject *meth_QSvgRenderer_boundsOnElement(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_boundsOnElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->boundsOnElement(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_boundsOnElement, doc_QSvgRenderer_boundsOnElement);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_framesPerSecond, "framesPerSecond(self) -> int");

extern "C" {static PyObject *meth_QSvgRenderer_framesPerSecond(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_framesPerSecond(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->framesPerSecond();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_framesPerSecond, doc_QSvgRenderer_framesPerSecond);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_setFramesPerSecond, "setFramesPerSecond(self, int)");

extern "C" {static PyObject *meth_QSvgRenderer_setFramesPerSecond(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_setFramesPerSecond(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSvgRenderer, &sipCpp, &a0))
        {
            sipCpp->setFramesPerSecond(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_setFramesPerSecond, doc_QSvgRenderer_setFramesPerSecond);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_currentFrame, "currentFrame(self) -> int");

extern "C" {static PyObject *meth_QSvgRenderer_currentFrame(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_currentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentFrame();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_currentFrame, doc_QSvgRenderer_currentFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_setCurrentFrame, "setCurrentFrame(self, int)");

extern "C" {static PyObject *meth_QSvgRenderer_setCurrentFrame(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_setCurrentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSvgRenderer, &sipCpp, &a0))
        {
            sipCpp->setCurrentFrame(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_setCurrentFrame, doc_QSvgRenderer_setCurrentFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_animationDuration, "animationDuration(self) -> int");

extern "C" {static PyObject *meth_QSvgRenderer_animationDuration(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_animationDuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->animationDuration();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_animationDuration, doc_QSvgRenderer_animationDuration);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_load, "load(self, str) -> bool\n"
"load(self, Union[QByteArray, bytes, bytearray]) -> bool\n"
"load(self, QXmlStreamReader) -> bool");

extern "C" {static PyObject *meth_QSvgRenderer_load(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QXmlStreamReader* a0;
         ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QXmlStreamReader, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_load, doc_QSvgRenderer_load);

    return NULL;
}


PyDoc_STRVAR(doc_QSvgRenderer_render, "render(self, QPainter)\n"
"render(self, QPainter, QRectF)\n"
"render(self, QPainter, str, bounds: QRectF = QRectF())");

extern "C" {static PyObject *meth_QSvgRenderer_render(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_render(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPainter* a0;
         ::QSvgRenderer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QPainter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->render(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QPainter* a0;
        const  ::QRectF* a1;
         ::QSvgRenderer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J9", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QPainter, &a0, sipType_QRectF, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->render(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QPainter* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QRectF& a2def = QRectF();
        const  ::QRectF* a2 = &a2def;
         ::QSvgRenderer *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_bounds,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J1|J9", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QPainter, &a0, sipType_QString,&a1, &a1State, sipType_QRectF, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->render(a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_render, doc_QSvgRenderer_render);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSvgRenderer(void *, const sipTypeDef *);}
static void *cast_QSvgRenderer(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSvgRenderer *sipCpp = reinterpret_cast< ::QSvgRenderer *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSvgRenderer(void *, int);}
static void release_QSvgRenderer(void *sipCppV, int)
{
     ::QSvgRenderer *sipCpp = reinterpret_cast< ::QSvgRenderer *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSvgRenderer(sipSimpleWrapper *);}
static void dealloc_QSvgRenderer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSvgRenderer *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSvgRenderer(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSvgRenderer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSvgRenderer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSvgRenderer *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQSvgRenderer(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSvgRenderer(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QByteArray, &a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSvgRenderer(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QXmlStreamReader* a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_QXmlStreamReader, &a0, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSvgRenderer(a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSvgRenderer[] = {{5, 0, 1}};


static PyMethodDef methods_QSvgRenderer[] = {
    {SIP_MLNAME_CAST(sipName_animated), meth_QSvgRenderer_animated, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_animated)},
    {SIP_MLNAME_CAST(sipName_animationDuration), meth_QSvgRenderer_animationDuration, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_animationDuration)},
    {SIP_MLNAME_CAST(sipName_boundsOnElement), meth_QSvgRenderer_boundsOnElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_boundsOnElement)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QSvgRenderer_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QSvgRenderer_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_currentFrame), meth_QSvgRenderer_currentFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_currentFrame)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QSvgRenderer_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_defaultSize), meth_QSvgRenderer_defaultSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_defaultSize)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QSvgRenderer_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_elementExists), meth_QSvgRenderer_elementExists, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_elementExists)},
    {SIP_MLNAME_CAST(sipName_framesPerSecond), meth_QSvgRenderer_framesPerSecond, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_framesPerSecond)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QSvgRenderer_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QSvgRenderer_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_isValid)},
    {SIP_MLNAME_CAST(sipName_load), meth_QSvgRenderer_load, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_load)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QSvgRenderer_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_render), (PyCFunction)meth_QSvgRenderer_render, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSvgRenderer_render)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QSvgRenderer_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QSvgRenderer_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrentFrame), meth_QSvgRenderer_setCurrentFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_setCurrentFrame)},
    {SIP_MLNAME_CAST(sipName_setFramesPerSecond), meth_QSvgRenderer_setFramesPerSecond, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_setFramesPerSecond)},
    {SIP_MLNAME_CAST(sipName_setViewBox), meth_QSvgRenderer_setViewBox, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_setViewBox)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QSvgRenderer_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_viewBox), meth_QSvgRenderer_viewBox, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_viewBox)},
    {SIP_MLNAME_CAST(sipName_viewBoxF), meth_QSvgRenderer_viewBoxF, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_viewBoxF)}
};

PyDoc_STRVAR(doc_QSvgRenderer, "\1QSvgRenderer(parent: QObject = None)\n"
"QSvgRenderer(str, parent: QObject = None)\n"
"QSvgRenderer(Union[QByteArray, bytes, bytearray], parent: QObject = None)\n"
"QSvgRenderer(QXmlStreamReader, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QSvgRenderer[] = {
    {"repaintNeeded()", "\1repaintNeeded(self)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QSvgRenderer = {
    & ::QSvgRenderer::staticMetaObject,
    0,
    signals_QSvgRenderer,
    0
};


sipClassTypeDef sipTypeDef_QtSvg_QSvgRenderer = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSvgRenderer,
        {0},
        &plugin_QSvgRenderer
    },
    {
        sipNameNr_QSvgRenderer,
        {0, 0, 1},
        24, methods_QSvgRenderer,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSvgRenderer,
    -1,
    -1,
    supers_QSvgRenderer,
    0,
    init_type_QSvgRenderer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSvgRenderer,
    0,
    0,
    0,
    release_QSvgRenderer,
    cast_QSvgRenderer,
    0,
    0,
    0,
    0,
    0,
    0
};
