/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#include <qanimationgroup.h>

#include <qobject.h>
#include <qcoreevent.h>
#include <qabstractanimation.h>
#include <qmetaobject.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qstring.h>
#include <qvariant.h>
#include <qlist.h>
#include <qbytearray.h>
#include <qlist.h>
#include <qnamespace.h>
#include <qthread.h>
#include <qnamespace.h>
#include <qregexp.h>
#include <qregularexpression.h>
#include <qobjectdefs.h>


class sipQAnimationGroup : public  ::QAnimationGroup
{
public:
    sipQAnimationGroup( ::QObject*);
    virtual ~sipQAnimationGroup();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const  ::QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const  ::QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const  ::QMetaMethod&) const;
    void sipProtect_updateCurrentTime(int);
    void sipProtectVirt_updateState(bool, ::QAbstractAnimation::State, ::QAbstractAnimation::State);
    void sipProtectVirt_updateDirection(bool, ::QAbstractAnimation::Direction);
    bool sipProtectVirt_event(bool, ::QEvent*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&);
    void connectNotify(const  ::QMetaMethod&);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
    int duration() const;
    void updateCurrentTime(int);
    void updateState( ::QAbstractAnimation::State, ::QAbstractAnimation::State);
    void updateDirection( ::QAbstractAnimation::Direction);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAnimationGroup(const sipQAnimationGroup &);
    sipQAnimationGroup &operator = (const sipQAnimationGroup &);

    char sipPyMethods[11];
};

sipQAnimationGroup::sipQAnimationGroup( ::QObject*a0):  ::QAnimationGroup(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAnimationGroup::~sipQAnimationGroup()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAnimationGroup::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QAnimationGroup);

    return  ::QAnimationGroup::metaObject();
}

int sipQAnimationGroup::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAnimationGroup::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QAnimationGroup,_c,_id,_a);

    return _id;
}

void *sipQAnimationGroup::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QAnimationGroup, _clname, &sipCpp) ? sipCpp :  ::QAnimationGroup::qt_metacast(_clname));
}

void sipQAnimationGroup::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QAnimationGroup::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAnimationGroup::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QAnimationGroup::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAnimationGroup::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QAnimationGroup::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAnimationGroup::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QAnimationGroup::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAnimationGroup::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QAnimationGroup::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAnimationGroup::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QAnimationGroup::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQAnimationGroup::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QAnimationGroup::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQAnimationGroup::duration() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,sipName_QAnimationGroup,sipName_duration);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_6(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQAnimationGroup::updateCurrentTime(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,sipName_QAnimationGroup,sipName_updateCurrentTime);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtCore_7(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAnimationGroup::updateState( ::QAbstractAnimation::State a0, ::QAbstractAnimation::State a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_updateState);

    if (!sipMeth)
    {
         ::QAnimationGroup::updateState(a0,a1);
        return;
    }

    extern void sipVH_QtCore_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::State, ::QAbstractAnimation::State);

    sipVH_QtCore_8(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQAnimationGroup::updateDirection( ::QAbstractAnimation::Direction a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_updateDirection);

    if (!sipMeth)
    {
         ::QAnimationGroup::updateDirection(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::Direction);

    sipVH_QtCore_9(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQAnimationGroup::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipQAnimationGroup::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipQAnimationGroup::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQAnimationGroup::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipQAnimationGroup::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipQAnimationGroup::sipProtectVirt_connectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQAnimationGroup::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQAnimationGroup::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}

bool sipQAnimationGroup::sipProtect_isSignalConnected(const  ::QMetaMethod& a0) const
{
    return  ::QObject::isSignalConnected(a0);
}

void sipQAnimationGroup::sipProtect_updateCurrentTime(int a0)
{
    updateCurrentTime(a0);
}

void sipQAnimationGroup::sipProtectVirt_updateState(bool sipSelfWasArg, ::QAbstractAnimation::State a0, ::QAbstractAnimation::State a1)
{
    (sipSelfWasArg ?  ::QAbstractAnimation::updateState(a0,a1) : updateState(a0,a1));
}

void sipQAnimationGroup::sipProtectVirt_updateDirection(bool sipSelfWasArg, ::QAbstractAnimation::Direction a0)
{
    (sipSelfWasArg ?  ::QAbstractAnimation::updateDirection(a0) : updateDirection(a0));
}

bool sipQAnimationGroup::sipProtectVirt_event(bool sipSelfWasArg, ::QEvent*a0)
{
    return (sipSelfWasArg ?  ::QAnimationGroup::event(a0) : event(a0));
}


PyDoc_STRVAR(doc_QAnimationGroup_sender, "sender(self) -> QObject");

extern "C" {static PyObject *meth_QAnimationGroup_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQAnimationGroup *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAnimationGroup, &sipCpp))
        {
             ::QObject*sipRes = 0;

        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_sender, doc_QAnimationGroup_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QAnimationGroup_receivers, "receivers(self, PYQT_SIGNAL) -> int");

extern "C" {static PyObject *meth_QAnimationGroup_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQAnimationGroup *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QAnimationGroup, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_receivers, doc_QAnimationGroup_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QAnimationGroup_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QAnimationGroup_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipQAnimationGroup *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAnimationGroup, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_timerEvent, doc_QAnimationGroup_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAnimationGroup_childEvent, "childEvent(self, QChildEvent)");

extern "C" {static PyObject *meth_QAnimationGroup_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipQAnimationGroup *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAnimationGroup, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_childEvent, doc_QAnimationGroup_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAnimationGroup_customEvent, "customEvent(self, QEvent)");

extern "C" {static PyObject *meth_QAnimationGroup_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQAnimationGroup *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAnimationGroup, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_customEvent, doc_QAnimationGroup_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAnimationGroup_connectNotify, "connectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QAnimationGroup_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQAnimationGroup *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QAnimationGroup, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_connectNotify, doc_QAnimationGroup_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QAnimationGroup_disconnectNotify, "disconnectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QAnimationGroup_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQAnimationGroup *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QAnimationGroup, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_disconnectNotify, doc_QAnimationGroup_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QAnimationGroup_senderSignalIndex, "senderSignalIndex(self) -> int");

extern "C" {static PyObject *meth_QAnimationGroup_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQAnimationGroup *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAnimationGroup, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_senderSignalIndex, doc_QAnimationGroup_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QAnimationGroup_isSignalConnected, "isSignalConnected(self, QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QAnimationGroup_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMetaMethod* a0;
        const sipQAnimationGroup *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QAnimationGroup, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_isSignalConnected, doc_QAnimationGroup_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QAnimationGroup_updateCurrentTime, "updateCurrentTime(self, int)");

extern "C" {static PyObject *meth_QAnimationGroup_updateCurrentTime(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_updateCurrentTime(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        sipQAnimationGroup *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QAnimationGroup, &sipCpp, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAnimationGroup, sipName_updateCurrentTime);
                return NULL;
            }

            sipCpp->sipProtect_updateCurrentTime(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_updateCurrentTime, doc_QAnimationGroup_updateCurrentTime);

    return NULL;
}


PyDoc_STRVAR(doc_QAnimationGroup_updateState, "updateState(self, QAbstractAnimation.State, QAbstractAnimation.State)");

extern "C" {static PyObject *meth_QAnimationGroup_updateState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_updateState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractAnimation::State a0;
         ::QAbstractAnimation::State a1;
        sipQAnimationGroup *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BEE", &sipSelf, sipType_QAnimationGroup, &sipCpp, sipType_QAbstractAnimation_State, &a0, sipType_QAbstractAnimation_State, &a1))
        {
            sipCpp->sipProtectVirt_updateState(sipSelfWasArg,a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_updateState, doc_QAnimationGroup_updateState);

    return NULL;
}


PyDoc_STRVAR(doc_QAnimationGroup_updateDirection, "updateDirection(self, QAbstractAnimation.Direction)");

extern "C" {static PyObject *meth_QAnimationGroup_updateDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_updateDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractAnimation::Direction a0;
        sipQAnimationGroup *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QAnimationGroup, &sipCpp, sipType_QAbstractAnimation_Direction, &a0))
        {
            sipCpp->sipProtectVirt_updateDirection(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_updateDirection, doc_QAnimationGroup_updateDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QAnimationGroup_animationAt, "animationAt(self, int) -> QAbstractAnimation");

extern "C" {static PyObject *meth_QAnimationGroup_animationAt(PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_animationAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAnimationGroup, &sipCpp, &a0))
        {
             ::QAbstractAnimation*sipRes;

            sipRes = sipCpp->animationAt(a0);

            return sipConvertFromType(sipRes,sipType_QAbstractAnimation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_animationAt, doc_QAnimationGroup_animationAt);

    return NULL;
}


PyDoc_STRVAR(doc_QAnimationGroup_animationCount, "animationCount(self) -> int");

extern "C" {static PyObject *meth_QAnimationGroup_animationCount(PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_animationCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAnimationGroup, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->animationCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_animationCount, doc_QAnimationGroup_animationCount);

    return NULL;
}


PyDoc_STRVAR(doc_QAnimationGroup_indexOfAnimation, "indexOfAnimation(self, QAbstractAnimation) -> int");

extern "C" {static PyObject *meth_QAnimationGroup_indexOfAnimation(PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_indexOfAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractAnimation* a0;
        const  ::QAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAnimationGroup, &sipCpp, sipType_QAbstractAnimation, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexOfAnimation(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_indexOfAnimation, doc_QAnimationGroup_indexOfAnimation);

    return NULL;
}


PyDoc_STRVAR(doc_QAnimationGroup_addAnimation, "addAnimation(self, QAbstractAnimation)");

extern "C" {static PyObject *meth_QAnimationGroup_addAnimation(PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_addAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractAnimation* a0;
         ::QAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QAnimationGroup, &sipCpp, sipType_QAbstractAnimation, &a0))
        {
            sipCpp->addAnimation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_addAnimation, doc_QAnimationGroup_addAnimation);

    return NULL;
}


PyDoc_STRVAR(doc_QAnimationGroup_insertAnimation, "insertAnimation(self, int, QAbstractAnimation)");

extern "C" {static PyObject *meth_QAnimationGroup_insertAnimation(PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_insertAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QAbstractAnimation* a1;
         ::QAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QAnimationGroup, &sipCpp, &a0, sipType_QAbstractAnimation, &a1))
        {
            sipCpp->insertAnimation(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_insertAnimation, doc_QAnimationGroup_insertAnimation);

    return NULL;
}


PyDoc_STRVAR(doc_QAnimationGroup_removeAnimation, "removeAnimation(self, QAbstractAnimation)");

extern "C" {static PyObject *meth_QAnimationGroup_removeAnimation(PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_removeAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractAnimation* a0;
         ::QAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<", &sipSelf, sipType_QAnimationGroup, &sipCpp, sipType_QAbstractAnimation, &a0))
        {
            sipCpp->removeAnimation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_removeAnimation, doc_QAnimationGroup_removeAnimation);

    return NULL;
}


PyDoc_STRVAR(doc_QAnimationGroup_takeAnimation, "takeAnimation(self, int) -> QAbstractAnimation");

extern "C" {static PyObject *meth_QAnimationGroup_takeAnimation(PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_takeAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAnimationGroup, &sipCpp, &a0))
        {
             ::QAbstractAnimation*sipRes;

            sipRes = sipCpp->takeAnimation(a0);

            return sipConvertFromType(sipRes,sipType_QAbstractAnimation,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_takeAnimation, doc_QAnimationGroup_takeAnimation);

    return NULL;
}


PyDoc_STRVAR(doc_QAnimationGroup_clear, "clear(self)");

extern "C" {static PyObject *meth_QAnimationGroup_clear(PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAnimationGroup, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_clear, doc_QAnimationGroup_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QAnimationGroup_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QAnimationGroup_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQAnimationGroup *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAnimationGroup, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_event, doc_QAnimationGroup_event);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAnimationGroup(void *, const sipTypeDef *);}
static void *cast_QAnimationGroup(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAnimationGroup *sipCpp = reinterpret_cast< ::QAnimationGroup *>(sipCppV);

    if (targetType == sipType_QAbstractAnimation)
        return static_cast< ::QAbstractAnimation *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAnimationGroup(void *, int);}
static void release_QAnimationGroup(void *sipCppV, int)
{
     ::QAnimationGroup *sipCpp = reinterpret_cast< ::QAnimationGroup *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAnimationGroup(sipSimpleWrapper *);}
static void dealloc_QAnimationGroup(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAnimationGroup *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAnimationGroup(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAnimationGroup(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAnimationGroup(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAnimationGroup *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQAnimationGroup(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAnimationGroup[] = {{0, 255, 1}};


static PyMethodDef methods_QAnimationGroup[] = {
    {SIP_MLNAME_CAST(sipName_addAnimation), meth_QAnimationGroup_addAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAnimationGroup_addAnimation)},
    {SIP_MLNAME_CAST(sipName_animationAt), meth_QAnimationGroup_animationAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QAnimationGroup_animationAt)},
    {SIP_MLNAME_CAST(sipName_animationCount), meth_QAnimationGroup_animationCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QAnimationGroup_animationCount)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QAnimationGroup_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QAnimationGroup_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QAnimationGroup_clear)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QAnimationGroup_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QAnimationGroup_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QAnimationGroup_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QAnimationGroup_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAnimationGroup_event)},
    {SIP_MLNAME_CAST(sipName_indexOfAnimation), meth_QAnimationGroup_indexOfAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAnimationGroup_indexOfAnimation)},
    {SIP_MLNAME_CAST(sipName_insertAnimation), meth_QAnimationGroup_insertAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAnimationGroup_insertAnimation)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QAnimationGroup_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QAnimationGroup_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_removeAnimation), meth_QAnimationGroup_removeAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAnimationGroup_removeAnimation)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QAnimationGroup_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QAnimationGroup_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_takeAnimation), meth_QAnimationGroup_takeAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAnimationGroup_takeAnimation)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QAnimationGroup_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateCurrentTime), (PyCFunction)meth_QAnimationGroup_updateCurrentTime, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateDirection), (PyCFunction)meth_QAnimationGroup_updateDirection, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateState), (PyCFunction)meth_QAnimationGroup_updateState, METH_VARARGS|METH_KEYWORDS, NULL}
};

PyDoc_STRVAR(doc_QAnimationGroup, "\1QAnimationGroup(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QAnimationGroup = {
    & ::QAnimationGroup::staticMetaObject,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtCore_QAnimationGroup = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAnimationGroup,
        {0},
        &plugin_QAnimationGroup
    },
    {
        sipNameNr_QAnimationGroup,
        {0, 0, 1},
        21, methods_QAnimationGroup,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAnimationGroup,
    -1,
    -1,
    supers_QAnimationGroup,
    0,
    init_type_QAnimationGroup,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAnimationGroup,
    0,
    0,
    0,
    release_QAnimationGroup,
    cast_QAnimationGroup,
    0,
    0,
    0,
    0,
    0,
    0
};
