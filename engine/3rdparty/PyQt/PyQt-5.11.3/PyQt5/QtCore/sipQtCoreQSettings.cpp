/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#include <qsettings.h>

#include <qstring.h>
#include <qobject.h>
#include <qcoreevent.h>
#include <qtextcodec.h>
#include <qvariant.h>
#include <qstringlist.h>
#include <qmetaobject.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qlist.h>
#include <qbytearray.h>
#include <qlist.h>
#include <qnamespace.h>
#include <qthread.h>
#include <qnamespace.h>
#include <qregexp.h>
#include <qregularexpression.h>
#include <qobjectdefs.h>


class sipQSettings : public  ::QSettings
{
public:
    sipQSettings(const  ::QString&,const  ::QString&, ::QObject*);
    sipQSettings( ::QSettings::Scope,const  ::QString&,const  ::QString&, ::QObject*);
    sipQSettings( ::QSettings::Format, ::QSettings::Scope,const  ::QString&,const  ::QString&, ::QObject*);
    sipQSettings(const  ::QString&, ::QSettings::Format, ::QObject*);
    sipQSettings( ::QObject*);
    virtual ~sipQSettings();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const  ::QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const  ::QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const  ::QMetaMethod&) const;
    bool sipProtectVirt_event(bool, ::QEvent*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSettings(const sipQSettings &);
    sipQSettings &operator = (const sipQSettings &);

    char sipPyMethods[7];
};

sipQSettings::sipQSettings(const  ::QString& a0,const  ::QString& a1, ::QObject*a2):  ::QSettings(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::sipQSettings( ::QSettings::Scope a0,const  ::QString& a1,const  ::QString& a2, ::QObject*a3):  ::QSettings(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::sipQSettings( ::QSettings::Format a0, ::QSettings::Scope a1,const  ::QString& a2,const  ::QString& a3, ::QObject*a4):  ::QSettings(a0,a1,a2,a3,a4), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::sipQSettings(const  ::QString& a0, ::QSettings::Format a1, ::QObject*a2):  ::QSettings(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::sipQSettings( ::QObject*a0):  ::QSettings(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::~sipQSettings()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSettings::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QSettings);

    return  ::QSettings::metaObject();
}

int sipQSettings::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSettings::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QSettings,_c,_id,_a);

    return _id;
}

void *sipQSettings::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QSettings, _clname, &sipCpp) ? sipCpp :  ::QSettings::qt_metacast(_clname));
}

bool sipQSettings::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QSettings::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQSettings::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSettings::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQSettings::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSettings::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSettings::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSettings::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSettings::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSettings::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSettings::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSettings::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSettings::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSettings::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQSettings::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipQSettings::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipQSettings::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQSettings::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipQSettings::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipQSettings::sipProtectVirt_connectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQSettings::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQSettings::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}

bool sipQSettings::sipProtect_isSignalConnected(const  ::QMetaMethod& a0) const
{
    return  ::QObject::isSignalConnected(a0);
}

bool sipQSettings::sipProtectVirt_event(bool sipSelfWasArg, ::QEvent*a0)
{
    return (sipSelfWasArg ?  ::QSettings::event(a0) : event(a0));
}


PyDoc_STRVAR(doc_QSettings_sender, "sender(self) -> QObject");

extern "C" {static PyObject *meth_QSettings_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QObject*sipRes = 0;

        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_sender, doc_QSettings_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_receivers, "receivers(self, PYQT_SIGNAL) -> int");

extern "C" {static PyObject *meth_QSettings_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QSettings, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_receivers, doc_QSettings_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QSettings_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipQSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSettings, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_timerEvent, doc_QSettings_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_childEvent, "childEvent(self, QChildEvent)");

extern "C" {static PyObject *meth_QSettings_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipQSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSettings, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_childEvent, doc_QSettings_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_customEvent, "customEvent(self, QEvent)");

extern "C" {static PyObject *meth_QSettings_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSettings, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_customEvent, doc_QSettings_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_connectNotify, "connectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QSettings_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSettings, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_connectNotify, doc_QSettings_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_disconnectNotify, "disconnectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QSettings_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSettings, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_disconnectNotify, doc_QSettings_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_senderSignalIndex, "senderSignalIndex(self) -> int");

extern "C" {static PyObject *meth_QSettings_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_senderSignalIndex, doc_QSettings_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_isSignalConnected, "isSignalConnected(self, QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QSettings_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMetaMethod* a0;
        const sipQSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSettings, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_isSignalConnected, doc_QSettings_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_clear, "clear(self)");

extern "C" {static PyObject *meth_QSettings_clear(PyObject *, PyObject *);}
static PyObject *meth_QSettings_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_clear, doc_QSettings_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_sync, "sync(self)");

extern "C" {static PyObject *meth_QSettings_sync(PyObject *, PyObject *);}
static PyObject *meth_QSettings_sync(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            sipCpp->sync();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_sync, doc_QSettings_sync);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_status, "status(self) -> QSettings.Status");

extern "C" {static PyObject *meth_QSettings_status(PyObject *, PyObject *);}
static PyObject *meth_QSettings_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QSettings::Status sipRes;

            sipRes = sipCpp->status();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSettings_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_status, doc_QSettings_status);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_beginGroup, "beginGroup(self, str)");

extern "C" {static PyObject *meth_QSettings_beginGroup(PyObject *, PyObject *);}
static PyObject *meth_QSettings_beginGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->beginGroup(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_beginGroup, doc_QSettings_beginGroup);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_endGroup, "endGroup(self)");

extern "C" {static PyObject *meth_QSettings_endGroup(PyObject *, PyObject *);}
static PyObject *meth_QSettings_endGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            sipCpp->endGroup();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_endGroup, doc_QSettings_endGroup);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_group, "group(self) -> str");

extern "C" {static PyObject *meth_QSettings_group(PyObject *, PyObject *);}
static PyObject *meth_QSettings_group(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->group());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_group, doc_QSettings_group);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_beginReadArray, "beginReadArray(self, str) -> int");

extern "C" {static PyObject *meth_QSettings_beginReadArray(PyObject *, PyObject *);}
static PyObject *meth_QSettings_beginReadArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->beginReadArray(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_beginReadArray, doc_QSettings_beginReadArray);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_beginWriteArray, "beginWriteArray(self, str, size: int = -1)");

extern "C" {static PyObject *meth_QSettings_beginWriteArray(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_beginWriteArray(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = -1;
         ::QSettings *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            sipCpp->beginWriteArray(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_beginWriteArray, doc_QSettings_beginWriteArray);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_endArray, "endArray(self)");

extern "C" {static PyObject *meth_QSettings_endArray(PyObject *, PyObject *);}
static PyObject *meth_QSettings_endArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            sipCpp->endArray();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_endArray, doc_QSettings_endArray);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_setArrayIndex, "setArrayIndex(self, int)");

extern "C" {static PyObject *meth_QSettings_setArrayIndex(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setArrayIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSettings, &sipCpp, &a0))
        {
            sipCpp->setArrayIndex(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setArrayIndex, doc_QSettings_setArrayIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_allKeys, "allKeys(self) -> List[str]");

extern "C" {static PyObject *meth_QSettings_allKeys(PyObject *, PyObject *);}
static PyObject *meth_QSettings_allKeys(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->allKeys());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_allKeys, doc_QSettings_allKeys);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_childKeys, "childKeys(self) -> List[str]");

extern "C" {static PyObject *meth_QSettings_childKeys(PyObject *, PyObject *);}
static PyObject *meth_QSettings_childKeys(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->childKeys());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_childKeys, doc_QSettings_childKeys);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_childGroups, "childGroups(self) -> List[str]");

extern "C" {static PyObject *meth_QSettings_childGroups(PyObject *, PyObject *);}
static PyObject *meth_QSettings_childGroups(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->childGroups());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_childGroups, doc_QSettings_childGroups);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_isWritable, "isWritable(self) -> bool");

extern "C" {static PyObject *meth_QSettings_isWritable(PyObject *, PyObject *);}
static PyObject *meth_QSettings_isWritable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isWritable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_isWritable, doc_QSettings_isWritable);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_setValue, "setValue(self, str, Any)");

extern "C" {static PyObject *meth_QSettings_setValue(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setValue(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setValue, doc_QSettings_setValue);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_value, "value(self, str, defaultValue: Any = None, type: type = None) -> object");

extern "C" {static PyObject *meth_QSettings_value(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_value(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QVariant& a1def = QVariant();
        const  ::QVariant* a1 = &a1def;
        int a1State = 0;
        PyObject * a2 = 0;
        const  ::QSettings *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_defaultValue,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1P0", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State, &a2))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

        QVariant value;
        
        // QSettings has an internal mutex so release the GIL to avoid the possibility
        // of deadlocks.
        Py_BEGIN_ALLOW_THREADS
        value = sipCpp->value(*a0, *a1);
        Py_END_ALLOW_THREADS
        
        sipRes = pyqt5_from_qvariant_by_type(value, a2);
        
        sipIsErr = !sipRes;
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_value, doc_QSettings_value);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_remove, "remove(self, str)");

extern "C" {static PyObject *meth_QSettings_remove(PyObject *, PyObject *);}
static PyObject *meth_QSettings_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->remove(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_remove, doc_QSettings_remove);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_contains, "contains(self, str) -> bool");

extern "C" {static PyObject *meth_QSettings_contains(PyObject *, PyObject *);}
static PyObject *meth_QSettings_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_contains, doc_QSettings_contains);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_setFallbacksEnabled, "setFallbacksEnabled(self, bool)");

extern "C" {static PyObject *meth_QSettings_setFallbacksEnabled(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setFallbacksEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSettings, &sipCpp, &a0))
        {
            sipCpp->setFallbacksEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setFallbacksEnabled, doc_QSettings_setFallbacksEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_fallbacksEnabled, "fallbacksEnabled(self) -> bool");

extern "C" {static PyObject *meth_QSettings_fallbacksEnabled(PyObject *, PyObject *);}
static PyObject *meth_QSettings_fallbacksEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fallbacksEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_fallbacksEnabled, doc_QSettings_fallbacksEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_fileName, "fileName(self) -> str");

extern "C" {static PyObject *meth_QSettings_fileName(PyObject *, PyObject *);}
static PyObject *meth_QSettings_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fileName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_fileName, doc_QSettings_fileName);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_setPath, "setPath(QSettings.Format, QSettings.Scope, str)");

extern "C" {static PyObject *meth_QSettings_setPath(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QSettings::Format a0;
         ::QSettings::Scope a1;
        const  ::QString* a2;
        int a2State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "EEJ1", sipType_QSettings_Format, &a0, sipType_QSettings_Scope, &a1, sipType_QString,&a2, &a2State))
        {
             ::QSettings::setPath(a0,a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setPath, doc_QSettings_setPath);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_format, "format(self) -> QSettings.Format");

extern "C" {static PyObject *meth_QSettings_format(PyObject *, PyObject *);}
static PyObject *meth_QSettings_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QSettings::Format sipRes;

            sipRes = sipCpp->format();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSettings_Format);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_format, doc_QSettings_format);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_scope, "scope(self) -> QSettings.Scope");

extern "C" {static PyObject *meth_QSettings_scope(PyObject *, PyObject *);}
static PyObject *meth_QSettings_scope(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QSettings::Scope sipRes;

            sipRes = sipCpp->scope();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSettings_Scope);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_scope, doc_QSettings_scope);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_organizationName, "organizationName(self) -> str");

extern "C" {static PyObject *meth_QSettings_organizationName(PyObject *, PyObject *);}
static PyObject *meth_QSettings_organizationName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->organizationName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_organizationName, doc_QSettings_organizationName);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_applicationName, "applicationName(self) -> str");

extern "C" {static PyObject *meth_QSettings_applicationName(PyObject *, PyObject *);}
static PyObject *meth_QSettings_applicationName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->applicationName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_applicationName, doc_QSettings_applicationName);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_setDefaultFormat, "setDefaultFormat(QSettings.Format)");

extern "C" {static PyObject *meth_QSettings_setDefaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setDefaultFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QSettings::Format a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QSettings_Format, &a0))
        {
             ::QSettings::setDefaultFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setDefaultFormat, doc_QSettings_setDefaultFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_defaultFormat, "defaultFormat() -> QSettings.Format");

extern "C" {static PyObject *meth_QSettings_defaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QSettings_defaultFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QSettings::Format sipRes;

            sipRes =  ::QSettings::defaultFormat();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSettings_Format);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_defaultFormat, doc_QSettings_defaultFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_setIniCodec, "setIniCodec(self, QTextCodec)\n"
"setIniCodec(self, str)");

extern "C" {static PyObject *meth_QSettings_setIniCodec(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setIniCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QTextCodec* a0;
        PyObject *a0Keep;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QSettings, &sipCpp, &a0Keep, sipType_QTextCodec, &a0))
        {
            sipCpp->setIniCodec(a0);

            sipKeepReference(sipSelf, -3, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QSettings, &sipCpp, &a0))
        {
            sipCpp->setIniCodec(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setIniCodec, doc_QSettings_setIniCodec);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_iniCodec, "iniCodec(self) -> QTextCodec");

extern "C" {static PyObject *meth_QSettings_iniCodec(PyObject *, PyObject *);}
static PyObject *meth_QSettings_iniCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QTextCodec*sipRes;

            sipRes = sipCpp->iniCodec();

            return sipConvertFromType(sipRes,sipType_QTextCodec,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_iniCodec, doc_QSettings_iniCodec);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_isAtomicSyncRequired, "isAtomicSyncRequired(self) -> bool");

extern "C" {static PyObject *meth_QSettings_isAtomicSyncRequired(PyObject *, PyObject *);}
static PyObject *meth_QSettings_isAtomicSyncRequired(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAtomicSyncRequired();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_isAtomicSyncRequired, doc_QSettings_isAtomicSyncRequired);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_setAtomicSyncRequired, "setAtomicSyncRequired(self, bool)");

extern "C" {static PyObject *meth_QSettings_setAtomicSyncRequired(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setAtomicSyncRequired(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSettings, &sipCpp, &a0))
        {
            sipCpp->setAtomicSyncRequired(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setAtomicSyncRequired, doc_QSettings_setAtomicSyncRequired);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QSettings_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSettings, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_event, doc_QSettings_event);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSettings(void *, const sipTypeDef *);}
static void *cast_QSettings(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSettings *sipCpp = reinterpret_cast< ::QSettings *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSettings(void *, int);}
static void release_QSettings(void *sipCppV, int)
{
     ::QSettings *sipCpp = reinterpret_cast< ::QSettings *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSettings(sipSimpleWrapper *);}
static void dealloc_QSettings(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSettings *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSettings(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSettings(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSettings(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSettings *sipCpp = 0;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_application,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|J1JH", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQSettings(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QSettings::Scope a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
         ::QObject* a3 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_application,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EJ1|J1JH", sipType_QSettings_Scope, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QObject, &a3, sipOwner))
        {
            sipCpp = new sipQSettings(a0,*a1,*a2,a3);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QSettings::Format a0;
         ::QSettings::Scope a1;
        const  ::QString* a2;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
         ::QObject* a4 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_application,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EEJ1|J1JH", sipType_QSettings_Format, &a0, sipType_QSettings_Scope, &a1, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QObject, &a4, sipOwner))
        {
            sipCpp = new sipQSettings(a0,a1,*a2,*a3,a4);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSettings::Format a1;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1E|JH", sipType_QString,&a0, &a0State, sipType_QSettings_Format, &a1, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQSettings(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQSettings(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSettings[] = {{172, 255, 1}};


static PyMethodDef methods_QSettings[] = {
    {SIP_MLNAME_CAST(sipName_allKeys), meth_QSettings_allKeys, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_allKeys)},
    {SIP_MLNAME_CAST(sipName_applicationName), meth_QSettings_applicationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_applicationName)},
    {SIP_MLNAME_CAST(sipName_beginGroup), meth_QSettings_beginGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_beginGroup)},
    {SIP_MLNAME_CAST(sipName_beginReadArray), meth_QSettings_beginReadArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_beginReadArray)},
    {SIP_MLNAME_CAST(sipName_beginWriteArray), (PyCFunction)meth_QSettings_beginWriteArray, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSettings_beginWriteArray)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QSettings_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childGroups), meth_QSettings_childGroups, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_childGroups)},
    {SIP_MLNAME_CAST(sipName_childKeys), meth_QSettings_childKeys, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_childKeys)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QSettings_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_clear)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QSettings_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contains), meth_QSettings_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_contains)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QSettings_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_defaultFormat), meth_QSettings_defaultFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_defaultFormat)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QSettings_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endArray), meth_QSettings_endArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_endArray)},
    {SIP_MLNAME_CAST(sipName_endGroup), meth_QSettings_endGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_endGroup)},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QSettings_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSettings_event)},
    {SIP_MLNAME_CAST(sipName_fallbacksEnabled), meth_QSettings_fallbacksEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_fallbacksEnabled)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QSettings_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_fileName)},
    {SIP_MLNAME_CAST(sipName_format), meth_QSettings_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_format)},
    {SIP_MLNAME_CAST(sipName_group), meth_QSettings_group, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_group)},
    {SIP_MLNAME_CAST(sipName_iniCodec), meth_QSettings_iniCodec, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_iniCodec)},
    {SIP_MLNAME_CAST(sipName_isAtomicSyncRequired), meth_QSettings_isAtomicSyncRequired, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_isAtomicSyncRequired)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QSettings_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isWritable), meth_QSettings_isWritable, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_isWritable)},
    {SIP_MLNAME_CAST(sipName_organizationName), meth_QSettings_organizationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_organizationName)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QSettings_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_remove), meth_QSettings_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_remove)},
    {SIP_MLNAME_CAST(sipName_scope), meth_QSettings_scope, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_scope)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QSettings_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QSettings_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setArrayIndex), meth_QSettings_setArrayIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setArrayIndex)},
    {SIP_MLNAME_CAST(sipName_setAtomicSyncRequired), meth_QSettings_setAtomicSyncRequired, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setAtomicSyncRequired)},
    {SIP_MLNAME_CAST(sipName_setDefaultFormat), meth_QSettings_setDefaultFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setDefaultFormat)},
    {SIP_MLNAME_CAST(sipName_setFallbacksEnabled), meth_QSettings_setFallbacksEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setFallbacksEnabled)},
    {SIP_MLNAME_CAST(sipName_setIniCodec), meth_QSettings_setIniCodec, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setIniCodec)},
    {SIP_MLNAME_CAST(sipName_setPath), meth_QSettings_setPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setPath)},
    {SIP_MLNAME_CAST(sipName_setValue), meth_QSettings_setValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setValue)},
    {SIP_MLNAME_CAST(sipName_status), meth_QSettings_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_status)},
    {SIP_MLNAME_CAST(sipName_sync), meth_QSettings_sync, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_sync)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QSettings_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_value), (PyCFunction)meth_QSettings_value, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSettings_value)}
};

static sipEnumMemberDef enummembers_QSettings[] = {
    {sipName_AccessError, static_cast<int>( ::QSettings::AccessError), 219},
    {sipName_FormatError, static_cast<int>( ::QSettings::FormatError), 219},
    {sipName_IniFormat, static_cast<int>( ::QSettings::IniFormat), 217},
    {sipName_InvalidFormat, static_cast<int>( ::QSettings::InvalidFormat), 217},
    {sipName_NativeFormat, static_cast<int>( ::QSettings::NativeFormat), 217},
    {sipName_NoError, static_cast<int>( ::QSettings::NoError), 219},
    {sipName_SystemScope, static_cast<int>( ::QSettings::SystemScope), 218},
    {sipName_UserScope, static_cast<int>( ::QSettings::UserScope), 218},
};

PyDoc_STRVAR(doc_QSettings, "\1QSettings(str, application: str = '', parent: QObject = None)\n"
"QSettings(QSettings.Scope, str, application: str = '', parent: QObject = None)\n"
"QSettings(QSettings.Format, QSettings.Scope, str, application: str = '', parent: QObject = None)\n"
"QSettings(str, QSettings.Format, parent: QObject = None)\n"
"QSettings(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QSettings = {
    & ::QSettings::staticMetaObject,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtCore_QSettings = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSettings,
        {0},
        &plugin_QSettings
    },
    {
        sipNameNr_QSettings,
        {0, 0, 1},
        42, methods_QSettings,
        8, enummembers_QSettings,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSettings,
    -1,
    -1,
    supers_QSettings,
    0,
    init_type_QSettings,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSettings,
    0,
    0,
    0,
    release_QSettings,
    cast_QSettings,
    0,
    0,
    0,
    0,
    0,
    0
};
