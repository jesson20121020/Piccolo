/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#include <qvariantanimation.h>

#include <qobject.h>
#include <qvariant.h>
#include <qabstractanimation.h>
#include <qcoreevent.h>
#include <qeasingcurve.h>
#include <qvector.h>
#include <qpair.h>
#include <qanimationgroup.h>
#include <qmetaobject.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qstring.h>
#include <qlist.h>
#include <qbytearray.h>
#include <qlist.h>
#include <qnamespace.h>
#include <qthread.h>
#include <qnamespace.h>
#include <qregexp.h>
#include <qregularexpression.h>
#include <qobjectdefs.h>


class sipQVariantAnimation : public  ::QVariantAnimation
{
public:
    sipQVariantAnimation( ::QObject*);
    virtual ~sipQVariantAnimation();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const  ::QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const  ::QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const  ::QMetaMethod&) const;
    void sipProtectVirt_updateDirection(bool, ::QAbstractAnimation::Direction);
    bool sipProtectVirt_event(bool, ::QEvent*);
    void sipProtectVirt_updateCurrentTime(bool,int);
    void sipProtectVirt_updateState(bool, ::QAbstractAnimation::State, ::QAbstractAnimation::State);
    void sipProtectVirt_updateCurrentValue(bool,const  ::QVariant&);
     ::QVariant sipProtectVirt_interpolated(bool,const  ::QVariant&,const  ::QVariant&, ::qreal) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QVariant interpolated(const  ::QVariant&,const  ::QVariant&, ::qreal) const;
    void updateCurrentValue(const  ::QVariant&);
    void disconnectNotify(const  ::QMetaMethod&);
    void connectNotify(const  ::QMetaMethod&);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
    int duration() const;
    void updateCurrentTime(int);
    void updateState( ::QAbstractAnimation::State, ::QAbstractAnimation::State);
    void updateDirection( ::QAbstractAnimation::Direction);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQVariantAnimation(const sipQVariantAnimation &);
    sipQVariantAnimation &operator = (const sipQVariantAnimation &);

    char sipPyMethods[13];
};

sipQVariantAnimation::sipQVariantAnimation( ::QObject*a0):  ::QVariantAnimation(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQVariantAnimation::~sipQVariantAnimation()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQVariantAnimation::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QVariantAnimation);

    return  ::QVariantAnimation::metaObject();
}

int sipQVariantAnimation::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QVariantAnimation::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QVariantAnimation,_c,_id,_a);

    return _id;
}

void *sipQVariantAnimation::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QVariantAnimation, _clname, &sipCpp) ? sipCpp :  ::QVariantAnimation::qt_metacast(_clname));
}

 ::QVariant sipQVariantAnimation::interpolated(const  ::QVariant& a0,const  ::QVariant& a1, ::qreal a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_interpolated);

    if (!sipMeth)
        return  ::QVariantAnimation::interpolated(a0,a1,a2);

    extern  ::QVariant sipVH_QtCore_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QVariant&,const  ::QVariant&, ::qreal);

    return sipVH_QtCore_60(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQVariantAnimation::updateCurrentValue(const  ::QVariant& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_updateCurrentValue);

    if (!sipMeth)
    {
         ::QVariantAnimation::updateCurrentValue(a0);
        return;
    }

    extern void sipVH_QtCore_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QVariant&);

    sipVH_QtCore_59(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQVariantAnimation::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QVariantAnimation::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQVariantAnimation::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QVariantAnimation::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQVariantAnimation::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QVariantAnimation::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQVariantAnimation::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QVariantAnimation::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQVariantAnimation::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QVariantAnimation::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQVariantAnimation::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QVariantAnimation::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQVariantAnimation::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QVariantAnimation::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQVariantAnimation::duration() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_duration);

    if (!sipMeth)
        return  ::QVariantAnimation::duration();

    extern int sipVH_QtCore_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_6(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQVariantAnimation::updateCurrentTime(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_updateCurrentTime);

    if (!sipMeth)
    {
         ::QVariantAnimation::updateCurrentTime(a0);
        return;
    }

    extern void sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtCore_7(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQVariantAnimation::updateState( ::QAbstractAnimation::State a0, ::QAbstractAnimation::State a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_updateState);

    if (!sipMeth)
    {
         ::QVariantAnimation::updateState(a0,a1);
        return;
    }

    extern void sipVH_QtCore_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::State, ::QAbstractAnimation::State);

    sipVH_QtCore_8(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQVariantAnimation::updateDirection( ::QAbstractAnimation::Direction a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_updateDirection);

    if (!sipMeth)
    {
         ::QVariantAnimation::updateDirection(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::Direction);

    sipVH_QtCore_9(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQVariantAnimation::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipQVariantAnimation::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipQVariantAnimation::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQVariantAnimation::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipQVariantAnimation::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipQVariantAnimation::sipProtectVirt_connectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQVariantAnimation::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQVariantAnimation::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}

bool sipQVariantAnimation::sipProtect_isSignalConnected(const  ::QMetaMethod& a0) const
{
    return  ::QObject::isSignalConnected(a0);
}

void sipQVariantAnimation::sipProtectVirt_updateDirection(bool sipSelfWasArg, ::QAbstractAnimation::Direction a0)
{
    (sipSelfWasArg ?  ::QAbstractAnimation::updateDirection(a0) : updateDirection(a0));
}

bool sipQVariantAnimation::sipProtectVirt_event(bool sipSelfWasArg, ::QEvent*a0)
{
    return (sipSelfWasArg ?  ::QVariantAnimation::event(a0) : event(a0));
}

void sipQVariantAnimation::sipProtectVirt_updateCurrentTime(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ?  ::QVariantAnimation::updateCurrentTime(a0) : updateCurrentTime(a0));
}

void sipQVariantAnimation::sipProtectVirt_updateState(bool sipSelfWasArg, ::QAbstractAnimation::State a0, ::QAbstractAnimation::State a1)
{
    (sipSelfWasArg ?  ::QVariantAnimation::updateState(a0,a1) : updateState(a0,a1));
}

void sipQVariantAnimation::sipProtectVirt_updateCurrentValue(bool sipSelfWasArg,const  ::QVariant& a0)
{
    (sipSelfWasArg ?  ::QVariantAnimation::updateCurrentValue(a0) : updateCurrentValue(a0));
}

 ::QVariant sipQVariantAnimation::sipProtectVirt_interpolated(bool sipSelfWasArg,const  ::QVariant& a0,const  ::QVariant& a1, ::qreal a2) const
{
    return (sipSelfWasArg ?  ::QVariantAnimation::interpolated(a0,a1,a2) : interpolated(a0,a1,a2));
}


PyDoc_STRVAR(doc_QVariantAnimation_sender, "sender(self) -> QObject");

extern "C" {static PyObject *meth_QVariantAnimation_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQVariantAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QVariantAnimation, &sipCpp))
        {
             ::QObject*sipRes = 0;

        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_sender, doc_QVariantAnimation_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_receivers, "receivers(self, PYQT_SIGNAL) -> int");

extern "C" {static PyObject *meth_QVariantAnimation_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQVariantAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QVariantAnimation, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_receivers, doc_QVariantAnimation_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QVariantAnimation_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipQVariantAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_timerEvent, doc_QVariantAnimation_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_childEvent, "childEvent(self, QChildEvent)");

extern "C" {static PyObject *meth_QVariantAnimation_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipQVariantAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_childEvent, doc_QVariantAnimation_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_customEvent, "customEvent(self, QEvent)");

extern "C" {static PyObject *meth_QVariantAnimation_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQVariantAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_customEvent, doc_QVariantAnimation_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_connectNotify, "connectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QVariantAnimation_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQVariantAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_connectNotify, doc_QVariantAnimation_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_disconnectNotify, "disconnectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QVariantAnimation_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQVariantAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_disconnectNotify, doc_QVariantAnimation_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_senderSignalIndex, "senderSignalIndex(self) -> int");

extern "C" {static PyObject *meth_QVariantAnimation_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQVariantAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QVariantAnimation, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_senderSignalIndex, doc_QVariantAnimation_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_isSignalConnected, "isSignalConnected(self, QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QVariantAnimation_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMetaMethod* a0;
        const sipQVariantAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_isSignalConnected, doc_QVariantAnimation_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_updateDirection, "updateDirection(self, QAbstractAnimation.Direction)");

extern "C" {static PyObject *meth_QVariantAnimation_updateDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_updateDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractAnimation::Direction a0;
        sipQVariantAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QAbstractAnimation_Direction, &a0))
        {
            sipCpp->sipProtectVirt_updateDirection(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_updateDirection, doc_QVariantAnimation_updateDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_startValue, "startValue(self) -> Any");

extern "C" {static PyObject *meth_QVariantAnimation_startValue(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_startValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariantAnimation, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->startValue());

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_startValue, doc_QVariantAnimation_startValue);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_setStartValue, "setStartValue(self, Any)");

extern "C" {static PyObject *meth_QVariantAnimation_setStartValue(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_setStartValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVariant* a0;
        int a0State = 0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->setStartValue(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_setStartValue, doc_QVariantAnimation_setStartValue);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_endValue, "endValue(self) -> Any");

extern "C" {static PyObject *meth_QVariantAnimation_endValue(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_endValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariantAnimation, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->endValue());

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_endValue, doc_QVariantAnimation_endValue);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_setEndValue, "setEndValue(self, Any)");

extern "C" {static PyObject *meth_QVariantAnimation_setEndValue(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_setEndValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVariant* a0;
        int a0State = 0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->setEndValue(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_setEndValue, doc_QVariantAnimation_setEndValue);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_keyValueAt, "keyValueAt(self, float) -> Any");

extern "C" {static PyObject *meth_QVariantAnimation_keyValueAt(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_keyValueAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QVariantAnimation, &sipCpp, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->keyValueAt(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_keyValueAt, doc_QVariantAnimation_keyValueAt);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_setKeyValueAt, "setKeyValueAt(self, float, Any)");

extern "C" {static PyObject *meth_QVariantAnimation_setKeyValueAt(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_setKeyValueAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BdJ1", &sipSelf, sipType_QVariantAnimation, &sipCpp, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setKeyValueAt(a0,*a1);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_setKeyValueAt, doc_QVariantAnimation_setKeyValueAt);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_keyValues, "keyValues(self) -> object");

extern "C" {static PyObject *meth_QVariantAnimation_keyValues(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_keyValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariantAnimation, &sipCpp))
        {
             ::QVariantAnimation::KeyValues*sipRes;

            sipRes = new  ::QVariantAnimation::KeyValues(sipCpp->keyValues());

            return sipConvertFromNewType(sipRes,sipType_QVector_0600QPair_2400_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_keyValues, doc_QVariantAnimation_keyValues);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_setKeyValues, "setKeyValues(self, object)");

extern "C" {static PyObject *meth_QVariantAnimation_setKeyValues(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_setKeyValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVariantAnimation::KeyValues* a0;
        int a0State = 0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QVector_0600QPair_2400_0100QVariant,&a0, &a0State))
        {
            sipCpp->setKeyValues(*a0);
            sipReleaseType(const_cast< ::QVariantAnimation::KeyValues *>(a0),sipType_QVector_0600QPair_2400_0100QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_setKeyValues, doc_QVariantAnimation_setKeyValues);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_currentValue, "currentValue(self) -> Any");

extern "C" {static PyObject *meth_QVariantAnimation_currentValue(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_currentValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariantAnimation, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->currentValue());

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_currentValue, doc_QVariantAnimation_currentValue);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_duration, "duration(self) -> int");

extern "C" {static PyObject *meth_QVariantAnimation_duration(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_duration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariantAnimation, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QVariantAnimation::duration() : sipCpp->duration());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_duration, doc_QVariantAnimation_duration);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_setDuration, "setDuration(self, int)");

extern "C" {static PyObject *meth_QVariantAnimation_setDuration(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_setDuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QVariantAnimation, &sipCpp, &a0))
        {
            sipCpp->setDuration(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_setDuration, doc_QVariantAnimation_setDuration);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_easingCurve, "easingCurve(self) -> QEasingCurve");

extern "C" {static PyObject *meth_QVariantAnimation_easingCurve(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_easingCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariantAnimation, &sipCpp))
        {
             ::QEasingCurve*sipRes;

            sipRes = new  ::QEasingCurve(sipCpp->easingCurve());

            return sipConvertFromNewType(sipRes,sipType_QEasingCurve,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_easingCurve, doc_QVariantAnimation_easingCurve);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_setEasingCurve, "setEasingCurve(self, Union[QEasingCurve, QEasingCurve.Type])");

extern "C" {static PyObject *meth_QVariantAnimation_setEasingCurve(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_setEasingCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QEasingCurve* a0;
        int a0State = 0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QEasingCurve, &a0, &a0State))
        {
            sipCpp->setEasingCurve(*a0);
            sipReleaseType(const_cast< ::QEasingCurve *>(a0),sipType_QEasingCurve,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_setEasingCurve, doc_QVariantAnimation_setEasingCurve);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QVariantAnimation_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQVariantAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_event, doc_QVariantAnimation_event);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_updateCurrentTime, "updateCurrentTime(self, int)");

extern "C" {static PyObject *meth_QVariantAnimation_updateCurrentTime(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_updateCurrentTime(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQVariantAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QVariantAnimation, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_updateCurrentTime(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_updateCurrentTime, doc_QVariantAnimation_updateCurrentTime);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_updateState, "updateState(self, QAbstractAnimation.State, QAbstractAnimation.State)");

extern "C" {static PyObject *meth_QVariantAnimation_updateState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_updateState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractAnimation::State a0;
         ::QAbstractAnimation::State a1;
        sipQVariantAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BEE", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QAbstractAnimation_State, &a0, sipType_QAbstractAnimation_State, &a1))
        {
            sipCpp->sipProtectVirt_updateState(sipSelfWasArg,a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_updateState, doc_QVariantAnimation_updateState);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_updateCurrentValue, "updateCurrentValue(self, Any)");

extern "C" {static PyObject *meth_QVariantAnimation_updateCurrentValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_updateCurrentValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QVariant* a0;
        int a0State = 0;
        sipQVariantAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->sipProtectVirt_updateCurrentValue(sipSelfWasArg,*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_updateCurrentValue, doc_QVariantAnimation_updateCurrentValue);

    return NULL;
}


PyDoc_STRVAR(doc_QVariantAnimation_interpolated, "interpolated(self, Any, Any, float) -> Any");

extern "C" {static PyObject *meth_QVariantAnimation_interpolated(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_interpolated(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QVariant* a0;
        int a0State = 0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::qreal a2;
        const sipQVariantAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1d", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QVariant, &a0, &a0State, sipType_QVariant, &a1, &a1State, &a2))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->sipProtectVirt_interpolated(sipSelfWasArg,*a0,*a1,a2));
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_interpolated, doc_QVariantAnimation_interpolated);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QVariantAnimation(void *, const sipTypeDef *);}
static void *cast_QVariantAnimation(void *sipCppV, const sipTypeDef *targetType)
{
     ::QVariantAnimation *sipCpp = reinterpret_cast< ::QVariantAnimation *>(sipCppV);

    if (targetType == sipType_QAbstractAnimation)
        return static_cast< ::QAbstractAnimation *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QVariantAnimation(void *, int);}
static void release_QVariantAnimation(void *sipCppV, int)
{
     ::QVariantAnimation *sipCpp = reinterpret_cast< ::QVariantAnimation *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QVariantAnimation(sipSimpleWrapper *);}
static void dealloc_QVariantAnimation(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQVariantAnimation *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QVariantAnimation(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QVariantAnimation(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QVariantAnimation(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQVariantAnimation *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQVariantAnimation(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QVariantAnimation[] = {{0, 255, 1}};


static PyMethodDef methods_QVariantAnimation[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QVariantAnimation_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QVariantAnimation_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_currentValue), meth_QVariantAnimation_currentValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_currentValue)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QVariantAnimation_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QVariantAnimation_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_duration), meth_QVariantAnimation_duration, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_duration)},
    {SIP_MLNAME_CAST(sipName_easingCurve), meth_QVariantAnimation_easingCurve, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_easingCurve)},
    {SIP_MLNAME_CAST(sipName_endValue), meth_QVariantAnimation_endValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_endValue)},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QVariantAnimation_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QVariantAnimation_event)},
    {SIP_MLNAME_CAST(sipName_interpolated), (PyCFunction)meth_QVariantAnimation_interpolated, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QVariantAnimation_interpolated)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QVariantAnimation_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyValueAt), meth_QVariantAnimation_keyValueAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_keyValueAt)},
    {SIP_MLNAME_CAST(sipName_keyValues), meth_QVariantAnimation_keyValues, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_keyValues)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QVariantAnimation_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QVariantAnimation_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QVariantAnimation_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setDuration), meth_QVariantAnimation_setDuration, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_setDuration)},
    {SIP_MLNAME_CAST(sipName_setEasingCurve), meth_QVariantAnimation_setEasingCurve, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_setEasingCurve)},
    {SIP_MLNAME_CAST(sipName_setEndValue), meth_QVariantAnimation_setEndValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_setEndValue)},
    {SIP_MLNAME_CAST(sipName_setKeyValueAt), meth_QVariantAnimation_setKeyValueAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_setKeyValueAt)},
    {SIP_MLNAME_CAST(sipName_setKeyValues), meth_QVariantAnimation_setKeyValues, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_setKeyValues)},
    {SIP_MLNAME_CAST(sipName_setStartValue), meth_QVariantAnimation_setStartValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_setStartValue)},
    {SIP_MLNAME_CAST(sipName_startValue), meth_QVariantAnimation_startValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_startValue)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QVariantAnimation_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateCurrentTime), (PyCFunction)meth_QVariantAnimation_updateCurrentTime, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QVariantAnimation_updateCurrentTime)},
    {SIP_MLNAME_CAST(sipName_updateCurrentValue), (PyCFunction)meth_QVariantAnimation_updateCurrentValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QVariantAnimation_updateCurrentValue)},
    {SIP_MLNAME_CAST(sipName_updateDirection), (PyCFunction)meth_QVariantAnimation_updateDirection, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateState), (PyCFunction)meth_QVariantAnimation_updateState, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QVariantAnimation_updateState)}
};

PyDoc_STRVAR(doc_QVariantAnimation, "\1QVariantAnimation(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QVariantAnimation[] = {
    {"valueChanged(QVariant)", "\1valueChanged(self, Any)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QVariantAnimation = {
    & ::QVariantAnimation::staticMetaObject,
    0,
    signals_QVariantAnimation,
    0
};


sipClassTypeDef sipTypeDef_QtCore_QVariantAnimation = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QVariantAnimation,
        {0},
        &plugin_QVariantAnimation
    },
    {
        sipNameNr_QVariantAnimation,
        {0, 0, 1},
        28, methods_QVariantAnimation,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QVariantAnimation,
    -1,
    -1,
    supers_QVariantAnimation,
    0,
    init_type_QVariantAnimation,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QVariantAnimation,
    0,
    0,
    0,
    release_QVariantAnimation,
    cast_QVariantAnimation,
    0,
    0,
    0,
    0,
    0,
    0
};
