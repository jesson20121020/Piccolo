/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#include <qmimedata.h>

#include <qvariant.h>
#include <qstring.h>
#include <qstringlist.h>
#include <qbytearray.h>
#include <qlist.h>
#include <qurl.h>
#include <qmetaobject.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qobject.h>
#include <qlist.h>
#include <qlist.h>
#include <qnamespace.h>
#include <qthread.h>
#include <qnamespace.h>
#include <qregexp.h>
#include <qregularexpression.h>
#include <qobjectdefs.h>


class sipQMimeData : public  ::QMimeData
{
public:
    sipQMimeData();
    virtual ~sipQMimeData();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const  ::QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const  ::QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const  ::QMetaMethod&) const;
     ::QVariant sipProtectVirt_retrieveData(bool,const  ::QString&, ::QVariant::Type) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QVariant retrieveData(const  ::QString&, ::QVariant::Type) const;
     ::QStringList formats() const;
    bool hasFormat(const  ::QString&) const;
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMimeData(const sipQMimeData &);
    sipQMimeData &operator = (const sipQMimeData &);

    char sipPyMethods[10];
};

sipQMimeData::sipQMimeData():  ::QMimeData(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMimeData::~sipQMimeData()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQMimeData::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QMimeData);

    return  ::QMimeData::metaObject();
}

int sipQMimeData::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QMimeData::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QMimeData,_c,_id,_a);

    return _id;
}

void *sipQMimeData::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QMimeData, _clname, &sipCpp) ? sipCpp :  ::QMimeData::qt_metacast(_clname));
}

 ::QVariant sipQMimeData::retrieveData(const  ::QString& a0, ::QVariant::Type a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_retrieveData);

    if (!sipMeth)
        return  ::QMimeData::retrieveData(a0,a1);

    extern  ::QVariant sipVH_QtCore_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&, ::QVariant::Type);

    return sipVH_QtCore_58(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::QStringList sipQMimeData::formats() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_formats);

    if (!sipMeth)
        return  ::QMimeData::formats();

    extern  ::QStringList sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQMimeData::hasFormat(const  ::QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_hasFormat);

    if (!sipMeth)
        return  ::QMimeData::hasFormat(a0);

    extern bool sipVH_QtCore_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtCore_57(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQMimeData::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QMimeData::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQMimeData::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QMimeData::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQMimeData::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QMimeData::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQMimeData::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QMimeData::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQMimeData::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QMimeData::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQMimeData::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QMimeData::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQMimeData::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QMimeData::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQMimeData::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipQMimeData::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipQMimeData::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQMimeData::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipQMimeData::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipQMimeData::sipProtectVirt_connectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQMimeData::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQMimeData::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}

bool sipQMimeData::sipProtect_isSignalConnected(const  ::QMetaMethod& a0) const
{
    return  ::QObject::isSignalConnected(a0);
}

 ::QVariant sipQMimeData::sipProtectVirt_retrieveData(bool sipSelfWasArg,const  ::QString& a0, ::QVariant::Type a1) const
{
    return (sipSelfWasArg ?  ::QMimeData::retrieveData(a0,a1) : retrieveData(a0,a1));
}


PyDoc_STRVAR(doc_QMimeData_sender, "sender(self) -> QObject");

extern "C" {static PyObject *meth_QMimeData_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMimeData_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQMimeData *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
             ::QObject*sipRes = 0;

        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_sender, doc_QMimeData_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_receivers, "receivers(self, PYQT_SIGNAL) -> int");

extern "C" {static PyObject *meth_QMimeData_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMimeData_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQMimeData *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QMimeData, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_receivers, doc_QMimeData_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QMimeData_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMimeData_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipQMimeData *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_timerEvent, doc_QMimeData_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_childEvent, "childEvent(self, QChildEvent)");

extern "C" {static PyObject *meth_QMimeData_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMimeData_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipQMimeData *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_childEvent, doc_QMimeData_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_customEvent, "customEvent(self, QEvent)");

extern "C" {static PyObject *meth_QMimeData_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMimeData_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQMimeData *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_customEvent, doc_QMimeData_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_connectNotify, "connectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QMimeData_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMimeData_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQMimeData *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_connectNotify, doc_QMimeData_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_disconnectNotify, "disconnectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QMimeData_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMimeData_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQMimeData *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_disconnectNotify, doc_QMimeData_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_senderSignalIndex, "senderSignalIndex(self) -> int");

extern "C" {static PyObject *meth_QMimeData_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMimeData_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQMimeData *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_senderSignalIndex, doc_QMimeData_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_isSignalConnected, "isSignalConnected(self, QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QMimeData_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMimeData_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMetaMethod* a0;
        const sipQMimeData *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_isSignalConnected, doc_QMimeData_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_urls, "urls(self) -> object");

extern "C" {static PyObject *meth_QMimeData_urls(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_urls(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            QList< ::QUrl>*sipRes;

            sipRes = new QList< ::QUrl>(sipCpp->urls());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_urls, doc_QMimeData_urls);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_setUrls, "setUrls(self, Iterable[QUrl])");

extern "C" {static PyObject *meth_QMimeData_setUrls(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_setUrls(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList< ::QUrl>* a0;
        int a0State = 0;
         ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QList_0100QUrl,&a0, &a0State))
        {
            sipCpp->setUrls(*a0);
            sipReleaseType(const_cast<QList< ::QUrl> *>(a0),sipType_QList_0100QUrl,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_setUrls, doc_QMimeData_setUrls);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_hasUrls, "hasUrls(self) -> bool");

extern "C" {static PyObject *meth_QMimeData_hasUrls(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_hasUrls(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasUrls();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_hasUrls, doc_QMimeData_hasUrls);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_text, "text(self) -> str");

extern "C" {static PyObject *meth_QMimeData_text(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_text, doc_QMimeData_text);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_setText, "setText(self, str)");

extern "C" {static PyObject *meth_QMimeData_setText(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_setText, doc_QMimeData_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_hasText, "hasText(self) -> bool");

extern "C" {static PyObject *meth_QMimeData_hasText(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_hasText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasText();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_hasText, doc_QMimeData_hasText);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_html, "html(self) -> str");

extern "C" {static PyObject *meth_QMimeData_html(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_html(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->html());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_html, doc_QMimeData_html);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_setHtml, "setHtml(self, str)");

extern "C" {static PyObject *meth_QMimeData_setHtml(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_setHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setHtml(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_setHtml, doc_QMimeData_setHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_hasHtml, "hasHtml(self) -> bool");

extern "C" {static PyObject *meth_QMimeData_hasHtml(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_hasHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasHtml();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_hasHtml, doc_QMimeData_hasHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_imageData, "imageData(self) -> Any");

extern "C" {static PyObject *meth_QMimeData_imageData(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_imageData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->imageData());

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_imageData, doc_QMimeData_imageData);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_setImageData, "setImageData(self, Any)");

extern "C" {static PyObject *meth_QMimeData_setImageData(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_setImageData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVariant* a0;
        int a0State = 0;
         ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->setImageData(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_setImageData, doc_QMimeData_setImageData);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_hasImage, "hasImage(self) -> bool");

extern "C" {static PyObject *meth_QMimeData_hasImage(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_hasImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasImage();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_hasImage, doc_QMimeData_hasImage);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_colorData, "colorData(self) -> Any");

extern "C" {static PyObject *meth_QMimeData_colorData(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_colorData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->colorData());

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_colorData, doc_QMimeData_colorData);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_setColorData, "setColorData(self, Any)");

extern "C" {static PyObject *meth_QMimeData_setColorData(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_setColorData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVariant* a0;
        int a0State = 0;
         ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->setColorData(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_setColorData, doc_QMimeData_setColorData);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_hasColor, "hasColor(self) -> bool");

extern "C" {static PyObject *meth_QMimeData_hasColor(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_hasColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasColor();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_hasColor, doc_QMimeData_hasColor);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_data, "data(self, str) -> QByteArray");

extern "C" {static PyObject *meth_QMimeData_data(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->data(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_data, doc_QMimeData_data);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_setData, "setData(self, str, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QMimeData_setData(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QString,&a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp->setData(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_setData, doc_QMimeData_setData);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_hasFormat, "hasFormat(self, str) -> bool");

extern "C" {static PyObject *meth_QMimeData_hasFormat(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_hasFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QMimeData::hasFormat(*a0) : sipCpp->hasFormat(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_hasFormat, doc_QMimeData_hasFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_formats, "formats(self) -> List[str]");

extern "C" {static PyObject *meth_QMimeData_formats(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_formats(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList((sipSelfWasArg ? sipCpp-> ::QMimeData::formats() : sipCpp->formats()));

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_formats, doc_QMimeData_formats);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_clear, "clear(self)");

extern "C" {static PyObject *meth_QMimeData_clear(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_clear, doc_QMimeData_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_removeFormat, "removeFormat(self, str)");

extern "C" {static PyObject *meth_QMimeData_removeFormat(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_removeFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->removeFormat(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_removeFormat, doc_QMimeData_removeFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_retrieveData, "retrieveData(self, str, QVariant.Type) -> Any");

extern "C" {static PyObject *meth_QMimeData_retrieveData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMimeData_retrieveData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QVariant::Type a1;
        const sipQMimeData *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1E", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant_Type, &a1))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->sipProtectVirt_retrieveData(sipSelfWasArg,*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_retrieveData, doc_QMimeData_retrieveData);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QMimeData(void *, const sipTypeDef *);}
static void *cast_QMimeData(void *sipCppV, const sipTypeDef *targetType)
{
     ::QMimeData *sipCpp = reinterpret_cast< ::QMimeData *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMimeData(void *, int);}
static void release_QMimeData(void *sipCppV, int)
{
     ::QMimeData *sipCpp = reinterpret_cast< ::QMimeData *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QMimeData(sipSimpleWrapper *);}
static void dealloc_QMimeData(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQMimeData *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMimeData(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QMimeData(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMimeData(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQMimeData *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQMimeData();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMimeData[] = {{172, 255, 1}};


static PyMethodDef methods_QMimeData[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QMimeData_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QMimeData_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_clear)},
    {SIP_MLNAME_CAST(sipName_colorData), meth_QMimeData_colorData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_colorData)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QMimeData_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QMimeData_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_data), meth_QMimeData_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_data)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QMimeData_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_formats), meth_QMimeData_formats, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_formats)},
    {SIP_MLNAME_CAST(sipName_hasColor), meth_QMimeData_hasColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_hasColor)},
    {SIP_MLNAME_CAST(sipName_hasFormat), meth_QMimeData_hasFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_hasFormat)},
    {SIP_MLNAME_CAST(sipName_hasHtml), meth_QMimeData_hasHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_hasHtml)},
    {SIP_MLNAME_CAST(sipName_hasImage), meth_QMimeData_hasImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_hasImage)},
    {SIP_MLNAME_CAST(sipName_hasText), meth_QMimeData_hasText, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_hasText)},
    {SIP_MLNAME_CAST(sipName_hasUrls), meth_QMimeData_hasUrls, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_hasUrls)},
    {SIP_MLNAME_CAST(sipName_html), meth_QMimeData_html, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_html)},
    {SIP_MLNAME_CAST(sipName_imageData), meth_QMimeData_imageData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_imageData)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QMimeData_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QMimeData_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_removeFormat), meth_QMimeData_removeFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_removeFormat)},
    {SIP_MLNAME_CAST(sipName_retrieveData), (PyCFunction)meth_QMimeData_retrieveData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMimeData_retrieveData)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QMimeData_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QMimeData_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setColorData), meth_QMimeData_setColorData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_setColorData)},
    {SIP_MLNAME_CAST(sipName_setData), meth_QMimeData_setData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_setData)},
    {SIP_MLNAME_CAST(sipName_setHtml), meth_QMimeData_setHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_setHtml)},
    {SIP_MLNAME_CAST(sipName_setImageData), meth_QMimeData_setImageData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_setImageData)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QMimeData_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_setText)},
    {SIP_MLNAME_CAST(sipName_setUrls), meth_QMimeData_setUrls, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_setUrls)},
    {SIP_MLNAME_CAST(sipName_text), meth_QMimeData_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_text)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QMimeData_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_urls), meth_QMimeData_urls, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_urls)}
};

PyDoc_STRVAR(doc_QMimeData, "\1QMimeData()");


static pyqt5ClassPluginDef plugin_QMimeData = {
    & ::QMimeData::staticMetaObject,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtCore_QMimeData = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMimeData,
        {0},
        &plugin_QMimeData
    },
    {
        sipNameNr_QMimeData,
        {0, 0, 1},
        31, methods_QMimeData,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMimeData,
    -1,
    -1,
    supers_QMimeData,
    0,
    init_type_QMimeData,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMimeData,
    0,
    0,
    0,
    release_QMimeData,
    cast_QMimeData,
    0,
    0,
    0,
    0,
    0,
    0
};
