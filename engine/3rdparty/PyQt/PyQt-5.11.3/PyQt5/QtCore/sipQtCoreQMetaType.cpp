/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#include <qmetatype.h>

#include <qobjectdefs.h>
#include <qmetatype.h>


PyDoc_STRVAR(doc_QMetaType_type, "type(str) -> int");

extern "C" {static PyObject *meth_QMetaType_type(PyObject *, PyObject *);}
static PyObject *meth_QMetaType_type(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "s", &a0))
        {
            int sipRes;

            sipRes =  ::QMetaType::type(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaType, sipName_type, doc_QMetaType_type);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaType_typeName, "typeName(int) -> str");

extern "C" {static PyObject *meth_QMetaType_typeName(PyObject *, PyObject *);}
static PyObject *meth_QMetaType_typeName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            const char*sipRes;

            sipRes =  ::QMetaType::typeName(a0);

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaType, sipName_typeName, doc_QMetaType_typeName);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaType_isRegistered, "isRegistered(int) -> bool\n"
"isRegistered(self) -> bool");

extern "C" {static PyObject *meth_QMetaType_isRegistered(PyObject *, PyObject *);}
static PyObject *meth_QMetaType_isRegistered(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            bool sipRes;

            sipRes =  ::QMetaType::isRegistered(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QMetaType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaType, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRegistered();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaType, sipName_isRegistered, doc_QMetaType_isRegistered);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaType_typeFlags, "typeFlags(int) -> QMetaType.TypeFlags");

extern "C" {static PyObject *meth_QMetaType_typeFlags(PyObject *, PyObject *);}
static PyObject *meth_QMetaType_typeFlags(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
             ::QMetaType::TypeFlags*sipRes;

            sipRes = new  ::QMetaType::TypeFlags( ::QMetaType::typeFlags(a0));

            return sipConvertFromNewType(sipRes,sipType_QMetaType_TypeFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaType, sipName_typeFlags, doc_QMetaType_typeFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaType_flags, "flags(self) -> QMetaType.TypeFlags");

extern "C" {static PyObject *meth_QMetaType_flags(PyObject *, PyObject *);}
static PyObject *meth_QMetaType_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMetaType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaType, &sipCpp))
        {
             ::QMetaType::TypeFlags*sipRes;

            sipRes = new  ::QMetaType::TypeFlags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_QMetaType_TypeFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaType, sipName_flags, doc_QMetaType_flags);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaType_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QMetaType_isValid(PyObject *, PyObject *);}
static PyObject *meth_QMetaType_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMetaType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaType, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaType, sipName_isValid, doc_QMetaType_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaType_metaObjectForType, "metaObjectForType(int) -> QMetaObject");

extern "C" {static PyObject *meth_QMetaType_metaObjectForType(PyObject *, PyObject *);}
static PyObject *meth_QMetaType_metaObjectForType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            const  ::QMetaObject*sipRes;

            sipRes =  ::QMetaType::metaObjectForType(a0);

            return sipConvertFromType(const_cast< ::QMetaObject *>(sipRes),sipType_QMetaObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaType, sipName_metaObjectForType, doc_QMetaType_metaObjectForType);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMetaType(void *, int);}
static void release_QMetaType(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMetaType *>(sipCppV);
}


extern "C" {static void dealloc_QMetaType(sipSimpleWrapper *);}
static void dealloc_QMetaType(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMetaType(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMetaType(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMetaType(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMetaType *sipCpp = 0;

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QMetaType(a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QMetaType[] = {
    {SIP_MLNAME_CAST(sipName_flags), meth_QMetaType_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaType_flags)},
    {SIP_MLNAME_CAST(sipName_isRegistered), meth_QMetaType_isRegistered, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaType_isRegistered)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QMetaType_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaType_isValid)},
    {SIP_MLNAME_CAST(sipName_metaObjectForType), meth_QMetaType_metaObjectForType, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaType_metaObjectForType)},
    {SIP_MLNAME_CAST(sipName_type), meth_QMetaType_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaType_type)},
    {SIP_MLNAME_CAST(sipName_typeFlags), meth_QMetaType_typeFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaType_typeFlags)},
    {SIP_MLNAME_CAST(sipName_typeName), meth_QMetaType_typeName, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaType_typeName)}
};

static sipEnumMemberDef enummembers_QMetaType[] = {
    {sipName_Bool, static_cast<int>( ::QMetaType::Bool), 161},
    {sipName_Char, static_cast<int>( ::QMetaType::Char), 161},
    {sipName_Double, static_cast<int>( ::QMetaType::Double), 161},
    {sipName_FirstGuiType, static_cast<int>( ::QMetaType::FirstGuiType), 161},
    {sipName_Float, static_cast<int>( ::QMetaType::Float), 161},
    {sipName_Int, static_cast<int>( ::QMetaType::Int), 161},
    {sipName_IsEnumeration, static_cast<int>( ::QMetaType::IsEnumeration), 162},
    {sipName_LastCoreType, static_cast<int>( ::QMetaType::LastCoreType), 161},
    {sipName_Long, static_cast<int>( ::QMetaType::Long), 161},
    {sipName_LongLong, static_cast<int>( ::QMetaType::LongLong), 161},
    {sipName_MovableType, static_cast<int>( ::QMetaType::MovableType), 162},
    {sipName_NeedsConstruction, static_cast<int>( ::QMetaType::NeedsConstruction), 162},
    {sipName_NeedsDestruction, static_cast<int>( ::QMetaType::NeedsDestruction), 162},
    {sipName_PointerToQObject, static_cast<int>( ::QMetaType::PointerToQObject), 162},
    {sipName_QBitArray, static_cast<int>( ::QMetaType::QBitArray), 161},
    {sipName_QBitmap, static_cast<int>( ::QMetaType::QBitmap), 161},
    {sipName_QBrush, static_cast<int>( ::QMetaType::QBrush), 161},
    {sipName_QByteArray, static_cast<int>( ::QMetaType::QByteArray), 161},
    {sipName_QByteArrayList, static_cast<int>( ::QMetaType::QByteArrayList), 161},
    {sipName_QChar, static_cast<int>( ::QMetaType::QChar), 161},
    {sipName_QColor, static_cast<int>( ::QMetaType::QColor), 161},
    {sipName_QCursor, static_cast<int>( ::QMetaType::QCursor), 161},
    {sipName_QDate, static_cast<int>( ::QMetaType::QDate), 161},
    {sipName_QDateTime, static_cast<int>( ::QMetaType::QDateTime), 161},
    {sipName_QEasingCurve, static_cast<int>( ::QMetaType::QEasingCurve), 161},
    {sipName_QFont, static_cast<int>( ::QMetaType::QFont), 161},
    {sipName_QIcon, static_cast<int>( ::QMetaType::QIcon), 161},
    {sipName_QImage, static_cast<int>( ::QMetaType::QImage), 161},
    {sipName_QJsonArray, static_cast<int>( ::QMetaType::QJsonArray), 161},
    {sipName_QJsonDocument, static_cast<int>( ::QMetaType::QJsonDocument), 161},
    {sipName_QJsonObject, static_cast<int>( ::QMetaType::QJsonObject), 161},
    {sipName_QJsonValue, static_cast<int>( ::QMetaType::QJsonValue), 161},
    {sipName_QKeySequence, static_cast<int>( ::QMetaType::QKeySequence), 161},
    {sipName_QLine, static_cast<int>( ::QMetaType::QLine), 161},
    {sipName_QLineF, static_cast<int>( ::QMetaType::QLineF), 161},
    {sipName_QLocale, static_cast<int>( ::QMetaType::QLocale), 161},
    {sipName_QMatrix, static_cast<int>( ::QMetaType::QMatrix), 161},
    {sipName_QMatrix4x4, static_cast<int>( ::QMetaType::QMatrix4x4), 161},
    {sipName_QModelIndex, static_cast<int>( ::QMetaType::QModelIndex), 161},
    {sipName_QObjectStar, static_cast<int>( ::QMetaType::QObjectStar), 161},
    {sipName_QPalette, static_cast<int>( ::QMetaType::QPalette), 161},
    {sipName_QPen, static_cast<int>( ::QMetaType::QPen), 161},
    {sipName_QPersistentModelIndex, static_cast<int>( ::QMetaType::QPersistentModelIndex), 161},
    {sipName_QPixmap, static_cast<int>( ::QMetaType::QPixmap), 161},
    {sipName_QPoint, static_cast<int>( ::QMetaType::QPoint), 161},
    {sipName_QPointF, static_cast<int>( ::QMetaType::QPointF), 161},
    {sipName_QPolygon, static_cast<int>( ::QMetaType::QPolygon), 161},
    {sipName_QPolygonF, static_cast<int>( ::QMetaType::QPolygonF), 161},
    {sipName_QQuaternion, static_cast<int>( ::QMetaType::QQuaternion), 161},
    {sipName_QRect, static_cast<int>( ::QMetaType::QRect), 161},
    {sipName_QRectF, static_cast<int>( ::QMetaType::QRectF), 161},
    {sipName_QRegExp, static_cast<int>( ::QMetaType::QRegExp), 161},
    {sipName_QRegion, static_cast<int>( ::QMetaType::QRegion), 161},
    {sipName_QRegularExpression, static_cast<int>( ::QMetaType::QRegularExpression), 161},
    {sipName_QSize, static_cast<int>( ::QMetaType::QSize), 161},
    {sipName_QSizeF, static_cast<int>( ::QMetaType::QSizeF), 161},
    {sipName_QSizePolicy, static_cast<int>( ::QMetaType::QSizePolicy), 161},
    {sipName_QString, static_cast<int>( ::QMetaType::QString), 161},
    {sipName_QStringList, static_cast<int>( ::QMetaType::QStringList), 161},
    {sipName_QTextFormat, static_cast<int>( ::QMetaType::QTextFormat), 161},
    {sipName_QTextLength, static_cast<int>( ::QMetaType::QTextLength), 161},
    {sipName_QTime, static_cast<int>( ::QMetaType::QTime), 161},
    {sipName_QTransform, static_cast<int>( ::QMetaType::QTransform), 161},
    {sipName_QUrl, static_cast<int>( ::QMetaType::QUrl), 161},
    {sipName_QUuid, static_cast<int>( ::QMetaType::QUuid), 161},
    {sipName_QVariant, static_cast<int>( ::QMetaType::QVariant), 161},
    {sipName_QVariantHash, static_cast<int>( ::QMetaType::QVariantHash), 161},
    {sipName_QVariantList, static_cast<int>( ::QMetaType::QVariantList), 161},
    {sipName_QVariantMap, static_cast<int>( ::QMetaType::QVariantMap), 161},
    {sipName_QVector2D, static_cast<int>( ::QMetaType::QVector2D), 161},
    {sipName_QVector3D, static_cast<int>( ::QMetaType::QVector3D), 161},
    {sipName_QVector4D, static_cast<int>( ::QMetaType::QVector4D), 161},
    {sipName_SChar, static_cast<int>( ::QMetaType::SChar), 161},
    {sipName_Short, static_cast<int>( ::QMetaType::Short), 161},
    {sipName_UChar, static_cast<int>( ::QMetaType::UChar), 161},
    {sipName_UInt, static_cast<int>( ::QMetaType::UInt), 161},
    {sipName_ULong, static_cast<int>( ::QMetaType::ULong), 161},
    {sipName_ULongLong, static_cast<int>( ::QMetaType::ULongLong), 161},
    {sipName_UShort, static_cast<int>( ::QMetaType::UShort), 161},
    {sipName_UnknownType, static_cast<int>( ::QMetaType::UnknownType), 161},
    {sipName_User, static_cast<int>( ::QMetaType::User), 161},
    {sipName_Void, static_cast<int>( ::QMetaType::Void), 161},
    {sipName_VoidStar, static_cast<int>( ::QMetaType::VoidStar), 161},
};

PyDoc_STRVAR(doc_QMetaType, "\1QMetaType(int)");


static pyqt5ClassPluginDef plugin_QMetaType = {
    0,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtCore_QMetaType = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMetaType,
        {0},
        &plugin_QMetaType
    },
    {
        sipNameNr_QMetaType,
        {0, 0, 1},
        7, methods_QMetaType,
        83, enummembers_QMetaType,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMetaType,
    -1,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QMetaType,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMetaType,
    0,
    0,
    0,
    release_QMetaType,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
