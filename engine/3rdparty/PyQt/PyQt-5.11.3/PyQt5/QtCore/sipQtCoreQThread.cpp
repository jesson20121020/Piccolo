/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#include <qthread.h>

#include <qobject.h>
#include <qabstracteventdispatcher.h>
#include <qcoreevent.h>
#include <qmetaobject.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qstring.h>
#include <qvariant.h>
#include <qlist.h>
#include <qbytearray.h>
#include <qlist.h>
#include <qnamespace.h>
#include <qnamespace.h>
#include <qregexp.h>
#include <qregularexpression.h>
#include <qobjectdefs.h>


class sipQThread : public  ::QThread
{
public:
    sipQThread( ::QObject*);
    virtual ~sipQThread();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const  ::QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const  ::QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const  ::QMetaMethod&) const;
    void sipProtectVirt_run(bool);
    int sipProtect_exec();
    static void sipProtect_setTerminationEnabled(bool);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void run();
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQThread(const sipQThread &);
    sipQThread &operator = (const sipQThread &);

    char sipPyMethods[8];
};

sipQThread::sipQThread( ::QObject*a0):  ::QThread(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQThread::~sipQThread()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQThread::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QThread);

    return  ::QThread::metaObject();
}

int sipQThread::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QThread::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QThread,_c,_id,_a);

    return _id;
}

void *sipQThread::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QThread, _clname, &sipCpp) ? sipCpp :  ::QThread::qt_metacast(_clname));
}

void sipQThread::run()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_run);

    if (!sipMeth)
    {
         ::QThread::run();
        sipEndThread();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);

    sipEndThread();
}

bool sipQThread::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QThread::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQThread::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QThread::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQThread::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QThread::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQThread::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QThread::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQThread::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QThread::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQThread::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QThread::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQThread::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QThread::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQThread::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipQThread::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipQThread::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQThread::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipQThread::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipQThread::sipProtectVirt_connectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQThread::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQThread::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}

bool sipQThread::sipProtect_isSignalConnected(const  ::QMetaMethod& a0) const
{
    return  ::QObject::isSignalConnected(a0);
}

void sipQThread::sipProtectVirt_run(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::QThread::run() : run());
}

int sipQThread::sipProtect_exec()
{
    return  ::QThread::exec();
}

void sipQThread::sipProtect_setTerminationEnabled(bool a0)
{
     ::QThread::setTerminationEnabled(a0);
}


PyDoc_STRVAR(doc_QThread_sender, "sender(self) -> QObject");

extern "C" {static PyObject *meth_QThread_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QThread_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQThread *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
             ::QObject*sipRes = 0;

        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_sender, doc_QThread_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_receivers, "receivers(self, PYQT_SIGNAL) -> int");

extern "C" {static PyObject *meth_QThread_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QThread_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQThread *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QThread, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_receivers, doc_QThread_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QThread_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QThread_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipQThread *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QThread, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_timerEvent, doc_QThread_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_childEvent, "childEvent(self, QChildEvent)");

extern "C" {static PyObject *meth_QThread_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QThread_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipQThread *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QThread, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_childEvent, doc_QThread_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_customEvent, "customEvent(self, QEvent)");

extern "C" {static PyObject *meth_QThread_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QThread_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQThread *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QThread, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_customEvent, doc_QThread_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_connectNotify, "connectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QThread_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QThread_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQThread *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QThread, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_connectNotify, doc_QThread_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_disconnectNotify, "disconnectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QThread_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QThread_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQThread *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QThread, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_disconnectNotify, doc_QThread_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_senderSignalIndex, "senderSignalIndex(self) -> int");

extern "C" {static PyObject *meth_QThread_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QThread_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQThread *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_senderSignalIndex, doc_QThread_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_isSignalConnected, "isSignalConnected(self, QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QThread_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QThread_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMetaMethod* a0;
        const sipQThread *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QThread, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_isSignalConnected, doc_QThread_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_currentThread, "currentThread() -> QThread");

extern "C" {static PyObject *meth_QThread_currentThread(PyObject *, PyObject *);}
static PyObject *meth_QThread_currentThread(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QThread*sipRes;

            sipRes =  ::QThread::currentThread();

            return sipConvertFromType(sipRes,sipType_QThread,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_currentThread, doc_QThread_currentThread);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_currentThreadId, "currentThreadId() -> sip.voidptr");

extern "C" {static PyObject *meth_QThread_currentThreadId(PyObject *, PyObject *);}
static PyObject *meth_QThread_currentThreadId(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::Qt::HANDLE sipRes;

            sipRes =  ::QThread::currentThreadId();

            return sipConvertFromVoidPtr((void *)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_currentThreadId, doc_QThread_currentThreadId);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_idealThreadCount, "idealThreadCount() -> int");

extern "C" {static PyObject *meth_QThread_idealThreadCount(PyObject *, PyObject *);}
static PyObject *meth_QThread_idealThreadCount(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipRes =  ::QThread::idealThreadCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_idealThreadCount, doc_QThread_idealThreadCount);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_yieldCurrentThread, "yieldCurrentThread()");

extern "C" {static PyObject *meth_QThread_yieldCurrentThread(PyObject *, PyObject *);}
static PyObject *meth_QThread_yieldCurrentThread(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QThread::yieldCurrentThread();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_yieldCurrentThread, doc_QThread_yieldCurrentThread);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_isFinished, "isFinished(self) -> bool");

extern "C" {static PyObject *meth_QThread_isFinished(PyObject *, PyObject *);}
static PyObject *meth_QThread_isFinished(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFinished();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_isFinished, doc_QThread_isFinished);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_isRunning, "isRunning(self) -> bool");

extern "C" {static PyObject *meth_QThread_isRunning(PyObject *, PyObject *);}
static PyObject *meth_QThread_isRunning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRunning();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_isRunning, doc_QThread_isRunning);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_setPriority, "setPriority(self, QThread.Priority)");

extern "C" {static PyObject *meth_QThread_setPriority(PyObject *, PyObject *);}
static PyObject *meth_QThread_setPriority(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QThread::Priority a0;
         ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QThread, &sipCpp, sipType_QThread_Priority, &a0))
        {
            sipCpp->setPriority(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_setPriority, doc_QThread_setPriority);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_priority, "priority(self) -> QThread.Priority");

extern "C" {static PyObject *meth_QThread_priority(PyObject *, PyObject *);}
static PyObject *meth_QThread_priority(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
             ::QThread::Priority sipRes;

            sipRes = sipCpp->priority();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QThread_Priority);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_priority, doc_QThread_priority);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_setStackSize, "setStackSize(self, int)");

extern "C" {static PyObject *meth_QThread_setStackSize(PyObject *, PyObject *);}
static PyObject *meth_QThread_setStackSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::uint a0;
         ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QThread, &sipCpp, &a0))
        {
            sipCpp->setStackSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_setStackSize, doc_QThread_setStackSize);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_stackSize, "stackSize(self) -> int");

extern "C" {static PyObject *meth_QThread_stackSize(PyObject *, PyObject *);}
static PyObject *meth_QThread_stackSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
             ::uint sipRes;

            sipRes = sipCpp->stackSize();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_stackSize, doc_QThread_stackSize);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_exit, "exit(self, returnCode: int = 0)");

extern "C" {static PyObject *meth_QThread_exit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QThread_exit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::QThread *sipCpp;

        static const char *sipKwdList[] = {
            sipName_returnCode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QThread, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->exit(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_exit, doc_QThread_exit);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_start, "start(self, priority: QThread.Priority = QThread.InheritPriority)");

extern "C" {static PyObject *meth_QThread_start(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QThread_start(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QThread::Priority a0 = QThread::InheritPriority;
         ::QThread *sipCpp;

        static const char *sipKwdList[] = {
            sipName_priority,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QThread, &sipCpp, sipType_QThread_Priority, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->start(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_start, doc_QThread_start);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_terminate, "terminate(self)");

extern "C" {static PyObject *meth_QThread_terminate(PyObject *, PyObject *);}
static PyObject *meth_QThread_terminate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
            sipCpp->terminate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_terminate, doc_QThread_terminate);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_quit, "quit(self)");

extern "C" {static PyObject *meth_QThread_quit(PyObject *, PyObject *);}
static PyObject *meth_QThread_quit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
            sipCpp->quit();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_quit, doc_QThread_quit);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_wait, "wait(self, msecs: int = ULONG_MAX) -> bool");

extern "C" {static PyObject *meth_QThread_wait(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QThread_wait(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        unsigned long a0 = ULONG_MAX;
         ::QThread *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|m", &sipSelf, sipType_QThread, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wait(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_wait, doc_QThread_wait);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_run, "run(self)");

extern "C" {static PyObject *meth_QThread_run(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QThread_run(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipQThread *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
            sipCpp->sipProtectVirt_run(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_run, doc_QThread_run);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_exec_, "exec_(self) -> int");

extern "C" {static PyObject *meth_QThread_exec_(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QThread_exec_(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQThread *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_exec();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_exec_, doc_QThread_exec_);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_setTerminationEnabled, "setTerminationEnabled(enabled: bool = True)");

extern "C" {static PyObject *meth_QThread_setTerminationEnabled(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QThread_setTerminationEnabled(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;

        static const char *sipKwdList[] = {
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|b", &a0))
        {
            sipQThread::sipProtect_setTerminationEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_setTerminationEnabled, doc_QThread_setTerminationEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QThread_event(PyObject *, PyObject *);}
static PyObject *meth_QThread_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QThread, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QThread::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_event, doc_QThread_event);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_sleep, "sleep(int)");

extern "C" {static PyObject *meth_QThread_sleep(PyObject *, PyObject *);}
static PyObject *meth_QThread_sleep(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        unsigned long a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "m", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QThread::sleep(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_sleep, doc_QThread_sleep);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_msleep, "msleep(int)");

extern "C" {static PyObject *meth_QThread_msleep(PyObject *, PyObject *);}
static PyObject *meth_QThread_msleep(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        unsigned long a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "m", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QThread::msleep(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_msleep, doc_QThread_msleep);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_usleep, "usleep(int)");

extern "C" {static PyObject *meth_QThread_usleep(PyObject *, PyObject *);}
static PyObject *meth_QThread_usleep(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        unsigned long a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "m", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QThread::usleep(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_usleep, doc_QThread_usleep);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_eventDispatcher, "eventDispatcher(self) -> QAbstractEventDispatcher");

extern "C" {static PyObject *meth_QThread_eventDispatcher(PyObject *, PyObject *);}
static PyObject *meth_QThread_eventDispatcher(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
             ::QAbstractEventDispatcher*sipRes;

            sipRes = sipCpp->eventDispatcher();

            return sipConvertFromType(sipRes,sipType_QAbstractEventDispatcher,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_eventDispatcher, doc_QThread_eventDispatcher);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_setEventDispatcher, "setEventDispatcher(self, QAbstractEventDispatcher)");

extern "C" {static PyObject *meth_QThread_setEventDispatcher(PyObject *, PyObject *);}
static PyObject *meth_QThread_setEventDispatcher(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractEventDispatcher* a0;
         ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QThread, &sipCpp, sipType_QAbstractEventDispatcher, &a0))
        {
            sipCpp->setEventDispatcher(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_setEventDispatcher, doc_QThread_setEventDispatcher);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_requestInterruption, "requestInterruption(self)");

extern "C" {static PyObject *meth_QThread_requestInterruption(PyObject *, PyObject *);}
static PyObject *meth_QThread_requestInterruption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
            sipCpp->requestInterruption();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_requestInterruption, doc_QThread_requestInterruption);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_isInterruptionRequested, "isInterruptionRequested(self) -> bool");

extern "C" {static PyObject *meth_QThread_isInterruptionRequested(PyObject *, PyObject *);}
static PyObject *meth_QThread_isInterruptionRequested(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isInterruptionRequested();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_isInterruptionRequested, doc_QThread_isInterruptionRequested);

    return NULL;
}


PyDoc_STRVAR(doc_QThread_loopLevel, "loopLevel(self) -> int");

extern "C" {static PyObject *meth_QThread_loopLevel(PyObject *, PyObject *);}
static PyObject *meth_QThread_loopLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->loopLevel();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_loopLevel, doc_QThread_loopLevel);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QThread(void *, const sipTypeDef *);}
static void *cast_QThread(void *sipCppV, const sipTypeDef *targetType)
{
     ::QThread *sipCpp = reinterpret_cast< ::QThread *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QThread(void *, int);}
static void release_QThread(void *sipCppV, int)
{
     ::QThread *sipCpp = reinterpret_cast< ::QThread *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QThread(sipSimpleWrapper *);}
static void dealloc_QThread(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQThread *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QThread(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QThread(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QThread(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQThread *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQThread(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QThread[] = {{172, 255, 1}};


static PyMethodDef methods_QThread[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QThread_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QThread_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_currentThread), meth_QThread_currentThread, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_currentThread)},
    {SIP_MLNAME_CAST(sipName_currentThreadId), meth_QThread_currentThreadId, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_currentThreadId)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QThread_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QThread_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QThread_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_event)},
    {SIP_MLNAME_CAST(sipName_eventDispatcher), meth_QThread_eventDispatcher, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_eventDispatcher)},
    {SIP_MLNAME_CAST(sipName_exec_), (PyCFunction)meth_QThread_exec_, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QThread_exec_)},
    {SIP_MLNAME_CAST(sipName_exit), (PyCFunction)meth_QThread_exit, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QThread_exit)},
    {SIP_MLNAME_CAST(sipName_idealThreadCount), meth_QThread_idealThreadCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_idealThreadCount)},
    {SIP_MLNAME_CAST(sipName_isFinished), meth_QThread_isFinished, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_isFinished)},
    {SIP_MLNAME_CAST(sipName_isInterruptionRequested), meth_QThread_isInterruptionRequested, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_isInterruptionRequested)},
    {SIP_MLNAME_CAST(sipName_isRunning), meth_QThread_isRunning, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_isRunning)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QThread_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_loopLevel), meth_QThread_loopLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_loopLevel)},
    {SIP_MLNAME_CAST(sipName_msleep), meth_QThread_msleep, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_msleep)},
    {SIP_MLNAME_CAST(sipName_priority), meth_QThread_priority, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_priority)},
    {SIP_MLNAME_CAST(sipName_quit), meth_QThread_quit, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_quit)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QThread_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_requestInterruption), meth_QThread_requestInterruption, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_requestInterruption)},
    {SIP_MLNAME_CAST(sipName_run), (PyCFunction)meth_QThread_run, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QThread_run)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QThread_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QThread_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setEventDispatcher), meth_QThread_setEventDispatcher, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_setEventDispatcher)},
    {SIP_MLNAME_CAST(sipName_setPriority), meth_QThread_setPriority, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_setPriority)},
    {SIP_MLNAME_CAST(sipName_setStackSize), meth_QThread_setStackSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_setStackSize)},
    {SIP_MLNAME_CAST(sipName_setTerminationEnabled), (PyCFunction)meth_QThread_setTerminationEnabled, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QThread_setTerminationEnabled)},
    {SIP_MLNAME_CAST(sipName_sleep), meth_QThread_sleep, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_sleep)},
    {SIP_MLNAME_CAST(sipName_stackSize), meth_QThread_stackSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_stackSize)},
    {SIP_MLNAME_CAST(sipName_start), (PyCFunction)meth_QThread_start, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QThread_start)},
    {SIP_MLNAME_CAST(sipName_terminate), meth_QThread_terminate, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_terminate)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QThread_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_usleep), meth_QThread_usleep, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_usleep)},
    {SIP_MLNAME_CAST(sipName_wait), (PyCFunction)meth_QThread_wait, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QThread_wait)},
    {SIP_MLNAME_CAST(sipName_yieldCurrentThread), meth_QThread_yieldCurrentThread, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_yieldCurrentThread)}
};

static sipEnumMemberDef enummembers_QThread[] = {
    {sipName_HighPriority, static_cast<int>( ::QThread::HighPriority), 275},
    {sipName_HighestPriority, static_cast<int>( ::QThread::HighestPriority), 275},
    {sipName_IdlePriority, static_cast<int>( ::QThread::IdlePriority), 275},
    {sipName_InheritPriority, static_cast<int>( ::QThread::InheritPriority), 275},
    {sipName_LowPriority, static_cast<int>( ::QThread::LowPriority), 275},
    {sipName_LowestPriority, static_cast<int>( ::QThread::LowestPriority), 275},
    {sipName_NormalPriority, static_cast<int>( ::QThread::NormalPriority), 275},
    {sipName_TimeCriticalPriority, static_cast<int>( ::QThread::TimeCriticalPriority), 275},
};

PyDoc_STRVAR(doc_QThread, "\1QThread(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QThread[] = {
    {"finished()", "\1finished(self)", 0, 0},
    {"started()", "\1started(self)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QThread = {
    & ::QThread::staticMetaObject,
    0,
    signals_QThread,
    0
};


sipClassTypeDef sipTypeDef_QtCore_QThread = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QThread,
        {0},
        &plugin_QThread
    },
    {
        sipNameNr_QThread,
        {0, 0, 1},
        36, methods_QThread,
        8, enummembers_QThread,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QThread,
    -1,
    -1,
    supers_QThread,
    0,
    init_type_QThread,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QThread,
    0,
    0,
    0,
    release_QThread,
    cast_QThread,
    0,
    0,
    0,
    0,
    0,
    0
};
