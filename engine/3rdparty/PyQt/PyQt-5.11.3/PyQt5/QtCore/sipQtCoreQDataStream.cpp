/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#include <qdatastream.h>

#include <qiodevice.h>
#include <qbytearray.h>
#include <qiodevice.h>
#include <qbitarray.h>
#include <qdatetime.h>
#include <qdatetime.h>
#include <qdatetime.h>
#include <qeasingcurve.h>
#include <qline.h>
#include <qline.h>
#include <qlocale.h>
#include <qmargins.h>
#include <qmargins.h>
#include <qpoint.h>
#include <qpoint.h>
#include <qrect.h>
#include <qrect.h>
#include <qregexp.h>
#include <qregularexpression.h>
#include <qsize.h>
#include <qsize.h>
#include <qtimezone.h>
#include <qurl.h>
#include <quuid.h>
#include <qvariant.h>
#include <qversionnumber.h>
#include <qhash.h>
#include <qstring.h>
#include <qmap.h>
#include <qlist.h>
#include <qstringlist.h>


PyDoc_STRVAR(doc_QDataStream_device, "device(self) -> QIODevice");

extern "C" {static PyObject *meth_QDataStream_device(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::QIODevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_device, doc_QDataStream_device);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_setDevice, "setDevice(self, QIODevice)");

extern "C" {static PyObject *meth_QDataStream_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QIODevice* a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QIODevice, &a0))
        {
            sipCpp->setDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_setDevice, doc_QDataStream_setDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_atEnd, "atEnd(self) -> bool");

extern "C" {static PyObject *meth_QDataStream_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->atEnd();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_atEnd, doc_QDataStream_atEnd);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_status, "status(self) -> QDataStream.Status");

extern "C" {static PyObject *meth_QDataStream_status(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::QDataStream::Status sipRes;

            sipRes = sipCpp->status();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QDataStream_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_status, doc_QDataStream_status);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_setStatus, "setStatus(self, QDataStream.Status)");

extern "C" {static PyObject *meth_QDataStream_setStatus(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream::Status a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QDataStream_Status, &a0))
        {
            sipCpp->setStatus(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_setStatus, doc_QDataStream_setStatus);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_resetStatus, "resetStatus(self)");

extern "C" {static PyObject *meth_QDataStream_resetStatus(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_resetStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            sipCpp->resetStatus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_resetStatus, doc_QDataStream_resetStatus);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_byteOrder, "byteOrder(self) -> QDataStream.ByteOrder");

extern "C" {static PyObject *meth_QDataStream_byteOrder(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_byteOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::QDataStream::ByteOrder sipRes;

            sipRes = sipCpp->byteOrder();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QDataStream_ByteOrder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_byteOrder, doc_QDataStream_byteOrder);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_setByteOrder, "setByteOrder(self, QDataStream.ByteOrder)");

extern "C" {static PyObject *meth_QDataStream_setByteOrder(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setByteOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream::ByteOrder a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QDataStream_ByteOrder, &a0))
        {
            sipCpp->setByteOrder(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_setByteOrder, doc_QDataStream_setByteOrder);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_version, "version(self) -> int");

extern "C" {static PyObject *meth_QDataStream_version(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_version(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->version();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_version, doc_QDataStream_version);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_setVersion, "setVersion(self, int)");

extern "C" {static PyObject *meth_QDataStream_setVersion(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
            sipCpp->setVersion(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_setVersion, doc_QDataStream_setVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_skipRawData, "skipRawData(self, int) -> int");

extern "C" {static PyObject *meth_QDataStream_skipRawData(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_skipRawData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->skipRawData(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_skipRawData, doc_QDataStream_skipRawData);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readInt, "readInt(self) -> int");

extern "C" {static PyObject *meth_QDataStream_readInt(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            int sipRes = 0;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readInt, doc_QDataStream_readInt);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readInt8, "readInt8(self) -> int");

extern "C" {static PyObject *meth_QDataStream_readInt8(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::qint8 sipRes = 0;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readInt8, doc_QDataStream_readInt8);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readUInt8, "readUInt8(self) -> int");

extern "C" {static PyObject *meth_QDataStream_readUInt8(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readUInt8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::quint8 sipRes = 0;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readUInt8, doc_QDataStream_readUInt8);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readInt16, "readInt16(self) -> int");

extern "C" {static PyObject *meth_QDataStream_readInt16(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt16(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::qint16 sipRes = 0;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readInt16, doc_QDataStream_readInt16);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readUInt16, "readUInt16(self) -> int");

extern "C" {static PyObject *meth_QDataStream_readUInt16(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readUInt16(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::quint16 sipRes = 0;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readUInt16, doc_QDataStream_readUInt16);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readInt32, "readInt32(self) -> int");

extern "C" {static PyObject *meth_QDataStream_readInt32(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::qint32 sipRes = 0;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readInt32, doc_QDataStream_readInt32);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readUInt32, "readUInt32(self) -> int");

extern "C" {static PyObject *meth_QDataStream_readUInt32(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readUInt32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::quint32 sipRes = 0;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readUInt32, doc_QDataStream_readUInt32);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readInt64, "readInt64(self) -> int");

extern "C" {static PyObject *meth_QDataStream_readInt64(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt64(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::qint64 sipRes = 0;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readInt64, doc_QDataStream_readInt64);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readUInt64, "readUInt64(self) -> int");

extern "C" {static PyObject *meth_QDataStream_readUInt64(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readUInt64(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::quint64 sipRes = 0;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readUInt64, doc_QDataStream_readUInt64);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readBool, "readBool(self) -> bool");

extern "C" {static PyObject *meth_QDataStream_readBool(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readBool(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            bool sipRes = 0;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readBool, doc_QDataStream_readBool);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readFloat, "readFloat(self) -> float");

extern "C" {static PyObject *meth_QDataStream_readFloat(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readFloat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            float sipRes = 0;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readFloat, doc_QDataStream_readFloat);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readDouble, "readDouble(self) -> float");

extern "C" {static PyObject *meth_QDataStream_readDouble(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readDouble(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            double sipRes = 0;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readDouble, doc_QDataStream_readDouble);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readString, "readString(self) -> str");

extern "C" {static PyObject *meth_QDataStream_readString(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            PyObject * sipRes = 0;

    char *s;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> s;
    Py_END_ALLOW_THREADS

    if (s)
    {
        sipRes = SIPBytes_FromString(s);
        delete[] s;
    }
    else
    {
        sipRes = Py_None;
        Py_INCREF(Py_None);
    }

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readString, doc_QDataStream_readString);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeInt, "writeInt(self, int)");

extern "C" {static PyObject *meth_QDataStream_writeInt(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeInt, doc_QDataStream_writeInt);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeInt8, "writeInt8(self, int)");

extern "C" {static PyObject *meth_QDataStream_writeInt8(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qint8 a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BL", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeInt8, doc_QDataStream_writeInt8);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeUInt8, "writeUInt8(self, int)");

extern "C" {static PyObject *meth_QDataStream_writeUInt8(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeUInt8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::quint8 a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BM", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeUInt8, doc_QDataStream_writeUInt8);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeInt16, "writeInt16(self, int)");

extern "C" {static PyObject *meth_QDataStream_writeInt16(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt16(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qint16 a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bh", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeInt16, doc_QDataStream_writeInt16);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeUInt16, "writeUInt16(self, int)");

extern "C" {static PyObject *meth_QDataStream_writeUInt16(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeUInt16(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::quint16 a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bt", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeUInt16, doc_QDataStream_writeUInt16);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeInt32, "writeInt32(self, int)");

extern "C" {static PyObject *meth_QDataStream_writeInt32(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qint32 a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeInt32, doc_QDataStream_writeInt32);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeUInt32, "writeUInt32(self, int)");

extern "C" {static PyObject *meth_QDataStream_writeUInt32(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeUInt32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::quint32 a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeUInt32, doc_QDataStream_writeUInt32);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeInt64, "writeInt64(self, int)");

extern "C" {static PyObject *meth_QDataStream_writeInt64(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt64(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qint64 a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeInt64, doc_QDataStream_writeInt64);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeUInt64, "writeUInt64(self, int)");

extern "C" {static PyObject *meth_QDataStream_writeUInt64(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeUInt64(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::quint64 a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bo", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeUInt64, doc_QDataStream_writeUInt64);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeBool, "writeBool(self, bool)");

extern "C" {static PyObject *meth_QDataStream_writeBool(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeBool(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeBool, doc_QDataStream_writeBool);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeFloat, "writeFloat(self, float)");

extern "C" {static PyObject *meth_QDataStream_writeFloat(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeFloat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeFloat, doc_QDataStream_writeFloat);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeDouble, "writeDouble(self, float)");

extern "C" {static PyObject *meth_QDataStream_writeDouble(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeDouble(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeDouble, doc_QDataStream_writeDouble);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeString, "writeString(self, str)");

extern "C" {static PyObject *meth_QDataStream_writeString(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeString, doc_QDataStream_writeString);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readQString, "readQString(self) -> str");

extern "C" {static PyObject *meth_QDataStream_readQString(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::QString*sipRes = 0;

    sipRes = new QString;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQString, doc_QDataStream_readQString);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeQString, "writeQString(self, str)");

extern "C" {static PyObject *meth_QDataStream_writeQString(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QString,&a0, &a0State))
        {
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQString, doc_QDataStream_writeQString);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readQStringList, "readQStringList(self) -> List[str]");

extern "C" {static PyObject *meth_QDataStream_readQStringList(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQStringList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::QStringList*sipRes = 0;

    sipRes = new QStringList;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQStringList, doc_QDataStream_readQStringList);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeQStringList, "writeQStringList(self, Iterable[str])");

extern "C" {static PyObject *meth_QDataStream_writeQStringList(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQStringList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQStringList, doc_QDataStream_writeQStringList);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readQVariant, "readQVariant(self) -> Any");

extern "C" {static PyObject *meth_QDataStream_readQVariant(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQVariant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::QVariant*sipRes = 0;

    sipRes = new QVariant;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQVariant, doc_QDataStream_readQVariant);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeQVariant, "writeQVariant(self, Any)");

extern "C" {static PyObject *meth_QDataStream_writeQVariant(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQVariant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVariant* a0;
        int a0State = 0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQVariant, doc_QDataStream_writeQVariant);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readQVariantList, "readQVariantList(self) -> List[Any]");

extern "C" {static PyObject *meth_QDataStream_readQVariantList(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQVariantList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::QVariantList*sipRes = 0;

    sipRes = new QVariantList;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQVariantList, doc_QDataStream_readQVariantList);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeQVariantList, "writeQVariantList(self, List[Any])");

extern "C" {static PyObject *meth_QDataStream_writeQVariantList(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQVariantList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVariantList* a0;
        int a0State = 0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QList_0100QVariant,&a0, &a0State))
        {
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QVariantList *>(a0),sipType_QList_0100QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQVariantList, doc_QDataStream_writeQVariantList);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readQVariantMap, "readQVariantMap(self) -> Dict[str, Any]");

extern "C" {static PyObject *meth_QDataStream_readQVariantMap(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQVariantMap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::QVariantMap*sipRes = 0;

    sipRes = new QVariantMap;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMap_0100QString_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQVariantMap, doc_QDataStream_readQVariantMap);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeQVariantMap, "writeQVariantMap(self, Dict[str, Any])");

extern "C" {static PyObject *meth_QDataStream_writeQVariantMap(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQVariantMap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVariantMap* a0;
        int a0State = 0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QMap_0100QString_0100QVariant,&a0, &a0State))
        {
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QVariantMap *>(a0),sipType_QMap_0100QString_0100QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQVariantMap, doc_QDataStream_writeQVariantMap);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readQVariantHash, "readQVariantHash(self) -> Dict[str, Any]");

extern "C" {static PyObject *meth_QDataStream_readQVariantHash(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQVariantHash(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::QVariantHash*sipRes = 0;

    sipRes = new QVariantHash;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QHash_0100QString_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQVariantHash, doc_QDataStream_readQVariantHash);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeQVariantHash, "writeQVariantHash(self, Dict[str, Any])");

extern "C" {static PyObject *meth_QDataStream_writeQVariantHash(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQVariantHash(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVariantHash* a0;
        int a0State = 0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QHash_0100QString_0100QVariant,&a0, &a0State))
        {
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QVariantHash *>(a0),sipType_QHash_0100QString_0100QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQVariantHash, doc_QDataStream_writeQVariantHash);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readBytes, "readBytes(self) -> str");

extern "C" {static PyObject *meth_QDataStream_readBytes(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readBytes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

        char *s;
        uint l;
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->readBytes(s, l);
        Py_END_ALLOW_THREADS
        
        if ((sipRes = SIPBytes_FromStringAndSize(s, l)) == NULL)
            sipIsErr = 1;
        
        if (s)
            delete[] s;

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readBytes, doc_QDataStream_readBytes);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_readRawData, "readRawData(self, int) -> str");

extern "C" {static PyObject *meth_QDataStream_readRawData(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readRawData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

        char *s = new char[a0];
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->readRawData(s, a0);
        Py_END_ALLOW_THREADS
        
        sipRes = SIPBytes_FromStringAndSize(s, a0);
        
        if (!sipRes)
            sipIsErr = 1;
        
        delete[] s;

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readRawData, doc_QDataStream_readRawData);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeBytes, "writeBytes(self, bytes) -> QDataStream");

extern "C" {static PyObject *meth_QDataStream_writeBytes(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeBytes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        SIP_SSIZE_T a1;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bk", &sipSelf, sipType_QDataStream, &sipCpp, &a0, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->writeBytes(a0,(uint)a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeBytes, doc_QDataStream_writeBytes);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_writeRawData, "writeRawData(self, bytes) -> int");

extern "C" {static PyObject *meth_QDataStream_writeRawData(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeRawData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        SIP_SSIZE_T a1;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bk", &sipSelf, sipType_QDataStream, &sipCpp, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->writeRawData(a0,(int)a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeRawData, doc_QDataStream_writeRawData);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_floatingPointPrecision, "floatingPointPrecision(self) -> QDataStream.FloatingPointPrecision");

extern "C" {static PyObject *meth_QDataStream_floatingPointPrecision(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_floatingPointPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::QDataStream::FloatingPointPrecision sipRes;

            sipRes = sipCpp->floatingPointPrecision();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QDataStream_FloatingPointPrecision);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_floatingPointPrecision, doc_QDataStream_floatingPointPrecision);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_setFloatingPointPrecision, "setFloatingPointPrecision(self, QDataStream.FloatingPointPrecision)");

extern "C" {static PyObject *meth_QDataStream_setFloatingPointPrecision(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setFloatingPointPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream::FloatingPointPrecision a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QDataStream_FloatingPointPrecision, &a0))
        {
            sipCpp->setFloatingPointPrecision(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_setFloatingPointPrecision, doc_QDataStream_setFloatingPointPrecision);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_startTransaction, "startTransaction(self)");

extern "C" {static PyObject *meth_QDataStream_startTransaction(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_startTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            sipCpp->startTransaction();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_startTransaction, doc_QDataStream_startTransaction);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_commitTransaction, "commitTransaction(self) -> bool");

extern "C" {static PyObject *meth_QDataStream_commitTransaction(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_commitTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->commitTransaction();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_commitTransaction, doc_QDataStream_commitTransaction);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_rollbackTransaction, "rollbackTransaction(self)");

extern "C" {static PyObject *meth_QDataStream_rollbackTransaction(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_rollbackTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            sipCpp->rollbackTransaction();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_rollbackTransaction, doc_QDataStream_rollbackTransaction);

    return NULL;
}


PyDoc_STRVAR(doc_QDataStream_abortTransaction, "abortTransaction(self)");

extern "C" {static PyObject *meth_QDataStream_abortTransaction(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_abortTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            sipCpp->abortTransaction();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_abortTransaction, doc_QDataStream_abortTransaction);

    return NULL;
}


extern "C" {static PyObject *slot_QDataStream___lshift__(PyObject *,PyObject *);}
static PyObject *slot_QDataStream___lshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream* a0;
        const  ::QBitArray* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QBitArray, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QByteArray* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QByteArray, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QDate* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QDate, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QTime* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QTime, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QDateTime* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QDateTime, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QEasingCurve* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QEasingCurve, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QLine* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLine, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QLineF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLineF, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QLocale* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLocale, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QMargins* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QMargins, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QMarginsF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QMarginsF, &a1))
        {
             ::QDataStream*sipRes;

            sipRes = &(*a0 << *a1);

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QPoint* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPoint, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QPointF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPointF, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QRect* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRect, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QRectF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRectF, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QRegExp* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRegExp, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QRegularExpression* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRegularExpression, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QSize* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QSize, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QSizeF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QSizeF, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QTimeZone* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QTimeZone, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QUrl* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QUrl, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QUuid* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QUuid, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QVariant* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QVariant, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QVariant::Type a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9XE", sipType_QDataStream, &a0, sipType_QVariant_Type, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QVersionNumber* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QVersionNumber, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lshift_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QDataStream___rshift__(PyObject *,PyObject *);}
static PyObject *slot_QDataStream___rshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDataStream* a0;
         ::QBitArray* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QBitArray, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QByteArray* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QByteArray, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QDate* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QDate, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QTime* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QTime, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QDateTime* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QDateTime, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QEasingCurve* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QEasingCurve, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QLine* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLine, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QLineF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLineF, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QLocale* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLocale, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QMargins* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QMargins, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QMarginsF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QMarginsF, &a1))
        {
             ::QDataStream*sipRes;

            sipRes = &(*a0 >> *a1);

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QPoint* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPoint, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QPointF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPointF, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QRect* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRect, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QRectF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRectF, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QRegExp* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRegExp, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QRegularExpression* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRegularExpression, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QSize* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QSize, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QSizeF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QSizeF, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QTimeZone* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QTimeZone, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QUrl* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QUrl, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QUuid* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QUuid, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QVariant* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QVariant, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QVariant::Type a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9XE", sipType_QDataStream, &a0, sipType_QVariant_Type, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
         ::QDataStream* a0;
         ::QVersionNumber* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QVersionNumber, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore, rshift_slot, NULL, sipArg0, sipArg1);
}


/* Call the instance's destructor. */
extern "C" {static void release_QDataStream(void *, int);}
static void release_QDataStream(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDataStream *>(sipCppV);
}


extern "C" {static void dealloc_QDataStream(sipSimpleWrapper *);}
static void dealloc_QDataStream(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDataStream(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDataStream(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDataStream(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDataStream *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::QDataStream();

            return sipCpp;
        }
    }

    {
         ::QIODevice* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QIODevice, &a0))
        {
            sipCpp = new  ::QDataStream(a0);

            return sipCpp;
        }
    }

    {
         ::QByteArray* a0;
         ::QIODevice::OpenMode* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8J1", sipType_QByteArray, &a0, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            sipCpp = new  ::QDataStream(a0,*a1);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            return sipCpp;
        }
    }

    {
        const  ::QByteArray* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QByteArray, &a0))
        {
            sipCpp = new  ::QDataStream(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDataStream[] = {
    {(void *)slot_QDataStream___lshift__, lshift_slot},
    {(void *)slot_QDataStream___rshift__, rshift_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QDataStream[] = {
    {SIP_MLNAME_CAST(sipName_abortTransaction), meth_QDataStream_abortTransaction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_abortTransaction)},
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QDataStream_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_atEnd)},
    {SIP_MLNAME_CAST(sipName_byteOrder), meth_QDataStream_byteOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_byteOrder)},
    {SIP_MLNAME_CAST(sipName_commitTransaction), meth_QDataStream_commitTransaction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_commitTransaction)},
    {SIP_MLNAME_CAST(sipName_device), meth_QDataStream_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_device)},
    {SIP_MLNAME_CAST(sipName_floatingPointPrecision), meth_QDataStream_floatingPointPrecision, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_floatingPointPrecision)},
    {SIP_MLNAME_CAST(sipName_readBool), meth_QDataStream_readBool, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readBool)},
    {SIP_MLNAME_CAST(sipName_readBytes), meth_QDataStream_readBytes, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readBytes)},
    {SIP_MLNAME_CAST(sipName_readDouble), meth_QDataStream_readDouble, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readDouble)},
    {SIP_MLNAME_CAST(sipName_readFloat), meth_QDataStream_readFloat, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readFloat)},
    {SIP_MLNAME_CAST(sipName_readInt), meth_QDataStream_readInt, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readInt)},
    {SIP_MLNAME_CAST(sipName_readInt16), meth_QDataStream_readInt16, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readInt16)},
    {SIP_MLNAME_CAST(sipName_readInt32), meth_QDataStream_readInt32, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readInt32)},
    {SIP_MLNAME_CAST(sipName_readInt64), meth_QDataStream_readInt64, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readInt64)},
    {SIP_MLNAME_CAST(sipName_readInt8), meth_QDataStream_readInt8, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readInt8)},
    {SIP_MLNAME_CAST(sipName_readQString), meth_QDataStream_readQString, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readQString)},
    {SIP_MLNAME_CAST(sipName_readQStringList), meth_QDataStream_readQStringList, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readQStringList)},
    {SIP_MLNAME_CAST(sipName_readQVariant), meth_QDataStream_readQVariant, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readQVariant)},
    {SIP_MLNAME_CAST(sipName_readQVariantHash), meth_QDataStream_readQVariantHash, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readQVariantHash)},
    {SIP_MLNAME_CAST(sipName_readQVariantList), meth_QDataStream_readQVariantList, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readQVariantList)},
    {SIP_MLNAME_CAST(sipName_readQVariantMap), meth_QDataStream_readQVariantMap, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readQVariantMap)},
    {SIP_MLNAME_CAST(sipName_readRawData), meth_QDataStream_readRawData, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readRawData)},
    {SIP_MLNAME_CAST(sipName_readString), meth_QDataStream_readString, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readString)},
    {SIP_MLNAME_CAST(sipName_readUInt16), meth_QDataStream_readUInt16, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readUInt16)},
    {SIP_MLNAME_CAST(sipName_readUInt32), meth_QDataStream_readUInt32, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readUInt32)},
    {SIP_MLNAME_CAST(sipName_readUInt64), meth_QDataStream_readUInt64, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readUInt64)},
    {SIP_MLNAME_CAST(sipName_readUInt8), meth_QDataStream_readUInt8, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readUInt8)},
    {SIP_MLNAME_CAST(sipName_resetStatus), meth_QDataStream_resetStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_resetStatus)},
    {SIP_MLNAME_CAST(sipName_rollbackTransaction), meth_QDataStream_rollbackTransaction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_rollbackTransaction)},
    {SIP_MLNAME_CAST(sipName_setByteOrder), meth_QDataStream_setByteOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_setByteOrder)},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QDataStream_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_setDevice)},
    {SIP_MLNAME_CAST(sipName_setFloatingPointPrecision), meth_QDataStream_setFloatingPointPrecision, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_setFloatingPointPrecision)},
    {SIP_MLNAME_CAST(sipName_setStatus), meth_QDataStream_setStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_setStatus)},
    {SIP_MLNAME_CAST(sipName_setVersion), meth_QDataStream_setVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_setVersion)},
    {SIP_MLNAME_CAST(sipName_skipRawData), meth_QDataStream_skipRawData, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_skipRawData)},
    {SIP_MLNAME_CAST(sipName_startTransaction), meth_QDataStream_startTransaction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_startTransaction)},
    {SIP_MLNAME_CAST(sipName_status), meth_QDataStream_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_status)},
    {SIP_MLNAME_CAST(sipName_version), meth_QDataStream_version, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_version)},
    {SIP_MLNAME_CAST(sipName_writeBool), meth_QDataStream_writeBool, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeBool)},
    {SIP_MLNAME_CAST(sipName_writeBytes), meth_QDataStream_writeBytes, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeBytes)},
    {SIP_MLNAME_CAST(sipName_writeDouble), meth_QDataStream_writeDouble, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeDouble)},
    {SIP_MLNAME_CAST(sipName_writeFloat), meth_QDataStream_writeFloat, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeFloat)},
    {SIP_MLNAME_CAST(sipName_writeInt), meth_QDataStream_writeInt, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeInt)},
    {SIP_MLNAME_CAST(sipName_writeInt16), meth_QDataStream_writeInt16, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeInt16)},
    {SIP_MLNAME_CAST(sipName_writeInt32), meth_QDataStream_writeInt32, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeInt32)},
    {SIP_MLNAME_CAST(sipName_writeInt64), meth_QDataStream_writeInt64, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeInt64)},
    {SIP_MLNAME_CAST(sipName_writeInt8), meth_QDataStream_writeInt8, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeInt8)},
    {SIP_MLNAME_CAST(sipName_writeQString), meth_QDataStream_writeQString, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeQString)},
    {SIP_MLNAME_CAST(sipName_writeQStringList), meth_QDataStream_writeQStringList, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeQStringList)},
    {SIP_MLNAME_CAST(sipName_writeQVariant), meth_QDataStream_writeQVariant, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeQVariant)},
    {SIP_MLNAME_CAST(sipName_writeQVariantHash), meth_QDataStream_writeQVariantHash, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeQVariantHash)},
    {SIP_MLNAME_CAST(sipName_writeQVariantList), meth_QDataStream_writeQVariantList, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeQVariantList)},
    {SIP_MLNAME_CAST(sipName_writeQVariantMap), meth_QDataStream_writeQVariantMap, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeQVariantMap)},
    {SIP_MLNAME_CAST(sipName_writeRawData), meth_QDataStream_writeRawData, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeRawData)},
    {SIP_MLNAME_CAST(sipName_writeString), meth_QDataStream_writeString, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeString)},
    {SIP_MLNAME_CAST(sipName_writeUInt16), meth_QDataStream_writeUInt16, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeUInt16)},
    {SIP_MLNAME_CAST(sipName_writeUInt32), meth_QDataStream_writeUInt32, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeUInt32)},
    {SIP_MLNAME_CAST(sipName_writeUInt64), meth_QDataStream_writeUInt64, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeUInt64)},
    {SIP_MLNAME_CAST(sipName_writeUInt8), meth_QDataStream_writeUInt8, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeUInt8)}
};

static sipEnumMemberDef enummembers_QDataStream[] = {
    {sipName_BigEndian, static_cast<int>( ::QDataStream::BigEndian), 37},
    {sipName_DoublePrecision, static_cast<int>( ::QDataStream::DoublePrecision), 38},
    {sipName_LittleEndian, static_cast<int>( ::QDataStream::LittleEndian), 37},
    {sipName_Ok, static_cast<int>( ::QDataStream::Ok), 39},
    {sipName_Qt_1_0, static_cast<int>( ::QDataStream::Qt_1_0), 40},
    {sipName_Qt_2_0, static_cast<int>( ::QDataStream::Qt_2_0), 40},
    {sipName_Qt_2_1, static_cast<int>( ::QDataStream::Qt_2_1), 40},
    {sipName_Qt_3_0, static_cast<int>( ::QDataStream::Qt_3_0), 40},
    {sipName_Qt_3_1, static_cast<int>( ::QDataStream::Qt_3_1), 40},
    {sipName_Qt_3_3, static_cast<int>( ::QDataStream::Qt_3_3), 40},
    {sipName_Qt_4_0, static_cast<int>( ::QDataStream::Qt_4_0), 40},
    {sipName_Qt_4_1, static_cast<int>( ::QDataStream::Qt_4_1), 40},
    {sipName_Qt_4_2, static_cast<int>( ::QDataStream::Qt_4_2), 40},
    {sipName_Qt_4_3, static_cast<int>( ::QDataStream::Qt_4_3), 40},
    {sipName_Qt_4_4, static_cast<int>( ::QDataStream::Qt_4_4), 40},
    {sipName_Qt_4_5, static_cast<int>( ::QDataStream::Qt_4_5), 40},
    {sipName_Qt_4_6, static_cast<int>( ::QDataStream::Qt_4_6), 40},
    {sipName_Qt_4_7, static_cast<int>( ::QDataStream::Qt_4_7), 40},
    {sipName_Qt_4_8, static_cast<int>( ::QDataStream::Qt_4_8), 40},
    {sipName_Qt_4_9, static_cast<int>( ::QDataStream::Qt_4_9), 40},
    {sipName_Qt_5_0, static_cast<int>( ::QDataStream::Qt_5_0), 40},
    {sipName_Qt_5_1, static_cast<int>( ::QDataStream::Qt_5_1), 40},
    {sipName_Qt_5_10, static_cast<int>( ::QDataStream::Qt_5_10), 40},
    {sipName_Qt_5_2, static_cast<int>( ::QDataStream::Qt_5_2), 40},
    {sipName_Qt_5_3, static_cast<int>( ::QDataStream::Qt_5_3), 40},
    {sipName_Qt_5_4, static_cast<int>( ::QDataStream::Qt_5_4), 40},
    {sipName_Qt_5_5, static_cast<int>( ::QDataStream::Qt_5_5), 40},
    {sipName_Qt_5_6, static_cast<int>( ::QDataStream::Qt_5_6), 40},
    {sipName_Qt_5_7, static_cast<int>( ::QDataStream::Qt_5_7), 40},
    {sipName_Qt_5_8, static_cast<int>( ::QDataStream::Qt_5_8), 40},
    {sipName_Qt_5_9, static_cast<int>( ::QDataStream::Qt_5_9), 40},
    {sipName_ReadCorruptData, static_cast<int>( ::QDataStream::ReadCorruptData), 39},
    {sipName_ReadPastEnd, static_cast<int>( ::QDataStream::ReadPastEnd), 39},
    {sipName_SinglePrecision, static_cast<int>( ::QDataStream::SinglePrecision), 38},
    {sipName_WriteFailed, static_cast<int>( ::QDataStream::WriteFailed), 39},
};

PyDoc_STRVAR(doc_QDataStream, "\1QDataStream()\n"
"QDataStream(QIODevice)\n"
"QDataStream(QByteArray, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag])\n"
"QDataStream(QByteArray)");


static pyqt5ClassPluginDef plugin_QDataStream = {
    0,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtCore_QDataStream = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDataStream,
        {0},
        &plugin_QDataStream
    },
    {
        sipNameNr_QDataStream,
        {0, 0, 1},
        59, methods_QDataStream,
        35, enummembers_QDataStream,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDataStream,
    -1,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QDataStream,
    init_type_QDataStream,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDataStream,
    0,
    0,
    0,
    release_QDataStream,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
