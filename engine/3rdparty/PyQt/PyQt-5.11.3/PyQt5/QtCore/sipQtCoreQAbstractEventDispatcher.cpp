/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 *
 * Copyright (c) 2018 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#include <qabstracteventdispatcher.h>

#include <qobject.h>
#include <qbytearray.h>
#include <qwineventnotifier.h>
#include <qabstractnativeeventfilter.h>
#include <qlist.h>
#include <qabstracteventdispatcher.h>
#include <qabstracteventdispatcher.h>
#include <qnamespace.h>
#include <qsocketnotifier.h>
#include <qeventloop.h>
#include <qthread.h>
#include <qmetaobject.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qcoreevent.h>
#include <qstring.h>
#include <qvariant.h>
#include <qlist.h>
#include <qlist.h>
#include <qnamespace.h>
#include <qregexp.h>
#include <qregularexpression.h>
#include <qobjectdefs.h>


class sipQAbstractEventDispatcher : public  ::QAbstractEventDispatcher
{
public:
    sipQAbstractEventDispatcher( ::QObject*);
    virtual ~sipQAbstractEventDispatcher();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const  ::QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const  ::QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const  ::QMetaMethod&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void unregisterEventNotifier( ::QWinEventNotifier*);
    bool registerEventNotifier( ::QWinEventNotifier*);
    int remainingTime(int);
    void closingDown();
    void startingUp();
    void flush();
    void interrupt();
    void wakeUp();
    QList< ::QAbstractEventDispatcher::TimerInfo> registeredTimers( ::QObject*) const;
    bool unregisterTimers( ::QObject*);
    bool unregisterTimer(int);
    void registerTimer(int,int, ::Qt::TimerType, ::QObject*);
    void unregisterSocketNotifier( ::QSocketNotifier*);
    void registerSocketNotifier( ::QSocketNotifier*);
    bool hasPendingEvents();
    bool processEvents( ::QEventLoop::ProcessEventsFlags);
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const  ::QMetaMethod&);
    void disconnectNotify(const  ::QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractEventDispatcher(const sipQAbstractEventDispatcher &);
    sipQAbstractEventDispatcher &operator = (const sipQAbstractEventDispatcher &);

    char sipPyMethods[23];
};

sipQAbstractEventDispatcher::sipQAbstractEventDispatcher( ::QObject*a0):  ::QAbstractEventDispatcher(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractEventDispatcher::~sipQAbstractEventDispatcher()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAbstractEventDispatcher::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QAbstractEventDispatcher);

    return  ::QAbstractEventDispatcher::metaObject();
}

int sipQAbstractEventDispatcher::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAbstractEventDispatcher::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QAbstractEventDispatcher,_c,_id,_a);

    return _id;
}

void *sipQAbstractEventDispatcher::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QAbstractEventDispatcher, _clname, &sipCpp) ? sipCpp :  ::QAbstractEventDispatcher::qt_metacast(_clname));
}

void sipQAbstractEventDispatcher::unregisterEventNotifier( ::QWinEventNotifier*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QAbstractEventDispatcher,sipName_unregisterEventNotifier);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWinEventNotifier*);

    sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractEventDispatcher::registerEventNotifier( ::QWinEventNotifier*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_QAbstractEventDispatcher,sipName_registerEventNotifier);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWinEventNotifier*);

    return sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQAbstractEventDispatcher::remainingTime(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_QAbstractEventDispatcher,sipName_remainingTime);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_18(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::closingDown()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_closingDown);

    if (!sipMeth)
    {
         ::QAbstractEventDispatcher::closingDown();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQAbstractEventDispatcher::startingUp()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_startingUp);

    if (!sipMeth)
    {
         ::QAbstractEventDispatcher::startingUp();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQAbstractEventDispatcher::flush()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,sipName_QAbstractEventDispatcher,sipName_flush);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQAbstractEventDispatcher::interrupt()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,sipName_QAbstractEventDispatcher,sipName_interrupt);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQAbstractEventDispatcher::wakeUp()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,sipName_QAbstractEventDispatcher,sipName_wakeUp);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

QList< ::QAbstractEventDispatcher::TimerInfo> sipQAbstractEventDispatcher::registeredTimers( ::QObject*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,sipName_QAbstractEventDispatcher,sipName_registeredTimers);

    if (!sipMeth)
        return QList< ::QAbstractEventDispatcher::TimerInfo>();

    extern QList< ::QAbstractEventDispatcher::TimerInfo> sipVH_QtCore_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*);

    return sipVH_QtCore_16(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractEventDispatcher::unregisterTimers( ::QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,sipName_QAbstractEventDispatcher,sipName_unregisterTimers);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtCore_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*);

    return sipVH_QtCore_15(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractEventDispatcher::unregisterTimer(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,sipName_QAbstractEventDispatcher,sipName_unregisterTimer);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtCore_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_14(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::registerTimer(int a0,int a1, ::Qt::TimerType a2, ::QObject*a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,sipName_QAbstractEventDispatcher,sipName_registerTimer);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int, ::Qt::TimerType, ::QObject*);

    sipVH_QtCore_13(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQAbstractEventDispatcher::unregisterSocketNotifier( ::QSocketNotifier*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,sipName_QAbstractEventDispatcher,sipName_unregisterSocketNotifier);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QSocketNotifier*);

    sipVH_QtCore_12(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::registerSocketNotifier( ::QSocketNotifier*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,sipName_QAbstractEventDispatcher,sipName_registerSocketNotifier);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QSocketNotifier*);

    sipVH_QtCore_12(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractEventDispatcher::hasPendingEvents()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,sipName_QAbstractEventDispatcher,sipName_hasPendingEvents);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQAbstractEventDispatcher::processEvents( ::QEventLoop::ProcessEventsFlags a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,sipName_QAbstractEventDispatcher,sipName_processEvents);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtCore_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEventLoop::ProcessEventsFlags);

    return sipVH_QtCore_10(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractEventDispatcher::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QAbstractEventDispatcher::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractEventDispatcher::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QAbstractEventDispatcher::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractEventDispatcher::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QAbstractEventDispatcher::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QAbstractEventDispatcher::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QAbstractEventDispatcher::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QAbstractEventDispatcher::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QAbstractEventDispatcher::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQAbstractEventDispatcher::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipQAbstractEventDispatcher::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipQAbstractEventDispatcher::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQAbstractEventDispatcher::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipQAbstractEventDispatcher::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipQAbstractEventDispatcher::sipProtectVirt_connectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQAbstractEventDispatcher::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQAbstractEventDispatcher::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}

bool sipQAbstractEventDispatcher::sipProtect_isSignalConnected(const  ::QMetaMethod& a0) const
{
    return  ::QObject::isSignalConnected(a0);
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_sender, "sender(self) -> QObject");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQAbstractEventDispatcher *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
             ::QObject*sipRes = 0;

        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_sender, doc_QAbstractEventDispatcher_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_receivers, "receivers(self, PYQT_SIGNAL) -> int");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQAbstractEventDispatcher *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_receivers, doc_QAbstractEventDispatcher_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipQAbstractEventDispatcher *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_timerEvent, doc_QAbstractEventDispatcher_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_childEvent, "childEvent(self, QChildEvent)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipQAbstractEventDispatcher *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_childEvent, doc_QAbstractEventDispatcher_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_customEvent, "customEvent(self, QEvent)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQAbstractEventDispatcher *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_customEvent, doc_QAbstractEventDispatcher_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_connectNotify, "connectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQAbstractEventDispatcher *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_connectNotify, doc_QAbstractEventDispatcher_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_disconnectNotify, "disconnectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQAbstractEventDispatcher *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_disconnectNotify, doc_QAbstractEventDispatcher_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_senderSignalIndex, "senderSignalIndex(self) -> int");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQAbstractEventDispatcher *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_senderSignalIndex, doc_QAbstractEventDispatcher_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_isSignalConnected, "isSignalConnected(self, QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMetaMethod* a0;
        const sipQAbstractEventDispatcher *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_isSignalConnected, doc_QAbstractEventDispatcher_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_instance, "instance(thread: QThread = None) -> QAbstractEventDispatcher");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_instance(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_instance(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QThread* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_thread,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8", sipType_QThread, &a0))
        {
             ::QAbstractEventDispatcher*sipRes;

            sipRes =  ::QAbstractEventDispatcher::instance(a0);

            return sipConvertFromType(sipRes,sipType_QAbstractEventDispatcher,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_instance, doc_QAbstractEventDispatcher_instance);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_processEvents, "processEvents(self, Union[QEventLoop.ProcessEventsFlags, QEventLoop.ProcessEventsFlag]) -> bool");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_processEvents(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_processEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QEventLoop::ProcessEventsFlags* a0;
        int a0State = 0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_processEvents);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->processEvents(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_processEvents, doc_QAbstractEventDispatcher_processEvents);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_hasPendingEvents, "hasPendingEvents(self) -> bool");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_hasPendingEvents(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_hasPendingEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_hasPendingEvents);
                return NULL;
            }

            sipRes = sipCpp->hasPendingEvents();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_hasPendingEvents, doc_QAbstractEventDispatcher_hasPendingEvents);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_registerSocketNotifier, "registerSocketNotifier(self, QSocketNotifier)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_registerSocketNotifier(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_registerSocketNotifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QSocketNotifier* a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QSocketNotifier, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_registerSocketNotifier);
                return NULL;
            }

            sipCpp->registerSocketNotifier(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_registerSocketNotifier, doc_QAbstractEventDispatcher_registerSocketNotifier);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_unregisterSocketNotifier, "unregisterSocketNotifier(self, QSocketNotifier)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_unregisterSocketNotifier(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_unregisterSocketNotifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QSocketNotifier* a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QSocketNotifier, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_unregisterSocketNotifier);
                return NULL;
            }

            sipCpp->unregisterSocketNotifier(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_unregisterSocketNotifier, doc_QAbstractEventDispatcher_unregisterSocketNotifier);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_registerTimer, "registerTimer(self, int, Qt.TimerType, QObject) -> int\n"
"registerTimer(self, int, int, Qt.TimerType, QObject)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_registerTimer(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_registerTimer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::Qt::TimerType a1;
         ::QObject* a2;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiXEJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, &a0, sipType_Qt_TimerType, &a1, sipType_QObject, &a2))
        {
            int sipRes;

            sipRes = sipCpp->registerTimer(a0,a1,a2);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
         ::Qt::TimerType a2;
         ::QObject* a3;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiEJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, &a0, &a1, sipType_Qt_TimerType, &a2, sipType_QObject, &a3))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_registerTimer);
                return NULL;
            }

            sipCpp->registerTimer(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_registerTimer, doc_QAbstractEventDispatcher_registerTimer);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_unregisterTimer, "unregisterTimer(self, int) -> bool");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_unregisterTimer(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_unregisterTimer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_unregisterTimer);
                return NULL;
            }

            sipRes = sipCpp->unregisterTimer(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_unregisterTimer, doc_QAbstractEventDispatcher_unregisterTimer);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_unregisterTimers, "unregisterTimers(self, QObject) -> bool");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_unregisterTimers(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_unregisterTimers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QObject* a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QObject, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_unregisterTimers);
                return NULL;
            }

            sipRes = sipCpp->unregisterTimers(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_unregisterTimers, doc_QAbstractEventDispatcher_unregisterTimers);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_registeredTimers, "registeredTimers(self, QObject) -> object");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_registeredTimers(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_registeredTimers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QObject* a0;
        const  ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QObject, &a0))
        {
            QList< ::QAbstractEventDispatcher::TimerInfo>*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_registeredTimers);
                return NULL;
            }

            sipRes = new QList< ::QAbstractEventDispatcher::TimerInfo>(sipCpp->registeredTimers(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QAbstractEventDispatcher_TimerInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_registeredTimers, doc_QAbstractEventDispatcher_registeredTimers);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_wakeUp, "wakeUp(self)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_wakeUp(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_wakeUp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_wakeUp);
                return NULL;
            }

            sipCpp->wakeUp();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_wakeUp, doc_QAbstractEventDispatcher_wakeUp);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_interrupt, "interrupt(self)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_interrupt(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_interrupt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_interrupt);
                return NULL;
            }

            sipCpp->interrupt();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_interrupt, doc_QAbstractEventDispatcher_interrupt);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_flush, "flush(self)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_flush(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_flush);
                return NULL;
            }

            sipCpp->flush();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_flush, doc_QAbstractEventDispatcher_flush);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_startingUp, "startingUp(self)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_startingUp(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_startingUp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractEventDispatcher::startingUp() : sipCpp->startingUp());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_startingUp, doc_QAbstractEventDispatcher_startingUp);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_closingDown, "closingDown(self)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_closingDown(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_closingDown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractEventDispatcher::closingDown() : sipCpp->closingDown());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_closingDown, doc_QAbstractEventDispatcher_closingDown);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_remainingTime, "remainingTime(self, int) -> int");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_remainingTime(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_remainingTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, &a0))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_remainingTime);
                return NULL;
            }

            sipRes = sipCpp->remainingTime(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_remainingTime, doc_QAbstractEventDispatcher_remainingTime);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_installNativeEventFilter, "installNativeEventFilter(self, QAbstractNativeEventFilter)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_installNativeEventFilter(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_installNativeEventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractNativeEventFilter* a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QAbstractNativeEventFilter, &a0))
        {
            sipCpp->installNativeEventFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_installNativeEventFilter, doc_QAbstractEventDispatcher_installNativeEventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_removeNativeEventFilter, "removeNativeEventFilter(self, QAbstractNativeEventFilter)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_removeNativeEventFilter(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_removeNativeEventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractNativeEventFilter* a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QAbstractNativeEventFilter, &a0))
        {
            sipCpp->removeNativeEventFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_removeNativeEventFilter, doc_QAbstractEventDispatcher_removeNativeEventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_registerEventNotifier, "registerEventNotifier(self, QWinEventNotifier) -> bool");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_registerEventNotifier(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_registerEventNotifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QWinEventNotifier* a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QWinEventNotifier, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_registerEventNotifier);
                return NULL;
            }

            sipRes = sipCpp->registerEventNotifier(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_registerEventNotifier, doc_QAbstractEventDispatcher_registerEventNotifier);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_unregisterEventNotifier, "unregisterEventNotifier(self, QWinEventNotifier)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_unregisterEventNotifier(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_unregisterEventNotifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QWinEventNotifier* a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QWinEventNotifier, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_unregisterEventNotifier);
                return NULL;
            }

            sipCpp->unregisterEventNotifier(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_unregisterEventNotifier, doc_QAbstractEventDispatcher_unregisterEventNotifier);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_filterNativeEvent, "filterNativeEvent(self, Union[QByteArray, bytes, bytearray], sip.voidptr) -> Tuple[bool, int]");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_filterNativeEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_filterNativeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        void* a1;
        long a2;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1v", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->filterNativeEvent(*a0,a1,&a2);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bl)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_filterNativeEvent, doc_QAbstractEventDispatcher_filterNativeEvent);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractEventDispatcher(void *, const sipTypeDef *);}
static void *cast_QAbstractEventDispatcher(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractEventDispatcher *sipCpp = reinterpret_cast< ::QAbstractEventDispatcher *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractEventDispatcher(void *, int);}
static void release_QAbstractEventDispatcher(void *sipCppV, int)
{
     ::QAbstractEventDispatcher *sipCpp = reinterpret_cast< ::QAbstractEventDispatcher *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractEventDispatcher(sipSimpleWrapper *);}
static void dealloc_QAbstractEventDispatcher(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractEventDispatcher *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractEventDispatcher(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractEventDispatcher(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractEventDispatcher(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractEventDispatcher *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractEventDispatcher(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractEventDispatcher[] = {{172, 255, 1}};


static PyMethodDef methods_QAbstractEventDispatcher[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QAbstractEventDispatcher_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_closingDown), meth_QAbstractEventDispatcher_closingDown, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_closingDown)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QAbstractEventDispatcher_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QAbstractEventDispatcher_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QAbstractEventDispatcher_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_filterNativeEvent), meth_QAbstractEventDispatcher_filterNativeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_filterNativeEvent)},
    {SIP_MLNAME_CAST(sipName_flush), meth_QAbstractEventDispatcher_flush, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_flush)},
    {SIP_MLNAME_CAST(sipName_hasPendingEvents), meth_QAbstractEventDispatcher_hasPendingEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_hasPendingEvents)},
    {SIP_MLNAME_CAST(sipName_installNativeEventFilter), meth_QAbstractEventDispatcher_installNativeEventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_installNativeEventFilter)},
    {SIP_MLNAME_CAST(sipName_instance), (PyCFunction)meth_QAbstractEventDispatcher_instance, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_instance)},
    {SIP_MLNAME_CAST(sipName_interrupt), meth_QAbstractEventDispatcher_interrupt, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_interrupt)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QAbstractEventDispatcher_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_processEvents), meth_QAbstractEventDispatcher_processEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_processEvents)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QAbstractEventDispatcher_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_registerEventNotifier), meth_QAbstractEventDispatcher_registerEventNotifier, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_registerEventNotifier)},
    {SIP_MLNAME_CAST(sipName_registerSocketNotifier), meth_QAbstractEventDispatcher_registerSocketNotifier, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_registerSocketNotifier)},
    {SIP_MLNAME_CAST(sipName_registerTimer), meth_QAbstractEventDispatcher_registerTimer, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_registerTimer)},
    {SIP_MLNAME_CAST(sipName_registeredTimers), meth_QAbstractEventDispatcher_registeredTimers, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_registeredTimers)},
    {SIP_MLNAME_CAST(sipName_remainingTime), meth_QAbstractEventDispatcher_remainingTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_remainingTime)},
    {SIP_MLNAME_CAST(sipName_removeNativeEventFilter), meth_QAbstractEventDispatcher_removeNativeEventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_removeNativeEventFilter)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QAbstractEventDispatcher_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QAbstractEventDispatcher_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_startingUp), meth_QAbstractEventDispatcher_startingUp, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_startingUp)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QAbstractEventDispatcher_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_unregisterEventNotifier), meth_QAbstractEventDispatcher_unregisterEventNotifier, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_unregisterEventNotifier)},
    {SIP_MLNAME_CAST(sipName_unregisterSocketNotifier), meth_QAbstractEventDispatcher_unregisterSocketNotifier, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_unregisterSocketNotifier)},
    {SIP_MLNAME_CAST(sipName_unregisterTimer), meth_QAbstractEventDispatcher_unregisterTimer, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_unregisterTimer)},
    {SIP_MLNAME_CAST(sipName_unregisterTimers), meth_QAbstractEventDispatcher_unregisterTimers, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_unregisterTimers)},
    {SIP_MLNAME_CAST(sipName_wakeUp), meth_QAbstractEventDispatcher_wakeUp, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_wakeUp)}
};

PyDoc_STRVAR(doc_QAbstractEventDispatcher, "\1QAbstractEventDispatcher(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractEventDispatcher[] = {
    {"awake()", "\1awake(self)", 0, 0},
    {"aboutToBlock()", "\1aboutToBlock(self)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt5ClassPluginDef plugin_QAbstractEventDispatcher = {
    & ::QAbstractEventDispatcher::staticMetaObject,
    0,
    signals_QAbstractEventDispatcher,
    0
};


sipClassTypeDef sipTypeDef_QtCore_QAbstractEventDispatcher = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractEventDispatcher,
        {0},
        &plugin_QAbstractEventDispatcher
    },
    {
        sipNameNr_QAbstractEventDispatcher,
        {0, 0, 1},
        29, methods_QAbstractEventDispatcher,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractEventDispatcher,
    -1,
    -1,
    supers_QAbstractEventDispatcher,
    0,
    init_type_QAbstractEventDispatcher,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractEventDispatcher,
    0,
    0,
    0,
    release_QAbstractEventDispatcher,
    cast_QAbstractEventDispatcher,
    0,
    0,
    0,
    0,
    0,
    0
};
